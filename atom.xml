<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[No Fucking Idea]]></title>
  <link href="http://JakubOboza.github.com/atom.xml" rel="self"/>
  <link href="http://JakubOboza.github.com/"/>
  <updated>2012-10-14T22:18:53+01:00</updated>
  <id>http://JakubOboza.github.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building up Queue system]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/10/14/building-up-queue-system/"/>
    <updated>2012-10-14T21:16:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/10/14/building-up-queue-system</id>
    <content type="html"><![CDATA[<p>Queue = FIFO, First in, First Out.</p>

<p>Many people use adds queue system to their products. Some of them do legendary things with it to make it extremely unreliable products :). Most of this solutions may seem trolling but they actually exists in some products.</p>

<h1>Rolling out own queue system</h1>

<p>First thing often people do is rolling out their own queue system. Is it bad ? no! it is great as long as you don&#8217;t have constraint that data can never be lost!</p>

<h2>Can lose data in queue</h2>

<p>If you use queue just to communicate between processes you can use something like unix name pipe. In reality this is just a file. Actually in Unix everything is a file and this is best ever design (if you neglect it you should die!).</p>

<figure class='code'><figcaption><span>name_pipe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkfifo oldschool_pipe
</span><span class='line'>gzip -9 -c &lt; oldschool_pipe &gt; out.gz &amp;
</span></code></pre></td></tr></table></div></figure>


<p>And next you can use it to push stuff into it eg.</p>

<figure class='code'><figcaption><span>example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>eacho <span class="s2">&quot;oldschoolllzzzz!!!!&quot;</span> &gt; oldschool_pipe
</span></code></pre></td></tr></table></div></figure>


<p>but this is shell example, you could create it and just read/write it in your processes.</p>

<p>That is cool. And this is the last point where we will not see problems :)))</p>

<h2>But we are programmers!</h2>

<p>Yes we are programmers and most of us are young and full of energy nobody remembers 70&#8217; i was born in 85 so i technically would be quite mad if i would remember 70&#8217;.</p>

<p>So how we approach problems so of us would create inside of their code queue.</p>

<p>In C it would be simply array wrapped with mutex&#8217;es but this is unreliable and its long to write and and and&#8230;</p>

<p>So what people do ? They try use READY products.</p>

<h2>First big mistake</h2>

<p>Use key-value store as queue.
- Lets serialize array into XYZ and set it into key.
- That&#8217;s good idea! Only one thing will write to it!</p>

<p>WRONG!</p>

<p>Such an assumption will provide you with insane amount of carnage in future. And even if i know &#8220;agile says XYZ now&#8221;&#8230; actually &#8220;agile&#8221; don&#8217;t say &#8220;take drugs an yolo because tomorrow you can die&#8221; but &#8220;TAKE RISKY THINGS FIRST&#8221; and this is risky thing. Should be implemented well.</p>

<p>What happens in this case ? Someone gets a great idea that product should scale adds another daemon and this f*cks up queue you lose messages.</p>

<p>Some dbms can handle this problem, but wrapping it into transaction will not solve the problem.</p>

<p>Scenario is:
Process a)</p>

<ul>
<li>reads queue</li>
<li>process is (makes a pop or push)</li>
<li>saves the serialised queue</li>
</ul>


<p>Now imagine process b) does the same. Everything is blazing fast and you get f*cked.</p>

<p>So DB system must know context. This is where RIAK shines, you get vector clocks and you know that you are f*cked. You can react but in 99% you don&#8217;t know how to resolve this issue but at least you would know&#8230; but some specialsits can disable this because handling vector clocks is a pain and you can get PERFORMANCE BOOST :))).</p>

<h2>Redis list as queue</h2>

<p>Redis is great tool to build a lot of stuff. And it has built in data structures. I think this is ground breaking because previous solutions like RDBMS most commonly use or other NoSQL solutions. Redis is great how to make queue within redis ?</p>

<figure class='code'><figcaption><span>queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lpush queue_name value -&gt; push
</span><span class='line'>rpop queue_name -&gt; pop
</span></code></pre></td></tr></table></div></figure>


<p>example like this</p>

<figure class='code'><figcaption><span>redis_example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; lpush queue 1
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; lpush queue 2
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 2
</span><span class='line'>redis 127.0.0.1:6379&gt; lpush queue 7
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 3
</span><span class='line'>redis 127.0.0.1:6379&gt; rpop queue
</span><span class='line'><span class="s2">&quot;1&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; rpop queue
</span><span class='line'><span class="s2">&quot;2&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; rpop queue
</span><span class='line'><span class="s2">&quot;7&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; rpop queue
</span><span class='line'><span class="o">(</span>nil<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool ! Works great and any process can access it in atomic way isn&#8217;t it great ? best thing ever ?!</p>

<p>Actually it is very good. But there is one thing you just missed! Redis do a flush of keys every 60 sec if 10k keys did change by default. What does it mean ? You can get screwed if redis will instantly die!</p>

<p>How to fix this ? Visit <a href="http://redis.io/topics/persistence">http://redis.io/topics/persistence</a> and see section &#8220;Append-only file&#8221;</p>

<figure class='code'><figcaption><span>redis_config.fix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>- appendonly no
</span><span class='line'>+ appendonly yes
</span></code></pre></td></tr></table></div></figure>


<p>Man you just did it, you lost some performance but you did it. Who would knew ? You just saved the world.
How much we just cut performance ? &#8220;fsync every time a new command is appended to the AOF. Very very slow, very safe.&#8221; that is Ouch!  Your boss could be unhappy even if this solution is actually the best, most simple and durable idea.</p>

<h2>Can&#8217;t lose any data! Redis plus Mysql/Postgres</h2>

<p>Persistence daemons worked out a new combo. You store each element of the queue like key-value store in SQL RDBMS and put its id on the queue in redis next you pop it up from the queue in redis process and updates its status in SQL RDBM. This is not so bad but it kills performance more than just turning on &#8220;appendonly yes&#8221;. Also it makes things hell more complicated and forces you to do updates in both system.</p>

<p>Is this system cure for cancer ? No! You have to have very good queue fail recovery / startup system. Simply empty list and make query</p>

<figure class='code'><figcaption><span>startup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">select</span> * <span class="nb">jobs </span>where <span class="k">done</span> <span class="o">=</span> <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>next you have to clean redis queue and push new data. Is this safe ? No you don&#8217;t know if few last jobs did finish or not. Eg. Mysql got f*cked but messages got processed. Yes this adds a lot more complications.</p>

<p>Also with this solution index on ID column makes its fast to make a select but slow to add or remove. And you want your queue to perform and yes mysql will do fsync.</p>

<h1>RabbitMQ / ZeroMQ</h1>

<p>When you will visit ZeroMQ page you will see</p>

<figure class='code'><figcaption><span>intro</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ØMQ <span class="se">\z</span>eromq<span class="se">\:</span>
</span><span class='line'> Ø  The socket library that acts as a concurrency framework.
</span><span class='line'> Ø  Faster than TCP, <span class="k">for </span>clustered products and supercomputing.
</span><span class='line'> Ø  Carries messages across inproc, IPC, TCP, and multicast.
</span><span class='line'> Ø  Connect N-to-N via fanout, pubsub, pipeline, request-reply.
</span><span class='line'> Ø  Asynch I/O <span class="k">for </span>scalable multicore message-passing apps.
</span><span class='line'> Ø  Large and active open <span class="nb">source </span>community.
</span><span class='line'> Ø  30+ languages including C, C++, Java, .NET, Python.
</span><span class='line'> Ø  Most OSes including Linux, Windows, OS X.
</span><span class='line'> Ø  LGPL free software with full commercial support from iMatix.
</span></code></pre></td></tr></table></div></figure>


<p>Nothing about consistency FASTERN THAN (this has to be good) TCP but can use TCP (i wonder if it can be faster than TCP even using TCP /trollface). Anyway you see a lot of stuff. I started some search on zeromq losing data and what i found <a href="http://zguide.zeromq.org/page:all#Missing-Message-Problem-Solver">http://zguide.zeromq.org/page:all#Missing-Message-Problem-Solver</a> a nice image.</p>

<p><a href="https://github.com/imatix/zguide/raw/master/images/fig9.png">Problem resolution diagram</a></p>

<p>Big thing :)</p>

<p>If you will visit rabbitmq page <a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a> you will see a lot of nice things like tutorial etc. Page is nice and has useful knowledge. Both solutions have client in Erlang (massive plus) and other languages. And even while setting up whole thing may be a pain i think this is a solid option both ZeromMQ and RabbitMQ.</p>

<h1>Why do we use Queues ?</h1>

<p>We use them to absorb traffic of messages and process their content by eg. workers / handlers etc. If we will make it unprocessable by more than one worker we ain&#8217;t doing our job properly.</p>

<p>What makes things hard.</p>

<ul>
<li>Locks if we use them, they will bite you back</li>
<li>Many points where we store same data in different way</li>
<li>Yes, locks will bite you back</li>
</ul>


<h1>So what is the best way to go ?</h1>

<p>I think the best way to go is just to start a new movement called Unix Archeology because we seems to be reinventing the wheel too many times. But really</p>

<ul>
<li>Make a list of solution</li>
<li>Ask your self if your idea is really good</li>
</ul>


<p>I&#8217;m 100% sure that storing queues as serialized lists in memcached or keeping them as table in mysql/postgres and making loads of funky stuff to keep it running is not the way to go. It can seem like a good idea at start but it is not. Named pipe in file system can be better.</p>

<p>Loads of things can be brilliant queue choices eg. Redis, ZeroMQ, RabbitMQ or even named pipes but not serialized array in key-value store.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis List internals]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/09/26/redis-list-internals/"/>
    <updated>2012-09-26T21:59:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/09/26/redis-list-internals</id>
    <content type="html"><![CDATA[<p>Today i spoted on twitter this:</p>

<p>@antirez: &#8220;The Redis community is composed of 99% of people that, really, know their stuff, know the Redis internals and behaviour, and are * great *.&#8221;</p>

<p>@shanley: &#8220;@antirez I&#8217;ve never met a technical community where 99% of them were familiar with the internals of anything. Did you mean 9%?&#8221;</p>

<p>This sparked in my mind very quick review of the topics that we talk about in work and i realised that we talk about a lot  about internals of redis and a bit about riak but this is different story :).</p>

<h1>Spike</h1>

<p>I just wanted to write a short post about first thing i ever picked when i was looking into internals of Redis. It is List :D i love lists.</p>

<p>So what i did was opening again github and picking up list header file to re-read.</p>

<p><a href="https://github.com/antirez/redis/blob/d310fbedabd3101505b694f5c25a2e48480a3c2b/src/adlist.h">https://github.com/antirez/redis/blob/d310fbedabd3101505b694f5c25a2e48480a3c2b/src/adlist.h</a></p>

<p>First thing that you notice is that code is simple and whole thing is implemented in 93 lines of header and 341 lines .c file.  (with license etc lol).</p>

<h1>Structure of List</h1>

<p>In general List is just degenerated Tree. In Redis structure of it is simple. Whole description of the list is simply</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">listNode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">listNode</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">listNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">listNode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listNode</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="n">listNode</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">dup</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">free</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">match</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">list</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>this knowledge lets us count how much space this will take on the heap and compare it with eg. set if we really need to. (list is imho most memory effective structure)</p>

<p>List iterator is important so its also worth having a peek at even if this is just internal implementation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">listIter</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">listNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">direction</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">listIter</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>with this we can take a peek into .c file and check how you get iterator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">listIter</span> <span class="o">*</span><span class="n">listGetIterator</span><span class="p">(</span><span class="n">list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="p">){</span>
</span><span class='line'>    <span class="n">listIter</span> <span class="o">*</span><span class="n">iter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">iter</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">iter</span><span class="p">)))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">direction</span> <span class="o">==</span> <span class="n">AL_START_HEAD</span><span class="p">)</span>
</span><span class='line'>        <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">iter</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">direction</span> <span class="o">=</span> <span class="n">direction</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">iter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And see that even if AL_START_HEAD is defined as 0 and AL_START_TAIL as 1 if we will use direction of 5 (lol) we will get tail :D I know that i&#8217;m bikesheding now.</p>

<p>Even without going any deeper you have a feeling how this works. Double linked list with (void<em>) value. First thing i thought today was (this was stupid) &#8220;Wow why this is (void </em>) and not (char <em>) this would let compiler better type check it while compilation&#8221; but antirez wrote to me &#8220;@jakuboboza hint: grep listCreate </em>.c&#8221; and that was the hint i needed. (void *) is more generic but list is used in many places in redis internals and i did not thought about it (lol)</p>

<figure class='code'><figcaption><span>grep listCreate *.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ grep listCreate *.c
</span><span class='line'>adlist.c:list *listCreate<span class="o">(</span>void<span class="o">)</span>
</span><span class='line'>adlist.c:    <span class="k">if</span> <span class="o">((</span><span class="nv">copy</span> <span class="o">=</span> listCreate<span class="o">())</span> <span class="o">==</span> NULL<span class="o">)</span>
</span><span class='line'>aof.c:    server.aof_rewrite_buf_blocks <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>aof.c:    c-&gt;reply <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>aof.c:    c-&gt;watched_keys <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>bio.c:        bio_jobs<span class="o">[</span>j<span class="o">]</span> <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>multi.c:        <span class="nv">clients</span> <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>networking.c:    c-&gt;reply <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>networking.c:    c-&gt;io_keys <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>networking.c:    c-&gt;watched_keys <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>networking.c:    c-&gt;pubsub_patterns <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>object.c:    list *l <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>pubsub.c:            <span class="nv">clients</span> <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis-benchmark.c:    config.clients <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.clients <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.clients_to_close <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.slaves <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.monitors <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.unblocked_clients <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.ready_keys <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>redis.c:    server.pubsub_patterns <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>sentinel.c:    sentinel.scripts_queue <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>slowlog.c:    server.slowlog <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>sort.c:    <span class="nv">operations</span> <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>t_list.c:        list *l <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>t_list.c:            <span class="nv">l</span> <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>t_list.c:        server.ready_keys <span class="o">=</span> listCreate<span class="o">()</span>;
</span><span class='line'>ziplist.c:            <span class="nv">ref</span> <span class="o">=</span> listCreate<span class="o">()</span>;
</span></code></pre></td></tr></table></div></figure>


<p>A lot of places :) lol.</p>

<p>In adlist.c we can also check how the list is created</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">list</span> <span class="o">*</span><span class="nf">listCreate</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">list</span> <span class="o">*</span><span class="n">list</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">list</span> <span class="o">=</span> <span class="n">zmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">list</span><span class="p">)))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">-&gt;</span><span class="n">dup</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">-&gt;</span><span class="n">free</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">-&gt;</span><span class="n">match</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just academic example :D  I love it. This code is easy to understand and just pleasure to read.</p>

<h1>why to even bother talking about internals ?</h1>

<p>It is important to talk about them because if you read in documentation that</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lpush is O<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>rpush is O<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>lpop is O<span class="o">(</span>1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>you really want to check this out to get better understanding how stuff works under the hood. Even if this is trivial example.</p>

<p>It is worth talking about internals of tools that you use, you learn a lot and i think its truth what antirez said, this community is great!</p>

<h1>Next</h1>

<p>Thing to view is suggested by antires Dict!</p>

<p>antirez: &#8220;@jakuboboza it&#8217;s definitely a very simple implementation! Probably our most &#8220;on steroids&#8221; implementation of data structures is dict.c&#8221;</p>

<p>^_____^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failover Redis setup with Sentinel]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/09/26/failover-redis-setup-with-sentinel/"/>
    <updated>2012-09-26T20:54:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/09/26/failover-redis-setup-with-sentinel</id>
    <content type="html"><![CDATA[<p>Long time nothing new, recently i started my own company LambdaCu.be and I was massively busy. If you want to hire me ping me at <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#107;&#117;&#98;&#97;&#64;&#108;&#97;&#x6d;&#98;&#x64;&#x61;&#99;&#117;&#46;&#98;&#101;">&#x6b;&#x75;&#x62;&#97;&#x40;&#108;&#x61;&#109;&#x62;&#100;&#97;&#x63;&#117;&#x2e;&#98;&#101;</a> =)</p>

<p>I have in pipeline a lot texts about lua scripting in redis and using it to build some tools but can&#8217;t find time to finish this stuff ;/.</p>

<h1>Auto failover</h1>

<p>Every database wants to have auto failover mechanism. This is a great marketing pitch! haha :) Main thing about is that one of your server can go down and you still are operating as normal and when he will go up again everything is fine.. unless your routing server will go down :D ofc.</p>

<h1>2.4.16 / 2.6</h1>

<p>Since Redis 2.4 and 2.6 there was this idea of adding it. Antirez wrote a draft spec for it and implemented it as experimental feature. It is really well described here <a href="http://redis.io/topics/sentinel">http://redis.io/topics/sentinel</a> so i will just write a short note how did i setup it and how does it feel.</p>

<h1>Setup</h1>

<p>While preparing to this demo i did everything on master 0ee3f05518e081640c1c6f9ae52c3a414f0feaceso what i did was simply start &#8220;master&#8221; and &#8220;replica servers&#8221; with this configs
(ofc turn daemonize to yes in production lol)</p>

<p>Standard Master setup with default script on port 6379 and replica with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>daemonize no
</span><span class='line'>timeout 0
</span><span class='line'>loglevel notice
</span><span class='line'>logfile stdout
</span><span class='line'>databases 16
</span><span class='line'>save 900 1
</span><span class='line'>save 300 10
</span><span class='line'>save 60 10000
</span><span class='line'>stop-writes-on-bgsave-error yes
</span><span class='line'>rdbcompression yes
</span><span class='line'>rdbchecksum yes
</span><span class='line'>dbfilename dump.rdb
</span><span class='line'>dir ./replica_dir
</span><span class='line'>slave-serve-stale-data yes
</span><span class='line'>slave-read-only yes
</span><span class='line'>appendonly no
</span><span class='line'>appendfsync everysec
</span><span class='line'>no-appendfsync-on-rewrite no
</span><span class='line'>auto-aof-rewrite-percentage 100
</span><span class='line'>auto-aof-rewrite-min-size 64mb
</span><span class='line'>lua-time-limit 5000
</span><span class='line'>
</span><span class='line'>pidfile /var/run/redis-replica-7789.pid
</span><span class='line'>port 7789
</span><span class='line'><span class="c"># replication config</span>
</span><span class='line'>slaveof 127.0.0.1 6379
</span><span class='line'>
</span><span class='line'>slowlog-log-slower-than 10000
</span><span class='line'>slowlog-max-len 1024
</span><span class='line'><span class="nb">hash</span>-max-ziplist-entries 512
</span><span class='line'><span class="nb">hash</span>-max-ziplist-value 64
</span><span class='line'>list-max-ziplist-entries 512
</span><span class='line'>list-max-ziplist-value 64
</span><span class='line'><span class="nb">set</span>-max-intset-entries 512
</span><span class='line'>zset-max-ziplist-entries 128
</span><span class='line'>zset-max-ziplist-value 64
</span><span class='line'>activerehashing yes
</span><span class='line'>client-output-buffer-limit normal 0 0 0
</span><span class='line'>client-output-buffer-limit slave 256mb 64mb 60
</span><span class='line'>client-output-buffer-limit pubsub 32mb 8mb 60
</span></code></pre></td></tr></table></div></figure>


<p>So i had master and slave running :) that was cool next thing i did was! configure and turn on the sentinel!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sentinel monitor mymaster 127.0.0.1 6379 1
</span><span class='line'>sentinel down-after-milliseconds mymaster 60000
</span><span class='line'>sentinel failover-timeout mymaster 900000
</span><span class='line'>sentinel can-failover mymaster yes
</span><span class='line'>sentinel parallel-syncs mymaster 1
</span><span class='line'>
</span><span class='line'>sentinel monitor resque 127.0.0.1 7789 1
</span><span class='line'>sentinel down-after-milliseconds resque 10000
</span><span class='line'>sentinel failover-timeout resque 900000
</span><span class='line'>sentinel can-failover resque yes
</span><span class='line'>sentinel parallel-syncs resque 5
</span></code></pre></td></tr></table></div></figure>


<p>And i turned him on!
with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis-server sentinel-my.conf --sentinel
</span></code></pre></td></tr></table></div></figure>


<p>And stuff started to work :D</p>

<h1>Carnage!!!</h1>

<p>So i started easy</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; get <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; <span class="nb">set</span> <span class="s2">&quot;hello&quot;</span> <span class="s2">&quot;lulz&quot;</span>
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>Works! I killed master and connected on 26379 to sentinel master did query</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> sentinel masters
</span></code></pre></td></tr></table></div></figure>


<p>and got</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1<span class="o">)</span>  1<span class="o">)</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>    2<span class="o">)</span> <span class="s2">&quot;resque&quot;</span>
</span><span class='line'>    3<span class="o">)</span> <span class="s2">&quot;ip&quot;</span>
</span><span class='line'>    4<span class="o">)</span> <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'>    5<span class="o">)</span> <span class="s2">&quot;port&quot;</span>
</span><span class='line'>    6<span class="o">)</span> <span class="s2">&quot;7789&quot;</span>
</span><span class='line'>    ...
</span></code></pre></td></tr></table></div></figure>


<p>Cool works great :D The only thing that worried me was that when i turned on master after failover (it took 8 sec) he did not pickup he is slave and he did not start replicating data.</p>

<h1>when you do this&#8230;</h1>

<p>You will see beefy</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>36373<span class="o">]</span> 26 Sep 21:15:03.441 <span class="c"># Error condition on socket for SYNC: Connection refused</span>
</span><span class='line'><span class="o">[</span>36373<span class="o">]</span> 26 Sep 21:15:04.521 * Connecting to MASTER...
</span><span class='line'><span class="o">[</span>36373<span class="o">]</span> 26 Sep 21:15:04.521 * MASTER &lt;-&gt; SLAVE sync started
</span><span class='line'><span class="o">[</span>36373<span class="o">]</span> 26 Sep 21:15:04.521 <span class="c"># Error condition on socket for SYNC: Connection refused</span>
</span><span class='line'><span class="o">[</span>36373<span class="o">]</span> 26 Sep 21:15:05.128 * MASTER MODE enabled <span class="o">(</span>user request<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the initial slave :) things just went from bad to good :D</p>

<h1>Summary</h1>

<p>This is cool new feature that you can have master-slave and auto failover server the only thing that driver have to do is if you get error while connecting / querying is to ask sentinel for new master connect and retry :) It is very basic but&#8230;</p>

<p>I like it!</p>

<p>THIS IS EXPERIMENTAL FEATURE and much more info about it you can finde here <a href="http://redis.io/topics/sentinel">http://redis.io/topics/sentinel</a>. Especially about pub/sub way of watching stuff / events while they occur.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing Twitter clone in redis]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/07/31/designing-twitter-clone-in-redis/"/>
    <updated>2012-07-31T14:02:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/07/31/designing-twitter-clone-in-redis</id>
    <content type="html"><![CDATA[<p>Ont he official redis site <a href="http://redis.io">http://redis.io</a>  you can find this <a href="http://redis.io/topics/twitter-clone/">http://redis.io/topics/twitter-clone/</a> post about building twitter clone in redis. I based my design post partially on it but i would like to go more deep into building timeline and posts.</p>

<h1>Quick review</h1>

<p>I used similar approach to store followers and following so i will just go fast through the keys and design.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:&lt;user_id&gt;:follows -&gt; <span class="nb">set </span>of ids this user follows
</span><span class='line'>  twtr:&lt;user_id&gt;:followers -&gt; <span class="nb">set </span>of id<span class="err">&#39;</span>s  that follows this user
</span></code></pre></td></tr></table></div></figure>


<p>What happens when i click &#8220;follow&#8221;</p>

<figure class='code'><figcaption><span>example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; SADD twtr:kuba:following amelia
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SADD twtr:amelia:followers kuba
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SADD twtr:kuba:following dan
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SADD twtr:dan:followers kuba
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SADD twtr:kuba:following ben
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SADD twtr:ben:followers kuba
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SMEMBERS twtr:kuba:following
</span><span class='line'>1<span class="o">)</span> <span class="s2">&quot;ben&quot;</span>
</span><span class='line'>2<span class="o">)</span> <span class="s2">&quot;amelia&quot;</span>
</span><span class='line'>3<span class="o">)</span> <span class="s2">&quot;dan&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now i follow amelia, ben and dan.</p>

<p>What happens when amelia click followers!</p>

<figure class='code'><figcaption><span>example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; SMEMBERS twtr:amelia:followers
</span><span class='line'>1<span class="o">)</span> <span class="s2">&quot;kuba&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way for each user we can see set of people who follow him and those who he follows. Thats all we need like in tutorial.</p>

<h1>Post</h1>

<p>So i think it is not waste if we will decide to keep post in form of 2 keys</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:&lt;user_id&gt;:post:&lt;post_id&gt; -&gt; content text of post
</span><span class='line'>  twtr:&lt;user_id&gt;:post:&lt;post_id&gt;:created_at -&gt; creation <span class="nb">time </span>of post
</span><span class='line'>  twtr:post_owner:&lt;post_id&gt; -&gt; id of post creator.
</span></code></pre></td></tr></table></div></figure>


<p>Why this approach and not compacting all the things into pipe separate key? Both solutions seems to be ok, this just leaves little bit more flexibility. I know that it will generate 2 x times more pickups to redis then previous so you can consider doing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:&lt;user_id&gt;:post:&lt;post_id&gt; -&gt; <span class="o">(</span>timestamp|text<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both solutions have a pros and cones, first one will require 2 x lookups and second one will require parsing data in app layer. Still i prefer first one.</p>

<h2>Post id</h2>

<p>This is hard topic, because in future we would want to scale ( lol ) . Generating post id is not easy task in this case. We could just use auto incrementing counter like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:post_id:next -&gt; auto incr
</span></code></pre></td></tr></table></div></figure>


<p>But to have something more flexible you should look at something like snowflake <a href="http://engineering.twitter.com/2010/06/announcing-snowflake.html">http://engineering.twitter.com/2010/06/announcing-snowflake.html</a>.</p>

<h1>Post list</h1>

<p>For each user we will store a list of posts he wrote. Initially i thought that we could just pump everything into list. But this is not optimal. This is single point which will grow like crazy and we will be not able to decide how and when to archive parts that are not used. Eg. posts did by user 8 months ago are not really relevant today because if we will make assumption that on average person posts few times a week this 8 month old entry will be way forgotten. We want to archive it, also it will be healthier for memory to store short lists.</p>

<p>I see here two scenarios:</p>

<ul>
<li>user looks at his last few posts &lt; 100</li>
<li>user is infinite scrolling through all posts.</li>
</ul>


<p>So this scenario reasonable seems to have list of lists in which we will have ordered post lists id&#8217;s. if we will use only LPUSH to add posts lists tot his list we will be able to to do easy LRANGE 0 <range> to get newest lists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:&lt;user_id&gt;:lists -&gt; list of lits id<span class="s1">&#39;s only LPUSH id and LRANGE 0 number.</span>
</span><span class='line'><span class="s1">  twtr:&lt;user_id&gt;:list_next -&gt; auto incr counter for lists id&#39;</span>s
</span><span class='line'>  twtr:&lt;user_id&gt;:list:&lt;list_id&gt; -&gt; list with 100 posts
</span></code></pre></td></tr></table></div></figure>


<p>So how do we get most recent posts ? we just  LRANGE 0 2 to get most recent two lists and next we will merge them first + second. Both are LPUSH&#8217;ed so should be semi ordered. (we don&#8217;t really care about order). adding stuff to time line is bit tricky.</p>

<p>we need to do it like this
<code>LRANGE &lt;key&gt; 0 1</code> current list id, next we need to <code>LLEN &lt;key&gt;</code> to check size and if it is &lt; SIZE ( for our example 100 ) we just <code>LPUSH &lt;key&gt; &lt;value&gt;</code> and job done, if size is > 100 we need to <code>INCR &lt;list counter&gt;</code> and LPUSH its result on list of lists and next we need to <code>LPUSH &lt;key&gt; &lt;value&gt;</code> on the new list.</p>

<p>And all of this in application layer. But this is the hardest bit to do. May seem to be complicated but if this seems to be not optimal you can add one more list</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:&lt;user_id&gt;:list:current -&gt; list of current 100 posts
</span></code></pre></td></tr></table></div></figure>


<p>This list is just the most current posts of particular user. How does this list work ? Algorithm is simple</p>

<ul>
<li>LPUSH new post id&#8217;s</li>
<li>RPOP if SIZE > 100</li>
</ul>


<p>This could be useful to reduce number of hits you get against redis.</p>

<h2>Time line</h2>

<p>Now the time line. Time line is exactly the same as user post list. we will just one &#8220;bit&#8221; about adding posts.</p>

<p>Algorithm here is when you add a post you have to pick all id&#8217;s of people who follow you. (example from top if you are adding post as amelia)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>SMEMBERS twtr:&lt;user_id&gt;:followers
</span></code></pre></td></tr></table></div></figure>


<p>And you need to push your post id into their time line posts list. Thats all. Ofc one thing that we need to add are keys for time line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  twtr:&lt;user_id&gt;:timeline:lists -&gt; list of lits id<span class="s1">&#39;s only LPUSH id and LRANGE 0 number.</span>
</span><span class='line'><span class="s1">  twtr:&lt;user_id&gt;:timeline:list_next -&gt; auto incr counter for lists id&#39;</span>s
</span><span class='line'>  twtr:&lt;user_id&gt;:timeline:list:&lt;list_id&gt; -&gt; list with 100 posts
</span><span class='line'>  twtr:&lt;user_id&gt;:timeline:current -&gt; LPUSH, RPOP &gt; SIZE current list cache
</span></code></pre></td></tr></table></div></figure>


<h1>Summary</h1>

<p>This is how i would approach building twitter like clone. Things like old lists can be easily archived into mysql, postgres or other thing and EXPIREed from redis.  One thing in my design is common that i put a lot into keys <user_id> this could be skiped but in my opinion it is not bad. IF you will use <user_id> in form of user email md5 you can use it directly to access gravatar of that user.</p>

<p>On average you will need to do around 10-30 hits into redis to get data if you plan to do it in a &#8220;lazy way&#8221; you can minimize number of hits to around 10.</p>

<p>If you see problem with my design comment i want to know it!.  The core of this design is that each user post data is stored into one redis instance. This is important because of access and race condition stories if you will have many redis instances. But achieving &#8220;sharding&#8221; in application layer is not hard. Only thing that i would care about is post id generator. This is single point of failure because i have a strong assertion that post_id is unique in whole system.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing todo app backend using redis and mongodb]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/07/26/designing-todo-app-backend-using-redis-and-mongodb/"/>
    <updated>2012-07-26T18:06:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/07/26/designing-todo-app-backend-using-redis-and-mongodb</id>
    <content type="html"><![CDATA[<h2>side note</h2>

<p>Upgrading octopress is a @!#!@pain! :></p>

<h1>What is this post about :)</h1>

<p>Long time nothing new here so i will glue something together about stuff that we were talking about today with my friend Jarek. We talked about building backend for Todo app :). Yes simple todo app. How to build scalable backend. So my initial thought was &#8220;how i would design it in different databases&#8221;. (i&#8217;m taking only about data model)</p>

<h2>Requirements</h2>

<p>What we know:</p>

<ul>
<li>User has some sort of id. (number, email, hash of something)</li>
<li>We need to be able to have different todo lists</li>
<li>User can choose his todo list and see tasks ( obvious )</li>
<li>User can tag tasks!</li>
<li>User can query tasks in list by tags</li>
<li>User can see all tags.</li>
</ul>


<h1>Design using Redis</h1>

<p>How to do it with redis ? :)</p>

<p>First few facts i assumed at start. Single todo task has body and timestamps [created_at, updated_at] and base for key will be phrase &#8220;todoapp&#8221;.</p>

<p>So lets start with user and his list of todo lists :). This gives us first key</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>todo:&lt;user_id&gt;:todolist:next <span class="o">=</span>&gt; auto incrementing counter <span class="k">for </span>lists id
</span><span class='line'>todo:&lt;user_id&gt;:todolists <span class="o">=</span>&gt; <span class="o">[</span>LIST<span class="o">]</span>
</span><span class='line'>todo:&lt;user_id&gt;:todolist:&lt;todo_list_id&gt;:name <span class="o">=</span>&gt; list name
</span></code></pre></td></tr></table></div></figure>


<p>Here we have two keys, first is  list id counter that we will bump to get new list counter :), second is list of todolists ids. Why do it this way ? Well people can add and remove todo lists.</p>

<p>Ok so how to create new list ?</p>

<figure class='code'><figcaption><span>example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; INCR todo:kuba:todolist:next
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; RPUSH todo:kuba:todolists 1
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; LRANGE todo:kuba:todolists 0 -1
</span><span class='line'>1<span class="o">)</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; SET todo:kuba:todolist:1:name <span class="s2">&quot;things to do&quot;</span>
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>Hey ! we just added id of our first list to list of our todo lists (lots of list word here!). Ok so now lets add a task.</p>

<p>list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>todo:&lt;user_id&gt;:todolist:&lt;todo_list_id&gt;:next <span class="o">=</span>&gt; auto incrementing counter <span class="k">for </span>tasks id
</span><span class='line'>todo:&lt;user_id&gt;:todolist:&lt;todo_list_id&gt; <span class="o">=</span>&gt; <span class="o">[</span>LIST<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>and task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>todo:&lt;user_id&gt;:task:&lt;task_id&gt; <span class="o">=</span>&gt; content of task eg. <span class="s2">&quot;finish blog post&quot;</span>
</span><span class='line'>todo:&lt;user_id&gt;:task:&lt;task_id&gt;:created_at <span class="o">=</span>&gt; epoch <span class="nb">time </span>when it was created handled by app
</span><span class='line'>todo:&lt;user_id&gt;:task:&lt;task_id&gt;:updated_at <span class="o">=</span>&gt; epoch <span class="nb">time </span>when it was last updated handled by app
</span></code></pre></td></tr></table></div></figure>


<p>Ok so how to i add task to my list</p>

<figure class='code'><figcaption><span>adding task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; INCR todo:kuba:todolist:1:next
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; LPUSH todo:kuba:todolist:1 1
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; SET todo:kuba:task:1 <span class="s2">&quot;finish blog post&quot;</span>
</span><span class='line'>OK
</span><span class='line'>redis 127.0.0.1:6379&gt; SET todo:kuba:task:1:created_at  1343324314
</span><span class='line'>OK
</span><span class='line'>redis 127.0.0.1:6379&gt; SET todo:kuba:task:1:updated_at  1343324315
</span><span class='line'>OK
</span></code></pre></td></tr></table></div></figure>


<p>And we have our first task in. How do we get tasks from out todo list simple!</p>

<figure class='code'><figcaption><span>peeking task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; LRANGE todo:kuba:todolist:1 0 -1
</span><span class='line'>1<span class="o">)</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; GET todo:kuba:task:1
</span><span class='line'><span class="s2">&quot;finish blog post&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; GET todo:kuba:task:1:created_at
</span><span class='line'><span class="s2">&quot;1343324314&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so now we have very simple todo lists with tasks, well at least overview. Ofc you can use sets for todo lists or zsets but lets stay with lists to keep it simple for now.</p>

<p>How ro remove task from the list ?</p>

<figure class='code'><figcaption><span>removing task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; LREM todo:kuba:todolist:1 -1 1
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; LRANGE todo:kuba:todolist:1 0 -1
</span><span class='line'><span class="o">(</span>empty list or <span class="nb">set</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good, now we can add tasks, remove tasks, same sotry with adding todo lists and removing todo lists.
One last thing is to add tags!. Simply here each task will have list of tags and each tag will have list of tasks related with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>todo:&lt;user_id&gt;:task:&lt;task_id&gt;:tags <span class="o">=</span>&gt; <span class="o">[</span>LIST<span class="o">]</span>
</span><span class='line'>todo:&lt;user_id&gt;:tag:&lt;tag&gt;:tasks <span class="o">=</span>&gt; <span class="o">[</span>LIST<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how we will add tags to tasks ? Simple!</p>

<figure class='code'><figcaption><span>tagging</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:6379&gt; LPUSH todo:kuba:task:1:tags <span class="s2">&quot;redis&quot;</span>
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; LPUSH todo:kuba:task:1:tags <span class="s2">&quot;design&quot;</span>
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 2
</span><span class='line'>redis 127.0.0.1:6379&gt; LPUSH todo:kuba:tag:redis:tasks 1
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; LPUSH todo:kuba:tag:design:tasks 1
</span><span class='line'><span class="o">(</span>integer<span class="o">)</span> 1
</span><span class='line'>redis 127.0.0.1:6379&gt; LRANGE todo:kuba:tag:design:tasks 0 -1
</span><span class='line'>1<span class="o">)</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>redis 127.0.0.1:6379&gt; LRANGE todo:kuba:task:1:tags 0 -1
</span><span class='line'>1<span class="o">)</span> <span class="s2">&quot;design&quot;</span>
</span><span class='line'>2<span class="o">)</span> <span class="s2">&quot;redis&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example shows what we need to do to tag a task with something and how to peek tasks tagged with it. Why we have both lists ? To make it fast while searching. If user will click on particular tag like &#8220;redis&#8221; you want to get it O(1) time not O(N) after searching all keys. And same the other way, normal ui will pull task test, when it was created and tags to display so we want to have this data ready.</p>

<p>This is whole design for the todo app. We have 8 types of keys.  Things like pagination, calculating time are all left to app layer. Important thing is that i scope everything to user key / id. This is because i want to isolate each user space easy. Each user in his own space will have short lists, there is no danger of &#8220;ultimate&#8221;  non splittable lists.</p>

<h1>Design using Mongodb</h1>

<p>Well this case upfront is easier to grasp because for each list we can use single document or collection of documents lets talk about both solutions.</p>

<h2>Todolist = Document</h2>

<p>In this example we will use built in &#8220;array&#8221; operators</p>

<figure class='code'><figcaption><span>creating</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">todolists</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">,</span> <span class="nx">tasks</span><span class="o">:</span> <span class="p">[]})</span>
</span><span class='line'><span class="s2">&quot;ok&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">todolists</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>   <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">,</span>   <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="p">{</span>   <span class="s2">&quot;$oid&quot;</span> <span class="o">:</span> <span class="s2">&quot;50118742cc93742e0d0b6f7c&quot;</span>   <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;tasks&quot;</span> <span class="o">:</span> <span class="p">[</span>   <span class="p">]</span>   <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So lets add a task :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">todolists</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">},{</span><span class="nx">$push</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;tasks&quot;</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span><span class="s2">&quot;finish blog post&quot;</span><span class="p">,</span> <span class="s2">&quot;tags&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;mongo&quot;</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="s2">&quot;ok&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">todolists</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>   <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">,</span>   <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="p">{</span>   <span class="s2">&quot;$oid&quot;</span> <span class="o">:</span> <span class="s2">&quot;50118742cc93742e0d0b6f7c&quot;</span>   <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;tasks&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>       <span class="p">{</span>   <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;finish blog post&quot;</span><span class="p">,</span>   <span class="s2">&quot;tags&quot;</span> <span class="o">:</span> <span class="p">[</span>   <span class="s2">&quot;mongo&quot;</span> <span class="p">]</span>   <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>   <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>this will create empty todo list with name &#8220;House work&#8221; of course this way we will not omit building sub lists of tags etc, we have to build in a same way like in redis but as part of document. The story is exactly the same like above in redis. Mongodb lets us query nested documents and this will enable us to skip some of the extra &#8220;lists&#8221; while doing search.</p>

<p>Lets try it out how to find out mongo tagged entries?</p>

<figure class='code'><figcaption><span>find by tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">todolists</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="s2">&quot;tasks.tags&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$in</span> <span class="o">:</span> <span class="p">[</span><span class="s2">&quot;mongo&quot;</span><span class="p">]</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>   <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;House work&quot;</span><span class="p">,</span>   <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="p">{</span>   <span class="s2">&quot;$oid&quot;</span> <span class="o">:</span> <span class="s2">&quot;50118742cc93742e0d0b6f7c&quot;</span>   <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;tasks&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>   <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;finish blog post&quot;</span><span class="p">,</span>   <span class="s2">&quot;tags&quot;</span> <span class="o">:</span> <span class="p">[</span>   <span class="s2">&quot;mongo&quot;</span> <span class="p">]</span>   <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>   <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This way we can find whole todolist with task that contains tag &#8220;mongo&#8221; but after that we will have to work out from the document  in app the task that we are interested int. Using it like this we will have a document with structure like this</p>

<figure class='code'><figcaption><span>todo list structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="nx">user</span><span class="o">:</span> <span class="s2">&quot;user id&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;&lt;name&gt;&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">:</span> <span class="s2">&quot;todo text&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tags</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;Tag1&quot;</span><span class="p">,</span> <span class="s2">&quot;Tag2&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="nx">created_at</span> <span class="o">:</span> <span class="nx">Time</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">updated_at</span> <span class="o">:</span> <span class="nx">Time</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using redis we could wrapp stuff into MULTI command while using mongodb &#8220;array&#8221; command we are a bit cowboishing. They could remove wrong stuff in we will not be cautious :). (well same in redis!) Big plus of Mongodb is native time type!</p>

<h2>Todolist = many documents</h2>

<p>Using this approach we can leverage more of our stuff on mongodb search in this approach each task will be a different document.
With structure like this</p>

<figure class='code'><figcaption><span>task structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">todo_list</span><span class="o">:</span> <span class="s2">&quot;todo list id&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">user</span><span class="o">:</span> <span class="s2">&quot;user id&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;todo text&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">tags</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Tag1&quot;</span><span class="p">,</span> <span class="s2">&quot;Tag2&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way we will have a lot of documents, more disk space consumption and still we will have to have second collection with with objects with structure like this</p>

<figure class='code'><figcaption><span>structure of todolist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">todo_list</span><span class="o">:</span> <span class="s2">&quot;todo list id&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;todo list name&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">user</span><span class="o">:</span> <span class="s2">&quot;user id&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// tasks: [Tasks OBjectID Array] you could have this and remove todo_list id from tasks choice is yours :)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this way we can use <code>find</code> tool very easy and get documents fast.</p>

<h1>Summary</h1>

<p>All of this solutions have some pros and cons, mongodb excels better when documents are bigger (limit is set on 16 mb per document) than loads of small documents (massive waste of space). Solution in redis is really fast and if you will implement lazy loading it will be very fast.  You can adjust this designs to your situation by changing lists to sets etc. The place where redis OWNS mongodb in this context is &#8220;strucutres&#8221; and we use a lot of them to store data like this, lists sets, zsets. Implementing priority list in mongodb will be totally custom solution while in redis we can just use zset.</p>

<p>This is just my point of view on this. I will supply some code to cover it more in part two. This is next problem, i&#8217;m sure solution in mongodb using things like mongoid <a href="http://mongoid.org">http://mongoid.org</a> will be much more developer friendly then building things &#8220;rawly&#8221; in redis hiredis client.</p>

<p>btw i jsut wrote this from &#8220;top of my head&#8221; so it may contain typos and i&#8217;m sure keys, structures can be optimized :) This is just to open discussion with my friend :)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Api prototyping with Rails respond_with]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/06/15/api-prototyping-with-rails-respond-with/"/>
    <updated>2012-06-15T23:11:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/06/15/api-prototyping-with-rails-respond-with</id>
    <content type="html"><![CDATA[<p>Prototyping json / xml RESTfull api with rails is easy. Before we will want to rewrite it to something like erlang webmachine or node.js! For purpose of this we can use syntax introduced in rails 3. (ages ago) with <code>respond_to/respond_with</code> it is very cool.</p>

<h1>Example controller</h1>

<p>How we use this ?  Lets take a peek and simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">VenuesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:xml</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="vi">@venues</span> <span class="o">=</span> <span class="no">Venue</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">per</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two things we will notice at start is <code>respond_to :html, :xml, :json</code> this is something like old merbs <code>provides</code> where we specify to which formats we want to respond. Second change is how we layout the action. All we have to do is to put into <code>respond_with</code> object we want to respond with.</p>

<p>What this buys for us ?</p>

<ul>
<li>If we have html request to actions like create, update or destroy we want to redirect on success</li>
<li>if we have json, xml request to same type of &#8220;state changing&#8221; actions we want to render response with our format.</li>
</ul>


<p>We achieve both of this with reponds_with in just one line. But lets take a peek at longer example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">VenuesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:authenticate_user!</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:near</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:html</span><span class="p">,</span> <span class="ss">:xml</span><span class="p">,</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="vi">@venues</span> <span class="o">=</span> <span class="no">Venue</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">per</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="vi">@venue</span> <span class="o">=</span> <span class="no">Venue</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">permalink</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="n">repond_with</span><span class="p">(</span><span class="vi">@venue</span> <span class="o">=</span> <span class="no">Venue</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@venue</span> <span class="o">=</span> <span class="no">Venue</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:venue</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span><span class="p">(</span><span class="vi">@venue</span><span class="p">,</span> <span class="ss">:location</span> <span class="o">=&gt;</span> <span class="n">venues_url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example we can see example of <code>create</code> action where we add <code>:location =&gt; venues_url</code> this will in case of format: html success redirect to this url.</p>

<h1>Summary</h1>

<p>Using this helps to write stuff fast and readable, you can still use plain old <code>respond_to</code> in action with old <code>format.html</code> syntax..</p>

<p>I hope you liked it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pong tests are wrong]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/06/07/pong-tests-are-wrong/"/>
    <updated>2012-06-07T19:09:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/06/07/pong-tests-are-wrong</id>
    <content type="html"><![CDATA[<p>After short talk with tomash and his gist <a href="https://gist.github.com/2871286">https://gist.github.com/2871286</a> with performance of vibe.d i decided to write this post.
In my opinion pong tests are wrong and do not show real &#8220;performance&#8221;. I said to him to check sinatra with thin handler not webrick and that showed ~1.6k req/sec which is not bad at all. While at my box it was ~900 req/sec so significantly less (Macbook Pro i5).</p>

<p>From this gist we can see that his vibe.d benchmark set pong test at 8425.85 req/sec (He used ab and i used httperf).</p>

<h1>Warp</h1>

<p>My first candidate in this competition of pong tests is haskell warp handler.</p>

<p>code:</p>

<figure class='code'><figcaption><span>pingpong.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="cm">{-# LANGUAGE OverloadedStrings #-}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.Wai</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.Wai.Handler.Warp</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Network.HTTP.Types</span> <span class="p">(</span><span class="nf">status200</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Blaze.ByteString.Builder</span> <span class="p">(</span><span class="nf">copyByteString</span><span class="p">)</span>
</span><span class='line'><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.UTF8</span> <span class="k">as</span> <span class="n">BU</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Monoid</span>
</span><span class='line'><span class="kr">import</span> <span class="nn">Data.Enumerator</span> <span class="p">(</span><span class="nf">run_</span><span class="p">,</span> <span class="nf">enumList</span><span class="p">,</span> <span class="p">(</span><span class="o">$$</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>    <span class="kr">let</span> <span class="n">port</span> <span class="ow">=</span> <span class="mi">8000</span>
</span><span class='line'>    <span class="n">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Listening on port &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">port</span>
</span><span class='line'>    <span class="n">run</span> <span class="n">port</span> <span class="n">app</span>
</span><span class='line'>
</span><span class='line'><span class="nf">app</span> <span class="n">req</span> <span class="ow">=</span> <span class="n">return</span> <span class="o">$</span>
</span><span class='line'>    <span class="kr">case</span> <span class="n">pathInfo</span> <span class="n">req</span> <span class="kr">of</span>
</span><span class='line'>        <span class="p">[</span><span class="s">&quot;pong&quot;</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">pong</span>
</span><span class='line'>        <span class="n">x</span> <span class="ow">-&gt;</span> <span class="n">index</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pong</span> <span class="ow">=</span> <span class="kt">ResponseBuilder</span> <span class="n">status200</span> <span class="p">[</span> <span class="p">(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;text/plain&quot;</span><span class="p">)</span> <span class="p">]</span> <span class="o">$</span> <span class="n">mconcat</span> <span class="o">$</span> <span class="n">map</span> <span class="n">copyByteString</span>
</span><span class='line'>    <span class="p">[</span> <span class="s">&quot;pong&quot;</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nf">index</span> <span class="n">x</span> <span class="ow">=</span> <span class="kt">ResponseBuilder</span> <span class="n">status200</span> <span class="p">[(</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span> <span class="s">&quot;text/html&quot;</span><span class="p">)]</span> <span class="o">$</span> <span class="n">mconcat</span> <span class="o">$</span> <span class="n">map</span> <span class="n">copyByteString</span>
</span><span class='line'>    <span class="p">[</span> <span class="s">&quot;&lt;p&gt;Hello from &quot;</span><span class="p">,</span> <span class="kt">BU</span><span class="o">.</span><span class="n">fromString</span> <span class="o">$</span> <span class="n">show</span> <span class="n">x</span><span class="p">,</span> <span class="s">&quot;!&lt;/p&gt;&quot;</span>
</span><span class='line'>    <span class="p">,</span> <span class="s">&quot;&lt;p&gt;&lt;a href=&#39;/pong&#39;&gt;pong&lt;/a&gt;&lt;/p&gt;</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>it is semi rack like syntax ;)</p>

<h1>Benchmark results</h1>

<p>I prepared results to show how big lie is pong test. Because in this type of test / showoff all you test is how fast really you can accept connections. Single thread will always win :). But lets look at results:</p>

<ul>
<li>Multi threaded - 50 threads   - Request rate: 858.8 req/s (1.2 ms/req) BOOO!!!!</li>
<li>Multi threaded - 4 threads ( on for each core ) - Request rate: 10020.8 req/s (0.1 ms/req) Vibe.d die!!! Yeah!!!!</li>
<li>Single threaded - default compilation  - Request rate: 13584.1 req/s (0.1 ms/req) Mother of God!</li>
</ul>


<p>Tested with <code>httperf --uri=/ --port=8000 --num-calls=10000 --num-conns=20</code> httperf command.</p>

<h1>Summary</h1>

<p>You can test it on your own, i did it on latest 7.4.1 Ghc from haskell platform on OSX 10.7. And post reply with your results :) maybe i missed something. Code, scripts to build and run are in repository <a href="https://github.com/JakubOboza/haskell-warp-pong-test">https://github.com/JakubOboza/haskell-warp-pong-test</a>.</p>

<h2>So how to test ?!</h2>

<p>I think you should test your application in default environment so with db behind it, but anyone in this scenario can say it is testing performance of db. But everyday&#8230; users are really testing performance of our db ;>&#8230; or the weakest of the elements in chain. So if your db / rendering engine is performing at level of 50 req / sec fast app handler will not turn it into 5000 req / sec.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebar templates]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/05/29/rebar-templates/"/>
    <updated>2012-05-29T21:38:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/05/29/rebar-templates</id>
    <content type="html"><![CDATA[<p>First question when i need to add new blog to my code I ask is, do i remember all the boilerplate and how many times i will make a mistake this time. No more :). Rebar has a nice thing built in it is templating language that lets us build our own templates.</p>

<h1>Custom template ?</h1>

<p>I always end up looking at old projects and copying parts like <code>gen_server</code> and reusing them. I always knew rebar has option to write them but never had time to look at it. Today lol, i wanted to do some cleaning at home so every thing seems to be a good excuse to not do any cleaning :D.</p>

<h2>What i need to know</h2>

<p>Basic template is made from one or many <code>.erl</code> files written with <code>mustache</code> style <code>{ { } }</code> code and <code>.template</code> file describing what to do with files.</p>

<h2>Let&#8217;s build gen_server template</h2>

<p>So my first file will be <code>gen_server.erl</code></p>

<figure class='code'><figcaption><span>gen_server.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%%% @author  <span class="o">{</span> <span class="o">{</span>author_name <span class="o">}</span> <span class="o">}</span> &lt;<span class="o">{</span> <span class="o">{</span>author_email<span class="o">}</span> <span class="o">}</span>&gt;
</span><span class='line'>%%% @copyright  <span class="o">{</span> <span class="o">{</span>copyright_year <span class="o">}</span> <span class="o">}</span>  <span class="o">{</span> <span class="o">{</span>author_name<span class="o">}</span> <span class="o">}</span>.
</span><span class='line'>%%% @doc  <span class="o">{</span> <span class="o">{</span>description <span class="o">}</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>-module<span class="o">(</span> <span class="o">{</span> <span class="o">{</span>name <span class="o">}</span> <span class="o">})</span>.
</span><span class='line'>-behaviour<span class="o">(</span>gen_server<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>-author<span class="o">(</span><span class="s1">&#39; { {author_name } } &lt;{ {author_email } }&gt;&#39;</span><span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>-export<span class="o">([</span>start_link/1<span class="o">])</span>.
</span><span class='line'>-export<span class="o">([</span>init/1, handle_call/3, handle_cast/2, terminate/2, handle_info/2, code_change/3, stop/1<span class="o">])</span>.
</span><span class='line'>
</span><span class='line'>% public api
</span><span class='line'>
</span><span class='line'>start_link<span class="o">(</span>_Args<span class="o">)</span> -&gt;
</span><span class='line'>  gen_server:start_link<span class="o">({</span><span class="nb">local</span>, ?MODULE<span class="o">}</span>, ?MODULE, <span class="o">[]</span>, <span class="o">[])</span>.
</span><span class='line'>
</span><span class='line'>% state should be change with State that you will pass
</span><span class='line'>init<span class="o">([])</span> -&gt;
</span><span class='line'>  <span class="o">{</span>ok, state<span class="o">}</span>.
</span><span class='line'>
</span><span class='line'>stop<span class="o">(</span>_Pid<span class="o">)</span> -&gt;
</span><span class='line'>  stop<span class="o">()</span>.
</span><span class='line'>
</span><span class='line'>stop<span class="o">()</span> -&gt;
</span><span class='line'>  gen_server:cast<span class="o">(</span>?MODULE, stop<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>handle_call<span class="o">({</span>method_name_and_params<span class="o">}</span>, _From, State<span class="o">)</span> -&gt;
</span><span class='line'>  <span class="nv">Response</span> <span class="o">=</span> ok,
</span><span class='line'>  <span class="o">{</span>reply, Response, State<span class="o">}</span>;
</span><span class='line'>
</span><span class='line'>handle_call<span class="o">(</span>_Message, _From, State<span class="o">)</span> -&gt;
</span><span class='line'>  <span class="o">{</span>reply, error, State<span class="o">}</span>.
</span><span class='line'>
</span><span class='line'>handle_cast<span class="o">(</span>_Message, State<span class="o">)</span> -&gt; <span class="o">{</span>noreply, State<span class="o">}</span>.
</span><span class='line'>handle_info<span class="o">(</span>_Message, State<span class="o">)</span> -&gt; <span class="o">{</span>noreply, State<span class="o">}</span>.
</span><span class='line'>terminate<span class="o">(</span>_Reason, _State<span class="o">)</span> -&gt; ok.
</span><span class='line'>code_change<span class="o">(</span>_OldVersion, State, _Extra<span class="o">)</span> -&gt; <span class="o">{</span>ok, State<span class="o">}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>This is the template, i know a bit long i tried to cut out all comments, euint etc and narrow it to minimum. I posted it to show how much you can save :). Now you will need the <code>transformation file</code>. All this things in { { something } } will be replaced by things we will type in command line or defaults from template file.</p>

<figure class='code'><figcaption><span>gen_server.template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>variables, <span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>name, <span class="s2">&quot;template&quot;</span><span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>copyright_year, <span class="s2">&quot;2012&quot;</span><span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>author_name, <span class="s2">&quot;jakub Oboza&quot;</span><span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>author_email, <span class="s2">&quot;jakub.oboza@gmail.com&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">]}</span>.
</span><span class='line'><span class="o">{</span>template, <span class="s2">&quot;gen_server.erl&quot;</span>, <span class="s2">&quot;src/{ {name} }.erl&quot;</span><span class="o">}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>For me it looks like this, we have few default definitions and at the bottom. template! This is important part it says which file he has to copy where and what will be the name of new file. Now everything should be clear!</p>

<h2>Injet it into rebar!</h2>

<p>All you need now to do is symlink your template folders to <code>~/.rebar/templates</code> and you can use them!
(you can symlink your folder or just create one there :) )</p>

<h2>Use!</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ rebar create <span class="nv">template</span><span class="o">=</span>gen_server <span class="nv">name</span><span class="o">=</span><span class="nv">example</span>
</span><span class='line'><span class="o">==</span>&gt; tmp <span class="o">(</span>create<span class="o">)</span>
</span><span class='line'>Writing src/example.erl
</span></code></pre></td></tr></table></div></figure>


<p>Viola!</p>

<h1>important</h1>

<p>When i was looking at this post i saw that {{ is converted in a wrong way by octopress so i added spaces between them! check repo for correct code!</p>

<h1>My own templates</h1>

<p>Today i started adding my own templates initially i have only <code>gen_server</code> and <code>webmachine_resource</code> but i will add more :). It is fun it is like building your own anti-boiler plate framework.</p>

<p>My templates repo: <a href="https://github.com/JakubOboza/rebar-templates">https://github.com/JakubOboza/rebar-templates</a></p>

<p>Hope this helps!
Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Future toons processing logs with node.js]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/29/future-toons-processing-logs-with-node-dot-js/"/>
    <updated>2012-04-29T20:41:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/29/future-toons-processing-logs-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>I&#8217;m using new relic for monitoring of my servers and i think it is great tool but recently their marketing wing
just spammmmmmed, hammered me with emails and when i replied to one of this emails it started to be even worse. My name is not Dave, David, John or Mark its Jakub. So i thought about processing nginx and all application servers on my own just for the lulz :).</p>

<p>First thing to achieve was to build a tool that will be able to work with logs in a way that will not limit it usage to small files. This is simple, i decided to build a lib that will enable to stream process logs by &#8220;entry&#8221;. Some of the</p>

<h1>Initial idea</h1>

<p>We will emit single &#8220;entry&#8221; so for logs that are build around &#8220;lines&#8221; we will emit line and for logs like rails we will emit whole entry. Line streaming is easy so few hours ago during watching 3 season of <a href="http://en.wikipedia.org/wiki/Metalocalypse">http://en.wikipedia.org/wiki/Metalocalypse</a> i wrote this.</p>

<h1>Future toons</h1>

<p>Version 0.0.1 <a href="https://github.com/JakubOboza/future_toons">https://github.com/JakubOboza/future_toons</a> This is my entry point to analytics on big files :). First thing was a benchmark. I said to my self that it can&#8217;t be more then 0.5sec on my box (i5 MBP) vs 100mb log file from nginx. I took a log from production and checked my initial code. It was 0.37 sec. That&#8217;s ok.</p>

<figure class='code'><figcaption><span>lib/toons.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">FutureToons</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">end_callback</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// in case someone will call it wrong way ;)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">FutureToons</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">FutureToons</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">(</span><span class="nx">end_callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">filename</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// if both present run instant</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">onLine</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// do not put methods between this line and initial definition</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">FutureToons</span><span class="p">,</span> <span class="nx">events</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code of whole thing is very simple. But while building node.js module there are few things that are useful. First of all you don&#8217;t need to implement your own way of inheritance you can use the one from utils. (Remember to put it just after function definition) because it overrides prototype :) you don&#8217;t wanna lose your &#8220;instance methods&#8221; don&#8217;t you.</p>

<p>Next nice thing to help users is check of instanceof just at top of &#8220;constructor&#8221; function. This prevents users from using it wrong. Well its easier to say it enables them to use it wrong and fixes their mistake.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">toons</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;future_toons&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">new</span> <span class="nx">toons</span><span class="p">(</span><span class="s2">&quot;example.js&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">){});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">toons</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;future_toons&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">toons</span><span class="p">(</span><span class="s2">&quot;example.js&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">){});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will produce same output and act in same way.</p>

<h1>How to use this ?</h1>

<p>It is simple :) You need to know three things, where the file is, what do you want to do with each line and do you need to do something at the end.</p>

<p>basic example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">toons</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;future_toons&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">on_each_line_callback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">line</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&gt; &quot;</span> <span class="o">+</span> <span class="nx">line</span><span class="p">);</span>  
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">new</span> <span class="nx">toons</span><span class="p">(</span><span class="s2">&quot;example.txt&quot;</span><span class="p">,</span> <span class="nx">on_each_line_callback</span><span class="p">);</span>
</span><span class='line'><span class="c1">// this will auto trigger run and process it but you can delay it like this</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">streamer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">toons</span><span class="p">();</span>
</span><span class='line'><span class="nx">streamer</span><span class="p">.</span><span class="nx">onLine</span><span class="p">(</span><span class="nx">on_each_line_callback</span><span class="p">);</span>
</span><span class='line'><span class="c1">// you can add function on end! also :)</span>
</span><span class='line'><span class="nx">streamer</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;lol&quot;</span><span class="p">)});</span>
</span><span class='line'><span class="c1">// run it naow!</span>
</span><span class='line'><span class="nx">streamer</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="s2">&quot;example.txt&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// you can reuse it for many files if you want ;p</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example will show each line of the file prefixed with &#8220;>&#8221; symbol and at the end he will print out &#8220;lol&#8221;. This is most common case in real world :) you need to optimize &#8220;lol&#8221;. And for now thats the whole api.</p>

<h1>Command line interface</h1>

<p>Currently i added simple command line interface just to play with it. example usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ <span class="nb">time </span>node bin/toons -f ~/Downloads/access.log -e <span class="s2">&quot;function(line){}&quot;</span> node bin/toons -f ~/Downloads/access.log -e <span class="s2">&quot;function(line){}&quot;</span>
</span><span class='line'>0.38s user 0.07s system 101% cpu 0.440 total
</span></code></pre></td></tr></table></div></figure>


<p>It is a bit unsafe now so maybe i will remove it soonish.</p>

<h1>Db vs File</h1>

<p>Some people say they need to put logs into db, i always ask this people &#8220;why not just file? this db will have to write it to this file anyway :)&#8221;</p>

<h1>Summary</h1>

<p>if you will get email from new relic sales guy, ignore! don&#8217;t reply ever!!! Haha while writing this post i got new email from their sales. Code is on github i hope i will have some time to work on it and it will have rails production.log streaming support soonish.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up replication with Redis]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/29/setting-up-replication-with-redis/"/>
    <updated>2012-04-29T20:16:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/29/setting-up-replication-with-redis</id>
    <content type="html"><![CDATA[<p>Everyone who wants to feel safe about his data wants to have some sort of backup :). Redis have a support for replication.
And it is very easy to setup.</p>

<h1>Setup!</h1>

<p>To setup replica node all you have to do is to add one line <code>slaveOf</code> in config @_@ of your new Redis instance.
Sounds easy :). Lets think about most basic scenario.</p>

<p>Two nodes, master node and slave node. For purpose of this example you can just start redis using <code>redis-server</code> command without by default he will start on port <code>6379</code> and this is all we need to know to setup replication.</p>

<h2>Configuration of replica node</h2>

<p>To configure replica node all we need to do is to create place to store the db eg. <code>mkdir replica_db</code> and choose port eg. <code>7789</code>. Last thing to do is to create config and point this node to the master. For me it looks like this:</p>

<figure class='code'><figcaption><span>redis-replica.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>daemonize no
</span><span class='line'>timeout 0
</span><span class='line'>loglevel notice
</span><span class='line'>logfile stdout
</span><span class='line'>databases 16
</span><span class='line'>save 900 1
</span><span class='line'>save 300 10
</span><span class='line'>save 60 10000
</span><span class='line'>stop-writes-on-bgsave-error yes
</span><span class='line'>rdbcompression yes
</span><span class='line'>rdbchecksum yes
</span><span class='line'>dbfilename dump.rdb
</span><span class='line'>dir ./replica_dir
</span><span class='line'>slave-serve-stale-data yes
</span><span class='line'>slave-read-only yes
</span><span class='line'>appendonly no
</span><span class='line'>appendfsync everysec
</span><span class='line'>no-appendfsync-on-rewrite no
</span><span class='line'>auto-aof-rewrite-percentage 100
</span><span class='line'>auto-aof-rewrite-min-size 64mb
</span><span class='line'>lua-time-limit 5000
</span><span class='line'>
</span><span class='line'>pidfile /var/run/redis-replica-7789.pid
</span><span class='line'>port 7789
</span><span class='line'><span class="c"># replication config</span>
</span><span class='line'>slaveof 127.0.0.1 6379
</span><span class='line'>
</span><span class='line'>slowlog-log-slower-than 10000
</span><span class='line'>slowlog-max-len 1024
</span><span class='line'><span class="nb">hash</span>-max-ziplist-entries 512
</span><span class='line'><span class="nb">hash</span>-max-ziplist-value 64
</span><span class='line'>list-max-ziplist-entries 512
</span><span class='line'>list-max-ziplist-value 64
</span><span class='line'><span class="nb">set</span>-max-intset-entries 512
</span><span class='line'>zset-max-ziplist-entries 128
</span><span class='line'>zset-max-ziplist-value 64
</span><span class='line'>activerehashing yes
</span><span class='line'>client-output-buffer-limit normal 0 0 0
</span><span class='line'>client-output-buffer-limit slave 256mb 64mb 60
</span><span class='line'>client-output-buffer-limit pubsub 32mb 8mb 60
</span></code></pre></td></tr></table></div></figure>


<p>Here the important thing really is <code>slaveof 127.0.0.1 6379</code> where we set where is our master. <code>port 7789</code> important if we are using few redis instances on one box and <code>dir ./replica_dir</code> be sure to not point this to master node db path if you do&#8230; you will suffer eternal flame.</p>

<p>Now just start the node <code>redis-server redis-replica.conf</code> and he will start syncing.</p>

<h1>Checking if everything works</h1>

<p>So by now we should have master running on default port and replica connected to it. Lets connect using <code>redis-cli</code> to master and set some keys eg. <code>set name kuba</code>.  Now lets connect to our replica.  If you followed the same configuration then me you can simply do <code>./redis-cli -p 7789</code> this will prompt you with regular command line interface. Now jsut type <code>get name</code></p>

<figure class='code'><figcaption><span>redis-replica.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis 127.0.0.1:7789&gt; get name
</span><span class='line'><span class="s2">&quot;jakub&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bang works!</p>

<h1>RO</h1>

<p>Important information is that one master can have many replicas and each replica is read only! So you can connect to it and read from it if you want / need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> λ ./redis-cli -p 7789
</span><span class='line'>redis 127.0.0.1:7789&gt; keys *
</span><span class='line'> 1<span class="o">)</span> <span class="s2">&quot;age&quot;</span>
</span><span class='line'> 2<span class="o">)</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>redis 127.0.0.1:7789&gt; get name
</span><span class='line'><span class="s2">&quot;jakub&quot;</span>
</span><span class='line'>redis 127.0.0.1:7789&gt; <span class="nb">set </span>name <span class="s2">&quot;not jakub&quot;</span>
</span><span class='line'><span class="o">(</span>error<span class="o">)</span> READONLY You can<span class="err">&#39;</span>t write against a <span class="nb">read </span>only slave.
</span><span class='line'>redis 127.0.0.1:7789&gt;
</span></code></pre></td></tr></table></div></figure>


<h1>Summary</h1>

<p>I never had deadly important data in redis :) But still its worth knowing how to setup this just in case something goes wrong you may want to have replica ready :).</p>

<p>On official site <a href="http://redis.io/topics/replication">http://redis.io/topics/replication</a> you can learn more about replication in redis.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building node.js module using npm]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/23/building-node-dot-js-module-using-npm/"/>
    <updated>2012-04-23T21:28:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/23/building-node-dot-js-module-using-npm</id>
    <content type="html"><![CDATA[<p>I have spend a bit time to find out how to build modules, where to put dependencies and how to form <code>package.json</code> so i decided to create this post to gather some of this info in one place. This <code>modules</code> are more like ruby <code>gems</code> than parts of language grouping functions also called modules (eg. Erlang). I was recently on conference and i want to post something about module i was working on at airport but before next post i need to add this so i will have something to reference to.</p>

<h1>npm</h1>

<p>Npm stands for node package manager and it is something like gems in ruby, eggs in python or apt in debian. It lets you search, install and update your node or application modules. You can create node.js modules without <code>npm</code> but if you want to publish your module its better to do it this way. If you have node.js <code>&gt;0.6.10</code> you should have npm bundled with your instalation if not go to <a href="http://npmjs.org/">http://npmjs.org/</a> and follow the instructions. (for normal platforms all you have to do i run <code>http://npmjs.org/install.sh</code>)</p>

<h1>scaffold</h1>

<p>First thing to do is to initialize our module, to do this we need to create a directory for it and run npm init like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ mkdir my_first_module <span class="o">&amp;&amp;</span> <span class="nb">cd </span>my_first_module
</span><span class='line'>λ npm init
</span></code></pre></td></tr></table></div></figure>


<p>Next he will ask us few questions, we should answer ;).
example output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Package name: <span class="o">(</span>my_first_module<span class="o">)</span>
</span><span class='line'>Description: my first module
</span><span class='line'>Package version: <span class="o">(</span>0.0.0<span class="o">)</span>
</span><span class='line'>Project homepage: <span class="o">(</span>none<span class="o">)</span> no-fucking-idea.com
</span><span class='line'>Project git repository: <span class="o">(</span>none<span class="o">)</span>
</span><span class='line'>Author name: Jakub Oboza
</span><span class='line'>Author email: <span class="o">(</span>none<span class="o">)</span> jakub.oboza@gmail.com
</span><span class='line'>Author url: <span class="o">(</span>none<span class="o">)</span> no-fucking-idea.com
</span><span class='line'>Main module/entry point: <span class="o">(</span>none<span class="o">)</span>
</span><span class='line'>Test <span class="nb">command</span>: <span class="o">(</span>none<span class="o">)</span> mocha -R landing lib/my_first_module.js
</span><span class='line'>About to write to /private/tmp/my_first_module/package.json
</span><span class='line'>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;author&quot;</span>: <span class="s2">&quot;Jakub Oboza &lt;jakub.oboza@gmail.com&gt; (no-fucking-idea.com)&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;my_first_module&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;description&quot;</span>: <span class="s2">&quot;my first module&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;version&quot;</span>: <span class="s2">&quot;0.0.0&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;homepage&quot;</span>: <span class="s2">&quot;no-fucking-idea.com&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span>: <span class="s2">&quot;mocha -R landing lib/my_first_module.js&quot;</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>  <span class="s2">&quot;optionalDependencies&quot;</span>: <span class="o">{}</span>,
</span><span class='line'>  <span class="s2">&quot;engines&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;node&quot;</span>: <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Is this ok? <span class="o">(</span>yes<span class="o">)</span> yes
</span></code></pre></td></tr></table></div></figure>


<p>This will create for us <code>package.json</code>. Now we have fully functional module and we could stop now&#8230;. but</p>

<h1>package.json</h1>

<p>This file is description of our package. It is in form of json so it should be easy to read and change.
Most of this fields don&#8217;t need a lot of description because keys are self explaining but things that we should look at is <code>"scripts"</code> where we defined <code>"test"</code> key. If we will now run <code>npm test</code> he will execute this command that is very useful.</p>

<p>Engines defined on what version of <code>node.js</code> our code will work leaving it to <code>*</code> is a bit hazard. You can set it to something specific if you want.</p>

<p>Important thing! If we will not specify entry point to our module by default it will be looking for <code>index.js</code> so for now lets leave it this way.</p>

<h1>tests with mocha</h1>

<p>If we want to write reasonable code that we want to rely on we should be doing massive testing. I think <code>mocha</code> is a very good library for this purpose! I strongly suggest installing it with flag <code>-g</code> so it will be accessible in global scope of <code>npm</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ npm install -g mocha
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Code</h1>

<p>Ok but we don&#8217;t have any code yet ;/. Yes lets start coding.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ mkdir lib
</span><span class='line'>λ touch index.js
</span><span class='line'>λ touch lib/my_first_module.js
</span></code></pre></td></tr></table></div></figure>


<p>Ok so we created <code>lib</code> directory with out module code, empty module file and index file. Now lets run the tests and see what happened.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ npm <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'>&gt; my_first_module@0.0.0 <span class="nb">test</span> /private/my_first_module
</span><span class='line'>&gt; mocha -R landing lib/my_first_module.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  ✔ 0 tests <span class="nb">complete</span> <span class="o">(</span>1ms<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything passed, that is expected because we don&#8217;t have any tests :) Now lets add to <code>package.json</code> one more thing development dependency for <code>should.js</code> it will enable us to use mocha in a bit <code>rspec</code> bdd style. Like this:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;should&quot;</span><span class="o">:</span> <span class="s2">&quot;&gt;= 0.0.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>And again <code>npm install -l</code> to get everything installed locally.</p>

<h2>First test</h2>

<p>Initial mocha test for our module</p>

<figure class='code'><figcaption><span>lib/my_first_module.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MyFirstFoo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">MyFirstFoo</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyFirstFoo&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should be able to add&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">MyFirstFoo</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we define empty body of function next we have <code>module.exports =</code> this is to mark which functions will be visible outside this module when other clients will <code>require</code> this module.  If you need more info about writing specs in mocha please read my earlier post <a href="http://no-fucking-idea.com/blog/2012/04/05/testing-handlebars-with-mocha/">http://no-fucking-idea.com/blog/2012/04/05/testing-handlebars-with-mocha/</a>. Now lets run <code>npm test</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> λ npm <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'>&gt; my_first_module@0.0.0 <span class="nb">test</span> /private/tmp/my_first_module
</span><span class='line'>&gt; mocha -R landing lib/my_first_module.js
</span><span class='line'>  -----------------------------------------------------------------------------------------------------------------------------------------------
</span><span class='line'>  ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅✈
</span><span class='line'>  -----------------------------------------------------------------------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>  ✖ 1 of 1 tests failed:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> MyFirstFoo should be able to add:
</span><span class='line'>     TypeError: Cannot <span class="nb">read </span>property <span class="s1">&#39;should&#39;</span> of undefined
</span><span class='line'>      at Context.&lt;anonymous&gt; <span class="o">(</span>/private/tmp/lol/my_first_module/lib/my_first_module.js:13:21<span class="o">)</span>
</span><span class='line'>      at Test.run <span class="o">(</span>/opt/local/lib/node_modules/mocha/lib/runnable.js:156:32<span class="o">)</span>
</span><span class='line'>      at Runner.runTest <span class="o">(</span>/opt/local/lib/node_modules/mocha/lib/runner.js:272:10<span class="o">)</span>
</span><span class='line'>      at /opt/local/lib/node_modules/mocha/lib/runner.js:316:12
</span><span class='line'>      at next <span class="o">(</span>/opt/local/lib/node_modules/mocha/lib/runner.js:199:14<span class="o">)</span>
</span><span class='line'>      at /opt/local/lib/node_modules/mocha/lib/runner.js:208:7
</span><span class='line'>      at next <span class="o">(</span>/opt/local/lib/node_modules/mocha/lib/runner.js:157:23<span class="o">)</span>
</span><span class='line'>      at Array.0 <span class="o">(</span>/opt/local/lib/node_modules/mocha/lib/runner.js:176:5<span class="o">)</span>
</span><span class='line'>      at EventEmitter._tickCallback <span class="o">(</span>node.js:192:40<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Fails as expected so lets ad implementation to our function.</p>

<figure class='code'><figcaption><span>lib/my_first_module.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">MyFirstFoo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">MyFirstFoo</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;should&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;MyFirstFoo&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should be able to add&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">MyFirstFoo</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run <code>npm test</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ npm <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'>&gt; my_first_module@0.0.0 <span class="nb">test</span> /private/tmp/lol/my_first_module
</span><span class='line'>&gt; mocha -R landing lib/my_first_module.js
</span><span class='line'>  -----------------------------------------------------------------------------------------------------------------------------------------------
</span><span class='line'>  ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅✈
</span><span class='line'>  -----------------------------------------------------------------------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>  ✔ 1 tests <span class="nb">complete</span> <span class="o">(</span>2ms<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have landed safely ;) Now we are ready for development!</p>

<h1>Summary</h1>

<p>Creating good quality of code requires testing in node.js thats why i decided to join this two things and explain how to marry them both fast. More info can be found here <a href="http://howtonode.org/how-to-module">http://howtonode.org/how-to-module</a>.</p>

<p>I hope it helped a bit.
Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up redis cluster]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/16/setting-up-redis-cluster/"/>
    <updated>2012-04-16T19:54:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/16/setting-up-redis-cluster</id>
    <content type="html"><![CDATA[<p>redis cluster in currently unstable, i used todays master HEAD (93a74949d7bb5d0c4115d1bf45f856c368badf31) commit to build my redis server and client. Setting redis cluster requires only few settings to go! :)</p>

<p>Here is link to overview how redis cluster works <a href="http://redis.io/presentation/Redis_Cluster.pdf">http://redis.io/presentation/Redis_Cluster.pdf</a></p>

<h1>redis.conf</h1>

<p>Regular nodes can&#8217;t be part of cluster :( so you have to prepare separate redis configs for your cluster servers.
Most important thing is to setup <code>cluster-enabled</code> and <code>cluster-config-file</code> I decided to name my config files <code>redis-cluster-&lt;port&gt;.conf</code>. I used ports 4444, 4445 4446
Here is my sample config</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>daemonize yes
</span><span class='line'>timeout 0
</span><span class='line'>loglevel notice
</span><span class='line'>logfile stdout
</span><span class='line'>databases 16
</span><span class='line'>save 900 1
</span><span class='line'>save 300 10
</span><span class='line'>save 60 10000
</span><span class='line'>stop-writes-on-bgsave-error yes
</span><span class='line'>rdbcompression yes
</span><span class='line'>rdbchecksum yes
</span><span class='line'>dbfilename dump.rdb
</span><span class='line'>dir ./cluster_4444
</span><span class='line'>slave-serve-stale-data yes
</span><span class='line'>slave-read-only yes
</span><span class='line'>appendonly no
</span><span class='line'>appendfsync everysec
</span><span class='line'>no-appendfsync-on-rewrite no
</span><span class='line'>auto-aof-rewrite-percentage 100
</span><span class='line'>auto-aof-rewrite-min-size 64mb
</span><span class='line'>lua-time-limit 5000
</span><span class='line'>
</span><span class='line'><span class="c"># Cluster</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>pidfile /var/run/redis-4444.pid
</span><span class='line'>port 4444
</span><span class='line'>cluster-enabled yes
</span><span class='line'>cluster-config-file redis-cluster-4444.conf
</span><span class='line'>
</span><span class='line'>slowlog-log-slower-than 10000
</span><span class='line'>slowlog-max-len 1024
</span><span class='line'><span class="nb">hash</span>-max-ziplist-entries 512
</span><span class='line'><span class="nb">hash</span>-max-ziplist-value 64
</span><span class='line'>list-max-ziplist-entries 512
</span><span class='line'>list-max-ziplist-value 64
</span><span class='line'><span class="nb">set</span>-max-intset-entries 512
</span><span class='line'>zset-max-ziplist-entries 128
</span><span class='line'>zset-max-ziplist-value 64
</span><span class='line'>activerehashing yes
</span><span class='line'>client-output-buffer-limit normal 0 0 0
</span><span class='line'>client-output-buffer-limit slave 256mb 64mb 60
</span><span class='line'>client-output-buffer-limit pubsub 32mb 8mb 60
</span></code></pre></td></tr></table></div></figure>


<p>For each node i created directory <code>cluster_&lt;port&gt;</code> and that was the hardest part actually to do. With this all you have to do is to start ( for debug you can set daemonize to no) all nodes using <code>redis-server path/to/redis-cluster-&lt;port&gt;.conf</code> and then use magic ruby tool :)</p>

<h1>redis-tribe.rb</h1>

<p>In <code>src/</code> directory of source you can find ruby script for creating and managing cluster. But first you need to have ruby installed with <code>redis</code> gem. i just did <code>gem install redis</code> but if you don&#8217;t have ruby you have to google how to install it etc (hint: get 1.9.2).</p>

<p>now you can run the script. <code>./redis-tribe.rb</code> and see</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ ./redis-trib.rb
</span><span class='line'>Usage: redis-trib &lt;<span class="nb">command</span>&gt; &lt;arguments ...&gt;
</span><span class='line'>
</span><span class='line'>  create               host1:port host2:port ... hostN:port
</span><span class='line'>  check                host:port
</span><span class='line'>  reshard              host:port
</span></code></pre></td></tr></table></div></figure>


<p>To start cluster we will type &#8220;create&#8221; (useless comment)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ ./redis-trib.rb create 127.0.0.1:4444 127.0.0.1:4445 127.0.0.1:4446
</span><span class='line'>Creating cluster
</span><span class='line'>Connecting to node 127.0.0.1:4444: OK
</span><span class='line'>Connecting to node 127.0.0.1:4445: OK
</span><span class='line'>Connecting to node 127.0.0.1:4446: OK
</span><span class='line'>Performing <span class="nb">hash </span>slots allocation on 3 nodes...
</span><span class='line'><span class="o">[</span>FAIL<span class="o">]</span> 5a2f6df453f1cd52bcb22c2afc45580283bcce87 127.0.0.1:4444 slots:0-1364 <span class="o">(</span>1365 slots<span class="o">)</span>
</span><span class='line'><span class="o">[</span>FAIL<span class="o">]</span> 35d107017bc726ece9b57e1ea2f21678555cf6a8 127.0.0.1:4445 slots:1365-2729 <span class="o">(</span>1365 slots<span class="o">)</span>
</span><span class='line'><span class="o">[</span>FAIL<span class="o">]</span> 76d06b0d3cb1b3829cb60574260dff2d06964cea 127.0.0.1:4446 slots:2730-4095 <span class="o">(</span>1366 slots<span class="o">)</span>
</span><span class='line'>Can I <span class="nb">set </span>the above configuration? <span class="o">(</span><span class="nb">type</span> <span class="s1">&#39;yes&#39;</span> to accept<span class="o">)</span>: yes
</span><span class='line'>** Nodes configuration updated
</span><span class='line'>** Sending CLUSTER MEET messages to join the cluster
</span><span class='line'>Performing Cluster Check <span class="o">(</span>using node 127.0.0.1:4444<span class="o">)</span>
</span><span class='line'><span class="o">[</span>FAIL<span class="o">]</span> 5a2f6df453f1cd52bcb22c2afc45580283bcce87 127.0.0.1:4444 slots:0-1364 <span class="o">(</span>1365 slots<span class="o">)</span>
</span><span class='line'><span class="o">[</span>FAIL<span class="o">]</span> 35d107017bc726ece9b57e1ea2f21678555cf6a8 127.0.0.1:4445 slots:1365-2729 <span class="o">(</span>1365 slots<span class="o">)</span>
</span><span class='line'><span class="o">[</span>FAIL<span class="o">]</span> 76d06b0d3cb1b3829cb60574260dff2d06964cea 127.0.0.1:4446 slots:2730-4095 <span class="o">(</span>1366 slots<span class="o">)</span>
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> All 4096 slots covered.
</span></code></pre></td></tr></table></div></figure>


<p>Nice we have our cluster running :) now we can connect to any node and try it out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ ./redis-cli -h 127.0.0.1 -p 4445
</span><span class='line'>redis 127.0.0.1:4445&gt; <span class="nb">set</span> <span class="s2">&quot;jakub&quot;</span> <span class="s2">&quot;oboza&quot;</span>
</span><span class='line'><span class="o">(</span>error<span class="o">)</span> MOVED 198 127.0.0.1:4444
</span></code></pre></td></tr></table></div></figure>


<p>Sweet :D</p>

<p>Using this tool you can also reshard :D I did on my 15 keys worked :-F.</p>

<h1>Smart clients</h1>

<p>In redis doc we can read that you will require &#8220;smart client&#8221; to make it low latency. Yes, you can read from output that it was moved so you will have to cache where the key is now and reset temp cache when it will be moved (resharding)</p>

<h1>Fire!</h1>

<p>You can now test how it will behaves under fire by killing and restarting your nodes eg.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:44:09.945 <span class="c"># Server started, Redis version 2.9.7</span>
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:44:09.946 * The server is now ready to accept connections on port 4444
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:45:14.414 * Connecting with Node c20290a7b70a2a840a168c3309f00e3de1b1844d at 127.0.0.1:14446
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:45:15.424 * Connecting with Node ab93647957ed4bb93fc43b1dc76202a6cdb94f49 at 127.0.0.1:14445
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:59:10.047 * 1 changes in 900 seconds. Saving...
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:59:10.047 * Background saving started by pid 19321
</span><span class='line'><span class="o">[</span>19321<span class="o">]</span> 16 Apr 19:59:10.080 * DB saved on disk
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 19:59:10.248 * Background saving terminated with success
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:29.837 * I/O error reading from node link: connection closed
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:29.837 * I/O error reading from node link: connection closed
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:30.056 * Connecting with Node 76d06b0d3cb1b3829cb60574260dff2d06964cea at 127.0.0.1:14446
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:30.056 * I/O error writing to node link: Broken pipe
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:30.525 * I/O error reading from node link: connection closed
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:30.526 * I/O error reading from node link: connection closed
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:31.063 * Connecting with Node 35d107017bc726ece9b57e1ea2f21678555cf6a8 at 127.0.0.1:14445
</span><span class='line'><span class="o">[</span>19008<span class="o">]</span> 16 Apr 20:08:31.064 * Connecting with Node 76d06b0d3cb1b3829cb60574260dff2d06964cea at 127.0.0.1:14446
</span></code></pre></td></tr></table></div></figure>


<h1>Summary</h1>

<p>Even if i think this is a great tool, and is unstable i saw after few minutes play that some things just don&#8217;t work as intended and some keys are not pushed. But it is pulled from unstable branch so i&#8217;m crossing my fingers for this project because it looks sweet! Go Go Antirez.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building ORM/ODM using virtus for MongoDB part 1]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1/"/>
    <updated>2012-04-12T21:07:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1</id>
    <content type="html"><![CDATA[<p>This blog post is start of series on building ORM/ODM libraries for Mongodb in different languages. I am a big fan of mongoid <a href="http://mongoid.org">http://mongoid.org</a> great Ruby ODM for mongodb. But i am even bigger fan of Mongodb <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>. Some time ago i saw post by my friend from <a href="http://www.lunarlogicpolska.com/">http://www.lunarlogicpolska.com/</a> about <code>virtus</code> <a href="http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html">http://solnic.eu/2011/06/06/virtus&#8212;attributes-for-your-plain-ruby-objects.html</a> (it&#8217;s really worth reading) and i thought &#8220;it&#8217;s nice&#8221;. Today i have spent two hours to cook this starter project because i want to learn more about <code>virtus</code> and building ODM&#8217;s ORM&#8217;s is not so common topic across web.</p>

<h1>Aim</h1>

<p>Building fully featured ODM in two hours from scratch is more then you can expect from me. Goal if first part is to make something that will map ruby PORO&#8217;s to mongodb collections, be able to save them, find one or many in database and destroy. This looks like a lot but we will do it slowly and the implementation will be very basic. Our ODM will be named &#8220;Muppet&#8221;. Name describes the project :).</p>

<h3>Virtus</h3>

<p>Virtus handles properties for Plain Old Ruby Objects and this is all we need to have. This eliminates a lot of boilerplate code we would have to write to make anything work. PORO Powah!</p>

<h3>Mongo</h3>

<p><code>mongo</code> is a Mongodb native ruby driver. It has really good api and is easy to use. For most things in this post i just <code>proxied</code> calls to it :).</p>

<h3>Database!</h3>

<p>Be sure to have mongodb working ;).</p>

<h1>First step: Building a gem</h1>

<p>All about building gem you can find in my previous blog post here <a href="http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/">http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/</a>
Be sure to add rspec :) i used it to describe tests for this project.</p>

<h1>Second step: Describing api</h1>

<p>I like do develop things in TDD/BDD style so first thing for me description of api i wanted to implement during this tutorial.
All this specs are stripped to minimum to enhance readability.</p>

<figure class='code'><figcaption><span>spec/muppet_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Virtus</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Muppet</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:name</span><span class="p">,</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:age</span><span class="p">,</span> <span class="nb">Integer</span>
</span><span class='line'>  <span class="n">attribute</span> <span class="ss">:birthday</span><span class="p">,</span> <span class="no">DateTime</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Muppet</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#configuration&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should be configurable&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">configure</span> <span class="p">{{</span>
</span><span class='line'>          <span class="n">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">port</span><span class="p">:</span> <span class="mi">27017</span><span class="p">,</span>
</span><span class='line'>          <span class="n">database</span><span class="p">:</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>        <span class="p">}}</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">should</span> <span class="n">be_a</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="ss">:host</span><span class="o">].</span><span class="n">should</span> <span class="n">eql</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">raise_error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should by default point to localhost:27017&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="ss">:host</span><span class="o">].</span><span class="n">should</span> <span class="n">eql</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="ss">:port</span><span class="o">].</span><span class="n">should</span> <span class="n">eql</span><span class="p">(</span><span class="mi">27017</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#connection&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should connect to mongodb&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">connect!</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">raise_error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#inserting&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should insert values to database&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pending</span>
</span><span class='line'>      <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Jakub&quot;</span><span class="p">,</span> <span class="n">age</span><span class="p">:</span> <span class="mi">27</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#quering&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should query all documents from collection&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pending</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">find_one</span><span class="o">.</span><span class="n">should</span> <span class="n">be_a</span><span class="p">(</span><span class="no">User</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should query first document from collection&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pending</span>
</span><span class='line'>      <span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span>
</span><span class='line'>      <span class="n">users</span><span class="o">.</span><span class="n">should</span> <span class="n">be_a</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'>      <span class="n">users</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">should</span> <span class="n">be_a</span><span class="p">(</span><span class="no">User</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#destroy&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should destroy document&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pending</span>
</span><span class='line'>      <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>        <span class="no">User</span><span class="o">.</span><span class="n">find_one</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">should</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I defined them in order how i wanted to implement this. First configuration and connection to db. Next inserting and querying and destroying as last thing. Also at top i have simple User object with <code>virtus</code> and <code>muppet</code> included.</p>

<h1>Third step: layouting Muppet!</h1>

<p>At this moment we should have ready specs, that fail hard throwing errors on unknown tokens. Its good.
What i did is simple <code>lib/muppet.rb</code> defines the module we will include into out PORO&#8217;s.</p>

<figure class='code'><figcaption><span>muppet.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;mongo&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;muppet/version&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;muppet/setup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Muppet</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Muppet</span><span class="o">::</span><span class="no">Setup</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>in <code>lib/muppet/</code> we will have components of our project. I we already know we will start with setup as defined in <code>muppet.rb</code> so lets create file <code>lib/muppet/setup</code> and configuration and connection to mongodb.</p>

<figure class='code'><figcaption><span>lib/muppet/setup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Muppet</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Setup</span>
</span><span class='line'>    <span class="vc">@@configuration</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">host</span><span class="p">:</span> <span class="s2">&quot;localhost&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">port</span><span class="p">:</span> <span class="mi">27017</span><span class="p">,</span>
</span><span class='line'>      <span class="n">database</span><span class="p">:</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">&amp;</span><span class="n">user_config</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@configuration</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">user_config</span><span class="o">.</span><span class="n">call</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">config</span>
</span><span class='line'>      <span class="vc">@@configuration</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect!</span>
</span><span class='line'>      <span class="vc">@@connection</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vc">@@configuration</span><span class="o">[</span><span class="ss">:host</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="vc">@@configuration</span><span class="o">[</span><span class="ss">:port</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@database</span> <span class="o">=</span> <span class="vc">@@connection</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="vc">@@configuration</span><span class="o">[</span><span class="ss">:database</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">database</span>
</span><span class='line'>      <span class="vc">@@database</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connection</span>
</span><span class='line'>      <span class="vc">@@connection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here i defined default configuration and few method to access vital part of our config like <code>database</code> , <code>connection</code>. Most important part is <code>connect!</code> this method uses mongo gem to establish connection to mongodb store it into connection variable and set the database we will be working on. I wanted to make few things explicit so i used some name redundancy. (later on i learned that i did not even need <code>config</code> method)</p>

<p>With this working we can run out rspecs and if mongodb is up we should see all green and few yellows! Good it works!</p>

<h1>Forth step: support for quering and inserting</h1>

<p>Now lets remove pending marks from specs that  are in &#8220;describes&#8221; quering and inserting. This will be the heart of our ODM. We will define how he should save and load object from database. Before this we will have to update out <code>lib/muppet.rb</code> to include things we will use.</p>

<figure class='code'><figcaption><span>lib/muppet.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;mongo&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;muppet/version&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;muppet/setup&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;muppet/document&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Muppet</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Muppet</span><span class="o">::</span><span class="no">Setup</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Muppet</span><span class="o">::</span><span class="no">Document</span><span class="o">::</span><span class="no">InstanceMethods</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span> <span class="no">Muppet</span><span class="o">::</span><span class="no">Document</span><span class="o">::</span><span class="no">ClassMethods</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok many new things. I created <code>lib/muppet/document.rb</code> module with the stuff we will put into class and instance definitions in the moment of inclusion. As we can see in definition of <code>User</code> in our test cases we will <code>include Muppet</code> so all the instance methods like (save, destroy) will have to be defined in separated module then class methods like (find_one, find). In <code>document.rb</code> we  can see how it is implemented.</p>

<figure class='code'><figcaption><span>lib/muppet/document.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Muppet</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Document</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">collection_name</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">collection</span>
</span><span class='line'>        <span class="no">Muppet</span><span class="o">.</span><span class="n">database</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="n">collection_name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find_one</span><span class="p">(</span><span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">find_one</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">result</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>        <span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span>
</span><span class='line'>        <span class="n">results</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">result</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">count</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could not think of a way to implement it in a more simple way. We have to &#8220;sections&#8221; first is class methods where we define</p>

<ul>
<li>collection_name this method says to us what is the collection name (we can override it in model)</li>
<li>collection uses database to return this collection object for us to use.</li>
<li>find_one, find, count are methods that we proxy in a dirty explicit way (but without using method missing) things to mongo native driver.</li>
</ul>


<p>Only thing we do here is to wrap things that we get back into <code>self.new</code> object. So we can mimic AR/Mongoid api and when doing User.find we will get back array of all users. not array of hashes :).</p>

<p>Instance methods are only two <code>save</code> and <code>destroy</code> save is raw and simple, takes all attributes from using virtues and saves them using mongo native driver. destroy acts in the same way.</p>

<p>Now we can run the specs and see all is green. We have a basic ODM where we can add documents, map and query them to PORO&#8217;s and remove.</p>

<h1>Summary</h1>

<p>I really enjoyed writing this code and blog post :).
You can find code for this blog post here <a href="https://github.com/JakubOboza/muppet">https://github.com/JakubOboza/muppet</a></p>

<p>This code is buggy and even specs needs to be enhanced but this is a good start for building new features on top of it. In  future parts i want to implement, updating, proxy objects, relations, embedded objects, dirty tracking(probably using <a href="https://github.com/solnic/virtus-dirty_tracking">https://github.com/solnic/virtus-dirty_tracking</a>) and few other mechanism that will enable us to make a fully functional ODM from &#8220;Muppet&#8221;</p>

<p>-Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Gem with Bundler]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/11/building-gem-with-bundler/"/>
    <updated>2012-04-11T20:09:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/11/building-gem-with-bundler</id>
    <content type="html"><![CDATA[<p>Building a new gem ( ruby library ) with bundler is easy task. I found a lot of tutorial on this topic in the web but none of them was covering more then just generating scaffold and packing up the gem. I will try to uncover a bit more. So at the end of this post you will be able to generate new gem, build it and it will have ready support for rspec.</p>

<p>First of all you need bundler. To install bundler just type <code>gem install bundler</code>. Probably most of you guys have it already :) but just in case.</p>

<h1>Generating new gem</h1>

<p>To generate gem scaffold all you have to do is call <code>bundle gem &lt;gem name&gt;</code> like here</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle gem doctor_toons
</span><span class='line'>      create  doctor_toons/Gemfile
</span><span class='line'>      create  doctor_toons/Rakefile
</span><span class='line'>      create  doctor_toons/LICENSE
</span><span class='line'>      create  doctor_toons/README.md
</span><span class='line'>      create  doctor_toons/.gitignore
</span><span class='line'>      create  doctor_toons/doctor_toons.gemspec
</span><span class='line'>      create  doctor_toons/lib/doctor_toons.rb
</span><span class='line'>      create  doctor_toons/lib/doctor_toons/version.rb
</span><span class='line'>Initializating git repo in /private/tmp/doctor_toons
</span></code></pre></td></tr></table></div></figure>


<p>This will create directory named doctor_toons with:</p>

<ul>
<li>Gemfile where we specify production and development gems</li>
<li>Rakefile with our rake tasks, you need to remember that rake is not part of Gemfile if you are using ruby &lt; 1.9.2</li>
<li>License file with license, GPL, BSD, MIT, LOL choose one and put it in by default MIT.</li>
<li>it initializes git repo inside this directory and adds .gitignore with default ignores</li>
</ul>


<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ cat .gitignore
</span><span class='line'>*.gem
</span><span class='line'>*.rbc
</span><span class='line'>.bundle
</span><span class='line'>.config
</span><span class='line'>.yardoc
</span><span class='line'>Gemfile.lock
</span><span class='line'>InstalledFiles
</span><span class='line'>_yardoc
</span><span class='line'>coverage
</span><span class='line'>doc/
</span><span class='line'>lib/bundler/man
</span><span class='line'>pkg
</span><span class='line'>rdoc
</span><span class='line'>spec/reports
</span><span class='line'><span class="nb">test</span>/tmp
</span><span class='line'><span class="nb">test</span>/version_tmp
</span><span class='line'>tmp
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>lib directory for your code !!!</li>
<li>&lt; name >.gemspec file with whole gemspec for our gem.</li>
</ul>


<p>First thing we need to do is set gems we will be using while building our lib. Initial <code>Gemfile</code> looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ cat Gemfile
</span><span class='line'><span class="nb">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Specify your gem&#39;s dependencies in doctor_toons.gemspec</span>
</span><span class='line'>gemspec
</span></code></pre></td></tr></table></div></figure>


<p>All production needed gems needs to be added before <code>gemspec</code>. So if we will want to add rspec as <em>development</em> dependency we need to put it after <code>gemspec</code> term in Gemfile. Eg. if we want to use mongo 1.6.2 as production dependency and rspec 2.9.0 as our development dependency we should do it like this.</p>

<figure class='code'><figcaption><span>cat Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'>gem <span class="s1">&#39;mongo&#39;</span>, <span class="s1">&#39;~&gt; 1.6.2&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;bson&#39;</span>,  <span class="s1">&#39;~&gt; 1.6.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Specify your gem&#39;s dependencies in doctor_toons.gemspec</span>
</span><span class='line'>gemspec
</span><span class='line'>
</span><span class='line'>gem <span class="s1">&#39;rspec&#39;</span>, <span class="s1">&#39;~&gt; 2.9.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can simply bundle all dependencies for our gem by hitting. <code>bundle install</code> you should see something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ bundle install
</span><span class='line'>Fetching gem metadata from https://rubygems.org/....
</span><span class='line'>Using bson <span class="o">(</span>1.6.2<span class="o">)</span>
</span><span class='line'>Using diff-lcs <span class="o">(</span>1.1.3<span class="o">)</span>
</span><span class='line'>Using doctor_toons <span class="o">(</span>0.0.1<span class="o">)</span> from <span class="nb">source </span>at /private/tmp/doctor_toons
</span><span class='line'>Using mongo <span class="o">(</span>1.6.2<span class="o">)</span>
</span><span class='line'>Using rspec-core <span class="o">(</span>2.9.0<span class="o">)</span>
</span><span class='line'>Using rspec-expectations <span class="o">(</span>2.9.1<span class="o">)</span>
</span><span class='line'>Using rspec-mocks <span class="o">(</span>2.9.0<span class="o">)</span>
</span><span class='line'>Using rspec <span class="o">(</span>2.9.0<span class="o">)</span>
</span><span class='line'>Using bundler <span class="o">(</span>1.1.0<span class="o">)</span>
</span><span class='line'>Your bundle is <span class="nb">complete</span>! Use <span class="sb">`</span>bundle show <span class="o">[</span>gemname<span class="o">]</span><span class="sb">`</span> to see where a bundled gem is installed.
</span></code></pre></td></tr></table></div></figure>


<h1>Building gem!</h1>

<p>Ok now we are ready for next step, building gem! To do it we call <code>gem build &lt; name &gt;.gemspec</code> so lets do it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ gem build doctor_toons.gemspec
</span><span class='line'>ERROR:  While executing gem ... <span class="o">(</span>Gem::InvalidSpecificationException<span class="o">)</span>
</span><span class='line'>    <span class="s2">&quot;FIXME&quot;</span> or <span class="s2">&quot;TODO&quot;</span> is not a description
</span></code></pre></td></tr></table></div></figure>


<p>Error. This means that we need to supply few things before we will build this gem. First of all we need to <code>emacs &lt; name &gt;.gemspec</code> to edit the file with gemspec and set few things. By default this file should look like this</p>

<figure class='code'><figcaption><span>doctor_toons.gemspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding: utf-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib/doctor_toons/version&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">gem</span><span class="o">|</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;JakubOboza&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">email</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;jakub.oboza@gmail.com&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a gem description}</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a gem summary}</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">homepage</span>      <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="sb">`git ls-files -- bin/*`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">files</span>         <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">test_files</span>    <span class="o">=</span> <span class="sb">`git ls-files -- {test,spec,features}/*`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">name</span>          <span class="o">=</span> <span class="s2">&quot;doctor_toons&quot;</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">require_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lib&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gem</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="no">DoctorToons</span><span class="o">::</span><span class="no">VERSION</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
So lets edit description and summary and build again our gem. <code>gem build doctor_toons.gemspec</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ gem build doctor_toons.gemspec
</span><span class='line'>WARNING:  no homepage specified
</span><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: doctor_toons
</span><span class='line'>  Version: 0.0.1
</span><span class='line'>  File: doctor_toons-0.0.1.gem
</span></code></pre></td></tr></table></div></figure>


<p>Yeah now we can build our gem :)
Lets have a look at gemspec <code>gem spec doctor_toons-0.0.1.gem</code> before we will be adding rspec to it :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> λ gem spec doctor_toons-0.0.1.gem
</span><span class='line'>--- !ruby/object:Gem::Specification
</span><span class='line'>name: doctor_toons
</span><span class='line'>version: !ruby/object:Gem::Version
</span><span class='line'>  version: 0.0.1
</span><span class='line'>  segments:
</span><span class='line'>  <span class="nb">hash</span>:
</span><span class='line'>platform: ruby
</span><span class='line'>authors:
</span><span class='line'>- JakubOboza
</span><span class='line'>autorequire:
</span><span class='line'>bindir: bin
</span><span class='line'>cert_chain: <span class="o">[]</span>
</span><span class='line'>date: 2012-04-11 00:00:00.000000000Z
</span><span class='line'>dependencies: <span class="o">[]</span>
</span><span class='line'>description: He sleeps with a gun, but he loves his son
</span><span class='line'>email:
</span><span class='line'>- jakub.oboza@gmail.com
</span><span class='line'>executables: <span class="o">[]</span>
</span><span class='line'>extensions: <span class="o">[]</span>
</span><span class='line'>extra_rdoc_files: <span class="o">[]</span>
</span><span class='line'>files:
</span><span class='line'>- .gitignore
</span><span class='line'>- Gemfile
</span><span class='line'>- LICENSE
</span><span class='line'>- README.md
</span><span class='line'>- Rakefile
</span><span class='line'>- doctor_toons.gemspec
</span><span class='line'>- lib/doctor_toons.rb
</span><span class='line'>- lib/doctor_toons/version.rb
</span><span class='line'>homepage: <span class="s1">&#39;&#39;</span>
</span><span class='line'>licenses: <span class="o">[]</span>
</span><span class='line'>post_install_message:
</span><span class='line'>rdoc_options: <span class="o">[]</span>
</span><span class='line'>require_paths:
</span><span class='line'>- lib
</span><span class='line'>required_ruby_version: !ruby/object:Gem::Requirement
</span><span class='line'>  none: <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>requirements:
</span><span class='line'>  - - ! <span class="s1">&#39;&gt;=&#39;</span>
</span><span class='line'>    - !ruby/object:Gem::Version
</span><span class='line'>      version: <span class="s1">&#39;0&#39;</span>
</span><span class='line'>      segments:
</span><span class='line'>      <span class="nb">hash</span>:
</span><span class='line'>required_rubygems_version: !ruby/object:Gem::Requirement
</span><span class='line'>  none: <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>requirements:
</span><span class='line'>  - - ! <span class="s1">&#39;&gt;=&#39;</span>
</span><span class='line'>    - !ruby/object:Gem::Version
</span><span class='line'>      version: <span class="s1">&#39;0&#39;</span>
</span><span class='line'>      segments:
</span><span class='line'>      <span class="nb">hash</span>:
</span><span class='line'>requirements: <span class="o">[]</span>
</span><span class='line'>rubyforge_project:
</span><span class='line'>rubygems_version: 1.8.15
</span><span class='line'>signing_key:
</span><span class='line'>specification_version: 3
</span><span class='line'>summary: Psycho dad
</span><span class='line'>test_files: <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything is fine.</p>

<h1>Adding testing support</h1>

<p>Before we will be wiriting any library code its nice to add support for testing framework. I like name of rspec and rspec as a lib. It lets you define in form of tests specification for your library.</p>

<h2>Rspec</h2>

<p>Adding rspec to our project is easy. All we need to do it create directory called <code>spec</code> and file inside of it called <code>spec_helper.rb</code> like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ mkdir spec
</span><span class='line'>λ touch spec/spec_helper.rb
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to edit <code>spec_helper.rb</code> and add few things.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>require <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'>require <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class='line'><span class="c"># our gem</span>
</span><span class='line'>require <span class="s1">&#39;doctor_toons&#39;</span>
</span><span class='line'>
</span><span class='line'>RSpec.configure <span class="k">do</span> |config|
</span><span class='line'>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>This is bare minimum <code>spec_helper.rb</code> file we can have. All we do is require on rubygems, bundler setup and our gem <code>doctor_toons</code> :). To make it easy to use we should expand our rake with a spec task! like this</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env rake</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler/gem_tasks&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;spec&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="ss">:spec</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will add <code>rspec</code> task called <code>rake spec</code> that will run all our specs :)
Now last thing we need to add first initial spec to our <code>spec</code> folder so we will be able to test it.</p>

<figure class='code'><figcaption><span>spec/doctor_toons_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">DoctorToons</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should rock&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">DoctorToons</span><span class="o">.</span><span class="n">rock</span><span class="p">()</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">should_not</span> <span class="n">raise_error</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember spec file names has to end with <code>_spec.rb</code></p>

<p>Now if you will run <code>rake spec</code> you should see something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Users/kuba/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -S rspec ./spec/doctor_toons_spec.rb
</span><span class='line'>F
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> DoctorToons should rock
</span><span class='line'>     Failure/Error: lambda <span class="k">do</span>
</span><span class='line'><span class="k">       </span>expected no Exception, got <span class="c">#&lt;NoMethodError: undefined method `rock&#39; for DoctorToons:Module&gt;</span>
</span><span class='line'>     <span class="c"># ./spec/doctor_toons_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.00218 seconds
</span><span class='line'>1 example, 1 failure
</span><span class='line'>
</span><span class='line'>Failed examples:
</span><span class='line'>
</span><span class='line'>rspec ./spec/doctor_toons_spec.rb:5 <span class="c"># DoctorToons should rock</span>
</span><span class='line'>rake aborted!
</span><span class='line'>/Users/kuba/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -S rspec ./spec/doctor_toons_spec.rb failed
</span><span class='line'>
</span><span class='line'>Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; spec
</span><span class='line'><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wooow works :) now you can implement your library to rock the world!</p>

<h2>Few useful things</h2>

<p>If you want to have colorful output like me :). You can add <code>.rspec</code> file in top dir of project with content like this</p>

<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--color
</span><span class='line'>--format documentation
</span></code></pre></td></tr></table></div></figure>


<p>First line adds color output and second line is format out spec output, it is nice because its the most verbose output. You can easy see where spec failed. When you are on early stage of the project and you have few describes like 50-100 it often helps to develop faster.</p>

<h1>Summary</h1>

<p>This is just intro post about my upcoming series on building tools that you need :).
Fingers crossed :)</p>

<p>-Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Handlebars with Mocha]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/05/testing-handlebars-with-mocha/"/>
    <updated>2012-04-05T21:01:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/05/testing-handlebars-with-mocha</id>
    <content type="html"><![CDATA[<p>Mocha and Handlebars are two great things i use. Mocha is a testing library which can be used for backend (node.js) and fronend testing. On frontend its only dependency is jQuery. Handlebars is templating language that can be used for frontend javascript partials or even for backend (node.js) layouts. What ever you want! :).</p>

<h1>Mocha</h1>

<p>When i started working with <code>express.js</code> sinatra like framework i took a peek at other projects that people from Vision Media do.
One of them was mocha and at that time i needed something to test my backend code. It is good to use such a tool while learning new thing. This was you can document your failures :). As i found it is  also great tool to test front end code.</p>

<h2>Chai.js / Should.js</h2>

<p>Because Mocha is not shipped with everything i like i decided to use <code>should.js</code> <a href="https://github.com/visionmedia/should.js">https://github.com/visionmedia/should.js</a> on backend (node.js) and <code>chai.js</code> on frontend to make my tests suits more <code>rspec</code> like. This way we will be able to write our specs like this.</p>

<figure class='code'><figcaption><span>app.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Application&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should exists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'>       <span class="nx">app</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">.</span><span class="k">instanceof</span><span class="p">(</span><span class="nx">Application</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I really like this <code>app.should.be.an.instanceof(Application);</code> syntax. But if you don&#8217;t like it you can use more jasmine like syntax all info can be found here <a href="http://visionmedia.github.com/mocha/">http://visionmedia.github.com/mocha/</a>.</p>

<h1>Handlebars</h1>

<p>Second very useful thing that i never skip in my project is Handlebars, easy to use and clean language to build templates in javascript. Simply it is <code>mustache</code> on steroids. But lets dive straight into some example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;list-entry&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="p"></span> <span class="kr">class</span><span class="o">=</span><span class="p"></span> <span class="p">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt; -&gt; </span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/strong&gt;:&amp;nbsp;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/span&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'> <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sample show how to in easy way embed handlebars into your html code. Important thing is that only code in <code>is getting interpolated. so in this example ` class= ` mans that if in rendering context we have class variable render `class=value_of_class_variable_in_context` as part of li element.</code> will render contents of this var from context. If there is no variable with this name or it is undefined it will not be rendered. thats the important bit that can make some debugging harder. Eg. <code>underscore.js</code> templates explode if you don&#8217;t have any param that you use inside of them.</p>

<h1>Both tools in action</h1>

<p>Ok so lets try it out and write some code in bdd style using handlebars. I have prepared initial setup for this, it contains lib directory with our javascripts, spec directory with out specs and support directory with our mocha.js, chai.js etc. Our test runner is single index.html file we can open in browser. All the code can be downloaded here <a href="https://github.com/JakubOboza/handlebars-and-mocha">https://github.com/JakubOboza/handlebars-and-mocha</a></p>

<h2>Step one</h2>

<p>Lets write a spec that makes checks if out app loads</p>

<figure class='code'><figcaption><span>app.spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Application&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should exists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>       <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'>       <span class="nx">app</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">an</span><span class="p">.</span><span class="k">instanceof</span><span class="p">(</span><span class="nx">Application</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://img814.imageshack.us/img814/1738/screenshot20120405at215.png" alt="Failing spec" />
Obviously we have here a failing spec.
Lets write some implementation to satisfy out spec.</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Application</span><span class="p">(</span><span class="nx">template_id</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://img833.imageshack.us/img833/1738/screenshot20120405at215.png" alt="Success spec" />
Bang everything works fine :). Lets make it do something useful, render some templates!
First lets write a spec for it -></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should render handlebars template&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">(</span><span class="s2">&quot;#test-template&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;kuba&quot;</span><span class="p">}).</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s2">&quot;&lt;p&gt;kuba&lt;/p&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://img862.imageshack.us/img862/9451/screenshot20120405at220.png" alt="Failing spec" />
Now lets implement this, our template will look like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;test-template&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p"></span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'> <span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is very basic, hard to make mistake ;). And javascript code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Application</span><span class="p">(</span><span class="nx">template_id</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">template_id</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">template</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">source</span><span class="p">.</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Application</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://img684.imageshack.us/img684/2551/screenshot20120405at221.png" alt="Success" />
Works! Like a charm!
I really enjoy writing tests for javascript this way. It is much more like rspec. At least for me it is much more useful then jasmine</p>

<h1>Why not jasmine</h1>

<p>I prefer syntax of Mocha. On this few examples i think i show how to start using it and how fun it is. For people with rspec background this should be very easy tool to pick up. More about Mocha can be found on official project page <a href="http://visionmedia.github.com/mocha/">http://visionmedia.github.com/mocha/</a>.</p>

<h2>Example code for this post</h2>

<p>Can be found here <a href="https://github.com/JakubOboza/handlebars-and-mocha">https://github.com/JakubOboza/handlebars-and-mocha</a> just open <code>index.html</code> :)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Map Reduce with Mongodb]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/01/using-map-reduce-with-mongodb/"/>
    <updated>2012-04-01T23:05:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/01/using-map-reduce-with-mongodb</id>
    <content type="html"><![CDATA[<p>Mongodb has support for running Map Reduce queries besides having regular sql like query interface. In documentation we can read that it is not the best idea to use it as a regular interface but it is very good for generating things in backgrounds like preparing reports or caching some data. I will try to show simple example how to create a useful map reduce query and execute it.</p>

<h2>Javascript</h2>

<p>Map reduce queries in Mongodb are written in javascript. All you have to do is to prepare two regular javascript functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="cm">/* emit values for each document */</span>
</span><span class='line'>  <span class="nx">emit</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In map function you have to emit key -> values from document, eg. for each document emit urls and counts of them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">){</span>
</span><span class='line'>    <span class="cm">/* reduce emited values into result */</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">result1</span><span class="o">:</span> <span class="nx">one</span><span class="p">,</span> <span class="nx">result2</span><span class="o">:</span> <span class="nx">two</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In reduce function you simple gather results and sum them up. It is easier to think about if you will imagine that reduce is something like fold or inject (depending on background) on emitted values from mapping function.</p>

<h2>Running scripts</h2>

<p>Mongo db has a really nice interface for running scripts. Lets examine a simple example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo localhost:27017/canis_production generate_report.js
</span></code></pre></td></tr></table></div></figure>


<p>This will run <code>generate_report.js</code> script on database <code>canis_production</code> on db node <code>localhost:27017</code>. You don&#8217;t need to do it, but its easiet to write it into file then type each time functions ;).</p>

<h1>Example Map reduce query</h1>

<p>Now this is a simple mapReduce that actually do something. It is emitting for each document url field and value 1. Reducer is
adding values for the same key so this way we will know how many occurrences of each url we have across whole collection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">values</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">values</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span> <span class="nx">res</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">count</span><span class="o">:</span> <span class="nx">res</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>this is have we defined out map reduce functions now all we need to do is just runt he query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span><span class="nx">map</span><span class="p">,</span> <span class="nx">reduce</span><span class="p">,</span> <span class="p">{</span> <span class="nx">out</span><span class="o">:</span> <span class="s2">&quot;mapped_urls&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run mapReduce we are using <code>mapReduce</code> function on collection (this example uses collection named &#8220;sites&#8221;), first argument is map function, second is reduce function and third is option but very useful, it is output collection where results will be stored in form of documents. This option lets us run the query at eg. night and see results in the morning :).</p>

<h2>Lets test it</h2>

<p>First some sample data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;www.google.com&quot;</span><span class="p">,</span> <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nx">trash_data</span><span class="o">:</span> <span class="mi">5</span> <span class="p">});</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;www.no-fucking-idea.com&quot;</span><span class="p">,</span> <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nx">trash_data</span><span class="o">:</span> <span class="mi">13</span> <span class="p">});</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;www.google.com&quot;</span><span class="p">,</span> <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nx">trash_data</span><span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;www.no-fucking-idea.com&quot;</span><span class="p">,</span> <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nx">trash_data</span><span class="o">:</span> <span class="mi">69</span> <span class="p">});</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;www.no-fucking-idea.com&quot;</span><span class="p">,</span> <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nx">trash_data</span><span class="o">:</span> <span class="mi">256</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>now functions and query</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="p">...</span>   <span class="nx">emit</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">reduce</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">values</span><span class="p">){</span>
</span><span class='line'><span class="p">...</span>   <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>   <span class="nx">values</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span> <span class="nx">res</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">});</span>
</span><span class='line'><span class="p">...</span>   <span class="k">return</span> <span class="p">{</span><span class="nx">count</span><span class="o">:</span> <span class="nx">res</span><span class="p">};</span>
</span><span class='line'><span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">sites</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span><span class="nx">map</span><span class="p">,</span> <span class="nx">reduce</span><span class="p">,</span> <span class="p">{</span> <span class="nx">out</span><span class="o">:</span> <span class="s2">&quot;mapped_urls&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;result&quot;</span> <span class="o">:</span> <span class="s2">&quot;mapped_urls&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;timeMillis&quot;</span> <span class="o">:</span> <span class="mi">75</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;counts&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;input&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;emit&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;reduce&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;output&quot;</span> <span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;ok&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And results</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">mapped_urls</span><span class="p">.</span><span class="nx">find</span><span class="p">({})</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;www.google.com&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;count&quot;</span> <span class="o">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;www.no-fucking-idea.com&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;count&quot;</span> <span class="o">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Worked perfect ;)</p>

<h1>Docs</h1>

<p>More information on map reduce interface you can find in documentation for mongodb <a href="http://www.mongodb.org/display/DOCS/MapReduce">http://www.mongodb.org/display/DOCS/MapReduce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching and serving stale content with nginx]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/03/31/caching-and-serving-stale-content-with-nginx/"/>
    <updated>2012-03-31T20:18:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/03/31/caching-and-serving-stale-content-with-nginx</id>
    <content type="html"><![CDATA[<h1>Caching</h1>

<p>With ruby and rails we often want to have caching of static content so we will try to reduce requests that has to come through rails stack when possible. Nginx in front is a great tool and we can use its abilities to add caching easy.</p>

<h2>App</h2>

<p>lets imagine we have a simple <code>sinatra</code> app. For purpose of this post we will have app with one method <code>/ohhai</code> that shows current time. This is a great way to test if out caching is working fine. Code of the app is really simple:</p>

<figure class='code'><figcaption><span>app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ExampleStaleApp</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/ohhai&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also to start it easy i have created a config.ru <code>rackup</code> file describing how to start app (in repo there is start.sh script ;)</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">ExampleStaleApp</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are using code from my repo <a href="https://github.com/JakubOboza/003-nginx-cache-stale-example">https://github.com/JakubOboza/003-nginx-cache-stale-example</a> to start it all you need to do is</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">λ</span> <span class="n">git</span> <span class="nb">clone</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="no">JakubOboza</span><span class="o">/</span><span class="mo">003</span><span class="o">-</span><span class="n">nginx</span><span class="o">-</span><span class="n">cache</span><span class="o">-</span><span class="n">stale</span><span class="o">-</span><span class="n">example</span>
</span><span class='line'><span class="err">λ</span> <span class="n">cd</span> <span class="mo">003</span><span class="o">-</span><span class="n">nginx</span><span class="o">-</span><span class="n">cache</span><span class="o">-</span><span class="n">stale</span><span class="o">-</span><span class="n">example</span>
</span><span class='line'><span class="err">λ</span> <span class="n">bundle</span> <span class="n">install</span>
</span><span class='line'><span class="err">λ</span> <span class="o">.</span><span class="n">/start</span><span class="o">.</span><span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>
I configured the app with my own path/uri and to look for upstream server on port 6677 so you need to change it if you are using different settings.</p>

<h1>Caching</h1>

<p> Our app is running now. Lets add caching, for this we will need to add nginx frontend config. In most cases i create a single nginx config for each server in sites-available directory and symlink it in sites-enabled (like apache do by default). I like this setting, it helps a lot to maintain more then one site which is common in development environment and also common on shared applications servers.</p>

<h2>Nginx config file</h2>

<p>I will show complete nginx config file for this example and explain each bit one by one.</p>

<figure class='code'><figcaption><span>nginx.example.caching.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">sinatra_rackup</span><span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">0.0.0.0</span><span class="p">:</span><span class="mi">6677</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">proxy_cache_path</span>  <span class="s">/tmp/cache</span> <span class="s">levels=1:2</span> <span class="s">keys_zone=my-test-cache:8m</span> <span class="s">max_size=5000m</span> <span class="s">inactive=300m</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span> <span class="s">example_stale.local</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/Users/kuba/Workspace/Ruby/example_stale/public</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">access_log</span>  <span class="s">/var/log/nginx/example.stale.access.log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache</span> <span class="s">my-test-cache</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache_valid</span>  <span class="mi">200</span> <span class="mi">302</span>  <span class="mi">1m</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache_valid</span>  <span class="mi">404</span>      <span class="mi">60m</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache_use_stale</span>   <span class="s">error</span> <span class="s">timeout</span> <span class="s">invalid_header</span> <span class="s">updating</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kn">if</span> <span class="s">(-f</span> <span class="nv">$request_filename/index.html</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">rewrite</span> <span class="s">(.*)</span> <span class="nv">$1/index.html</span> <span class="s">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kn">if</span> <span class="s">(-f</span> <span class="nv">$request_filename.html</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">rewrite</span> <span class="s">(.*)</span> <span class="nv">$1.html</span> <span class="s">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kn">if</span> <span class="s">(!-f</span> <span class="nv">$request_filename</span><span class="s">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">proxy_pass</span> <span class="s">http://sinatra_rackup</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">error_page</span> <span class="mi">500</span> <span class="mi">502</span> <span class="mi">503</span> <span class="mi">504</span> <span class="s">/50x.html</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">location</span> <span class="p">=</span> <span class="s">/50x.html</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">root</span> <span class="s">html</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It isn&#8217;t even so long ;)</p>

<h3>upstream</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">sinatra_rackup</span><span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="n">0.0.0.0</span><span class="p">:</span><span class="mi">6677</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in this part we create description of our upstream. In other words where our application server will be listening. It is easy to just use port but you can configure it to use unix.socket if you want to gain on performance.</p>

<h3>global cache config</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">proxy_cache_path</span>  <span class="s">/tmp/cache</span> <span class="s">levels=1:2</span> <span class="s">keys_zone=my-test-cache:8m</span> <span class="s">max_size=5000m</span> <span class="s">inactive=300m</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This directive sets the place where cache is stored and sets the zone name and how big it can be. We will refer tot his zone later on in proxy pass cache config.</p>

<h3>app cache config</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span> <span class="s">example_stale.local</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/Users/kuba/Workspace/Ruby/example_stale/public</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>      <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache</span> <span class="s">my-test-cache</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache_valid</span>  <span class="mi">200</span> <span class="mi">302</span>  <span class="mi">1m</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache_valid</span>  <span class="mi">404</span>      <span class="mi">60m</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_cache_use_stale</span>   <span class="s">error</span> <span class="s">timeout</span> <span class="s">invalid_header</span> <span class="s">updating</span><span class="p">;</span>
</span><span class='line'>      <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kn">proxy_pass</span> <span class="s">http://sinatra_rackup</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we configure server name for out application, port to listen on for it and root directory (this is fixed with my mac so you should change it). Whole magic happens in location description. here you have few important things for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">proxy_cache</span> <span class="s">my-test-cache</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sets which cache zone we will use. We use same cache zone we defined in <code>proxy_cache_path</code> with keys_zone.
Next we are setting for how long it should be cached. I used 1 minute for 200 and 302 status. this lets us see on our example app how this works each minute we see new time :). This is awesome! Next you can set different caching time expiry for other status. Here we are refreshing 404 status cache each hour (it could be days :) ).</p>

<p>Last but not the least is serving stale content if upstream is dead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">proxy_cache_use_stale</span> <span class="s">error</span> <span class="s">timeout</span> <span class="s">invalid_header</span> <span class="s">updating</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up for us config that will enable serving stale content if upstream is dead. This is nice if you want to provide some content in case when your backend is dead.</p>

<h1>Test</h1>

<p>You can test it now. Or wait&#8230; with my config you have to add entry to <code>/etc/hosts</code></p>

<figure class='code'><figcaption><span>hosts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1 example_stale.local
</span></code></pre></td></tr></table></div></figure>


<p>Now you can go to <code>example_stale.local/ohhai</code> (or just <code>curl example_stale.local/ohhai</code>) and see how our cache works. Even more now you can kill your app server and still see cache being served correctly.</p>

<h2>Results</h2>

<p>First request
<img src="http://img820.imageshack.us/img820/1484/screenshot20120331at211.png" alt="10 sec before" />
Next requests
<img src="http://img4.imageshack.us/img4/1484/screenshot20120331at211.png" alt="few ms after" /></p>

<p>-> <a href="http://www.youtube.com/watch?v=lgoXUzIwXk0">http://www.youtube.com/watch?v=lgoXUzIwXk0</a></p>

<h1>Cheers</h1>

<p>How you can use it? Depends on your app architecture, but for every bit of content that you create which is &#8220;static&#8221; it is great thing to have. I like this feature of nginx and i hope this post will help you ;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rebar -> swiss army knife]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/03/29/rebar-swiss-army-knife/"/>
    <updated>2012-03-29T18:55:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/03/29/rebar-swiss-army-knife</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<p>Rebar is a great command line tool for building your Erlang apps. It was developed by guys from <code>basho</code> <a href="http://basho.com/">http://basho.com/</a>. If you want to build Erlang app or module you can skip a lot of config / boilerplate code but using rebar.</p>

<h1>Wait what? How do i get it ?</h1>

<p>To obtain rebar all you have to do is clone source using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ git clone git://github.com/basho/rebar.git
</span></code></pre></td></tr></table></div></figure>


<p>after obtaining source go into directory and bootstrap it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ <span class="nb">cd </span>rebar
</span><span class='line'>λ ./bootstrap
</span></code></pre></td></tr></table></div></figure>


<p>This will build rebar script if everything is successful. Last thing i suggest is adding this directory to your path.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/path/to/rebar:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you will be able to use it like other command lines tools from &#8220;global namespace&#8221;.
Now you should have working rebar installation. Just to test that everything is ok you can run <code>rebar</code> like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ rebar
</span><span class='line'>No <span class="nb">command </span>to run specified!
</span><span class='line'>Usage: rebar <span class="o">[</span>-h<span class="o">]</span> <span class="o">[</span>-c<span class="o">]</span> <span class="o">[</span>-v &lt;verbose&gt;<span class="o">]</span> <span class="o">[</span>-V<span class="o">]</span> <span class="o">[</span>-f<span class="o">]</span> <span class="o">[</span>-D &lt;defines&gt;<span class="o">]</span> <span class="o">[</span>-j &lt;<span class="nb">jobs</span>&gt;<span class="o">]</span> <span class="o">[</span>-C &lt;config&gt;<span class="o">]</span> <span class="o">[</span>-p<span class="o">]</span> <span class="o">[</span><span class="nv">var</span><span class="o">=</span>value,...<span class="o">]</span> &lt;<span class="nb">command</span>,...&gt;
</span><span class='line'>
</span><span class='line'>  -h, --help      Show the program options
</span><span class='line'>  -c, --commands  Show available commands
</span><span class='line'>  -v, --verbose       Verbosity level <span class="o">(</span>-v, -vv, -vvv, --verbose 3<span class="o">)</span>. Default: 0
</span><span class='line'>  -V, --version       Show version information
</span><span class='line'>  -f, --force     Force
</span><span class='line'>  -D          Define compiler macro
</span><span class='line'>  -j, --jobs      Number of concurrent workers a <span class="nb">command </span>may use. Default: 3
</span><span class='line'>  -C, --config        Rebar config file to use
</span><span class='line'>  -p, --profile       Profile this run of rebar
</span><span class='line'>  <span class="nv">var</span><span class="o">=</span>value        rebar global variables <span class="o">(</span>e.g. <span class="nv">force</span><span class="o">=</span>1<span class="o">)</span>
</span><span class='line'>  <span class="nb">command        </span>Command to run <span class="o">(</span>e.g. compile<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>How do i use it @_@ ?</h1>

<p>Two most important things you can generate using <code>rebar</code> are applications and nodes.
To generate application you just need to create app directory and run <code>rebar create-app</code> command like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir furby
</span><span class='line'>λ <span class="nb">cd </span>furby
</span><span class='line'>λ rebar create-app <span class="nv">appid</span><span class="o">=</span><span class="nv">furby</span>
</span><span class='line'><span class="o">==</span>&gt; furby <span class="o">(</span>create-app<span class="o">)</span>
</span><span class='line'>Writing src/furby.app.src
</span><span class='line'>Writing src/furby_app.erl
</span><span class='line'>Writing src/furby_sup.erl
</span></code></pre></td></tr></table></div></figure>


<p>This has created application scaffold with ready to go supervisor. This is ready to go!
to compile it just run <code>rebar compile</code></p>

<h1>Me gusta</h1>

<p>This is all fine but that don&#8217;t eliminate a lot, sweet things are behind the corner :).</p>

<h3>eunit</h3>

<p>Rebar enables you to use easy eunit testing framework within your code. Like we did it here <a href="http://no-fucking-idea.com/blog/2012/03/23/using-eredis-in-erlang/">http://no-fucking-idea.com/blog/2012/03/23/using-eredis-in-erlang/</a>. To do it just run <code>rebar compile eunit</code> .</p>

<figure class='code'><figcaption><span>exmaple_output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ rebar compile eunit
</span><span class='line'>zsh: correct <span class="s1">&#39;eunit&#39;</span> to <span class="s1">&#39;.eunit&#39;</span> <span class="o">[</span>nyae<span class="o">]</span>? <span class="nv">n</span>
</span><span class='line'><span class="o">==</span>&gt; eredis <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; eredis <span class="o">(</span>eunit<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>ERROR <span class="nv">REPORT</span><span class="o">====</span> 29-Mar-2012::19:13:21 <span class="o">===</span>
</span><span class='line'>** Generic server &lt;0.259.0&gt; terminating
</span><span class='line'>** Last message in was <span class="o">{</span>tcp,#Port&lt;0.4549&gt;,
</span><span class='line'>                            &lt;&lt;<span class="s2">&quot;*3\r\n$7\r\nmessage\r\n$3\r\nfoo\r\n$2\r\n12\r\n&quot;</span>&gt;&gt;<span class="o">}</span>
</span><span class='line'>** When Server <span class="nv">state</span> <span class="o">==</span> <span class="o">{</span>state,<span class="s2">&quot;127.0.0.1&quot;</span>,6379,&lt;&lt;&gt;&gt;,100,#Port&lt;0.4549&gt;,
</span><span class='line'>                               <span class="o">{</span>pstate,undefined,undefined<span class="o">}</span>,
</span><span class='line'>                               <span class="o">[</span>&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;<span class="o">]</span>,
</span><span class='line'>                               <span class="o">{</span><span class="c">#Ref&lt;0.0.0.3990&gt;,&lt;0.176.0&gt;},</span>
</span><span class='line'>                               <span class="o">{[{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;11&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;10&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;9&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;8&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;7&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;6&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;5&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;4&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;3&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}]</span>,
</span><span class='line'>                                <span class="o">[{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;2&quot;</span>&gt;&gt;,&lt;0.259.0&gt;<span class="o">}]}</span>,
</span><span class='line'>                               10,exit,need_ack<span class="o">}</span>
</span><span class='line'>** Reason <span class="k">for </span><span class="nv">termination</span> <span class="o">==</span>
</span><span class='line'>** max_queue_size
</span><span class='line'>  All 53 tests passed.
</span><span class='line'>Cover analysis: /private/tmp/example_db/deps/eredis/.eunit/index.html
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>eunit<span class="o">)</span>
</span><span class='line'>  All 3 tests passed.
</span><span class='line'>Cover analysis: /private/tmp/example_db/.eunit/index.html
</span></code></pre></td></tr></table></div></figure>


<h3>coverage</h3>

<p>Also if you will fiddle with <code>rebar.config</code> and set some variables like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ cat rebar.config
</span><span class='line'>%%-*- mode: erlang -*-
</span><span class='line'>
</span><span class='line'><span class="o">{</span>erl_opts, <span class="o">[]}</span>.
</span><span class='line'><span class="o">{</span>cover_enabled, <span class="nb">true</span><span class="o">}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>you can get test coverage generated in <code>.eunit</code> folder. but this is just the beginning.  lets look at it.</p>

<figure class='code'><figcaption><span>example_db.COVER.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>example_db/.eunit λ cat example_db.COVER.html
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;&lt;title&gt;</span>.eunit/example_db.COVER.html<span class="nt">&lt;/title&gt;&lt;/head&gt;&lt;body</span> <span class="na">bgcolor=</span><span class="s">white</span> <span class="na">text=</span><span class="s">black</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;pre&gt;</span>
</span><span class='line'>File generated from /private/tmp/example_db/.eunit/example_db.erl by COVER 2012-03-29 at 19:13:21
</span><span class='line'>
</span><span class='line'>****************************************************************************
</span><span class='line'>
</span><span class='line'>        |  -module(example_db).
</span><span class='line'>        |  -behaviour(gen_server).
</span><span class='line'>        |
</span><span class='line'>...(and more)
</span></code></pre></td></tr></table></div></figure>


<h3>dependencies</h3>

<p>Last thing i want to mention is dependencies, i love this feature from <code>rebar</code>. You can add dependencies and rebar will do all the magic for you :). just open your <code>rebar.config</code>  and add thme like this:</p>

<figure class='code'><figcaption><span>rebar.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%%-*- mode: erlang -*-
</span><span class='line'>
</span><span class='line'><span class="o">{</span>erl_opts, <span class="o">[]}</span>.
</span><span class='line'><span class="o">{</span>cover_enabled, <span class="nb">true</span><span class="o">}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>deps,
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>eredis, <span class="s2">&quot;.*&quot;</span>, <span class="o">{</span>git, <span class="s2">&quot;https://github.com/wooga/eredis.git&quot;</span>, <span class="s2">&quot;HEAD&quot;</span><span class="o">}}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Whenever you will type <code>rebar get-deps</code> he will download all dependencies and install them into <code>deps</code> directory. This makes developing applications using things like mochiweb really easy!</p>

<h1>Summary</h1>

<p>I love this tool, it makes learning and development in <code>Erlang</code> much easier and more rewarding experience. I hope this help you a bit :). Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using eredis, redis with erlang]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/03/23/using-eredis-in-erlang/"/>
    <updated>2012-03-23T23:28:00+00:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/03/23/using-eredis-in-erlang</id>
    <content type="html"><![CDATA[<p>Recently i decided to move my blog from <code>tumblr.com</code> to <code>octopress engine</code> because it is just easier for me to maintain it and it looks nicer. The old blog is under <a href="http://no-fucking-idea.tumblr.com">http://no-fucking-idea.tumblr.com</a>. My first post on new blog is dedicated to using redis with erlang.</p>

<h1>Eredis</h1>

<p>Wooga created a really nice (performance driven) redis driver for erlang. You can get it here <a href="https://github.com/wooga/eredis">https://github.com/wooga/eredis</a>. It is really easy and nice.</p>

<h1>Initial sample</h1>

<p>On project page you can find simple examples how to use eredis. Examples there are all you need (but i need something for front page of my new blog so i will rewrite them and explain them :) ).</p>

<h2>First you need to start your eredis application</h2>

<figure class='code'><figcaption><span>initialization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Client</span><span class="p">}</span> <span class="o">=</span> <span class="nn">eredis</span><span class="p">:</span><span class="n">start_link</span><span class="p">().</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Client is the &#8220;connection / state&#8221; we will be using with rest of queries.</p>

<p>To query things with redis we will use <code>q</code> method from eredis module which takes &#8220;Connection / Client&#8221; state and list with params.
This api is very simple here are two most basic examples of get and set.
GET:</p>

<figure class='code'><figcaption><span>get</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;OK&quot;</span><span class="o">&gt;&gt;</span><span class="p">}</span> <span class="o">=</span> <span class="nn">eredis</span><span class="p">:</span><span class="n">q</span><span class="p">(</span><span class="nv">Client</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;SET&quot;</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;kuba&quot;</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>and SET:</p>

<figure class='code'><figcaption><span>set</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;kuba&quot;</span><span class="o">&gt;&gt;</span><span class="p">}</span> <span class="o">=</span> <span class="nn">eredis</span><span class="p">:</span><span class="n">q</span><span class="p">(</span><span class="nv">Client</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>From my point of view this is ideal candidate to be turned into gen_server behavior. We will pass &#8220;Connection / Client&#8221; as state and also we will build some &#8220;key&#8221; serialization methods around it to make it more durable and make our life easy if we will decide to refactor it later on.</p>

<h1>Free Api wrapper</h1>

<p>First thing i saw during development using Erlang is that you get free api if you follow simple patterns and encapsulate things into gen_server&#8217;s and applications.</p>

<figure class='code'><figcaption><span>example_db.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">example_db</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_server</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="s">&quot;jakub.oboza@gmail.com&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">Prefix</span><span class="p">,</span> <span class="s">&quot;example&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_call</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_cast</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">terminate</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_script</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">save_script</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% public api</span>
</span><span class='line'>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="no">?MODULE</span><span class="p">},</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">}</span> <span class="o">=</span> <span class="nn">eredis</span><span class="p">:</span><span class="n">start_link</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">stop</span><span class="p">(_</span><span class="nv">Pid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">stop</span><span class="p">().</span>
</span><span class='line'>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nn">gen_server</span><span class="p">:</span><span class="n">cast</span><span class="p">(</span><span class="no">?MODULE</span><span class="p">,</span> <span class="n">stop</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% public client api</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_script</span><span class="p">(</span><span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="no">?MODULE</span><span class="p">,</span> <span class="p">{</span><span class="n">get_script</span><span class="p">,</span> <span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">save_script</span><span class="p">(</span><span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">,</span> <span class="nv">Script</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="no">?MODULE</span><span class="p">,</span> <span class="p">{</span><span class="n">save_script</span><span class="p">,</span> <span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">,</span> <span class="nv">Script</span><span class="p">}).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% genserver handles</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">get_script</span><span class="p">,</span> <span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Response</span> <span class="o">=</span> <span class="nn">eredis</span><span class="p">:</span><span class="n">q</span><span class="p">(</span><span class="nv">Redis</span><span class="p">,</span> <span class="p">[</span> <span class="s">&quot;GET&quot;</span><span class="p">,</span> <span class="n">get_key</span><span class="p">(</span><span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">)</span> <span class="p">]),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Response</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_call</span><span class="p">({</span><span class="n">save_script</span><span class="p">,</span> <span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">,</span> <span class="nv">Script</span><span class="p">},</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Response</span> <span class="o">=</span> <span class="nn">eredis</span><span class="p">:</span><span class="n">q</span><span class="p">(</span><span class="nv">Redis</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;SET&quot;</span><span class="p">,</span> <span class="n">get_key</span><span class="p">(</span><span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">),</span> <span class="nv">Script</span><span class="p">]),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Response</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_call</span><span class="p">(_</span><span class="nv">Message</span><span class="p">,</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_cast</span><span class="p">(_</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">}.</span>
</span><span class='line'><span class="nf">handle_info</span><span class="p">(_</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">}.</span>
</span><span class='line'><span class="nf">terminate</span><span class="p">(_</span><span class="nv">Reason</span><span class="p">,</span> <span class="p">_</span><span class="nv">Redis</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ok</span><span class="p">.</span>
</span><span class='line'><span class="nf">code_change</span><span class="p">(_</span><span class="nv">OldVersion</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">,</span> <span class="p">_</span><span class="nv">Extra</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Redis</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% helper methods</span>
</span><span class='line'>
</span><span class='line'><span class="nf">get_key</span><span class="p">(</span><span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">generate_key</span><span class="p">([</span><span class="nv">Api</span><span class="p">,</span> <span class="nv">Method</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">generate_key</span><span class="p">(</span><span class="nv">KeysList</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">lists</span><span class="p">:</span><span class="n">foldl</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span> <span class="o">++</span> <span class="s">&quot;:&quot;</span> <span class="o">++</span> <span class="nv">Key</span> <span class="k">end</span><span class="p">,</span> <span class="no">?Prefix</span><span class="p">,</span> <span class="nv">KeysList</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% tests</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">ifdef</span><span class="p">(</span><span class="nv">TEST</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;eunit/include/eunit.hrl&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">endif</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">ifdef</span><span class="p">(</span><span class="nv">TEST</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">generate_key_test</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">Key</span> <span class="o">=</span> <span class="n">generate_key</span><span class="p">([</span><span class="s">&quot;one&quot;</span><span class="p">,</span> <span class="s">&quot;two&quot;</span><span class="p">,</span> <span class="s">&quot;three&quot;</span><span class="p">]),</span>
</span><span class='line'>  <span class="no">?assertEqual</span><span class="p">(</span><span class="s">&quot;example:one:two:three&quot;</span><span class="p">,</span> <span class="nv">Key</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">server_test_</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">setup</span><span class="p">,</span> <span class="k">fun</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nn">example_db</span><span class="p">:</span><span class="n">start_link</span><span class="p">()</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>   <span class="k">fun</span><span class="p">(_</span><span class="nv">Pid</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nn">example_db</span><span class="p">:</span><span class="n">stop</span><span class="p">(_</span><span class="nv">Pid</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'>   <span class="k">fun</span> <span class="n">generate_example_db_tests</span><span class="o">/</span><span class="mi">1</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">generate_example_db_tests</span><span class="p">(_</span><span class="nv">Pid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="no">?_assertEqual</span><span class="p">({</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;OK&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span> <span class="nn">example_db</span><span class="p">:</span><span class="n">save_script</span><span class="p">(</span><span class="s">&quot;jakub&quot;</span><span class="p">,</span> <span class="s">&quot;oboza&quot;</span><span class="p">,</span> <span class="o">&lt;&lt;</span><span class="s">&quot;yo dwang&quot;</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="p">),</span>
</span><span class='line'>    <span class="no">?_assertEqual</span><span class="p">({</span><span class="n">ok</span><span class="p">,</span><span class="o">&lt;&lt;</span><span class="s">&quot;yo dwang&quot;</span><span class="o">&gt;&gt;</span><span class="p">},</span> <span class="nn">example_db</span><span class="p">:</span><span class="n">get_script</span><span class="p">(</span><span class="s">&quot;jakub&quot;</span><span class="p">,</span> <span class="s">&quot;oboza&quot;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Public Api</h2>

<p>This code listing has two important parts first at top it starts at line 26.
This is the public API which will be used by developer. This is this free api. Later on i will explain how to change redis to mongodb and probably to other db engines without doing changes in rest of our app. From my perspective this is awesome feature.
In most cases when i had to make app scale problem of having code that was glues to one db engine was heavy.</p>

<h2>eunit tests</h2>

<p>At line 60. starts the declaration of tests, using <code>rebar</code> and <code>eunit</code> is very easy and it is always good to have test coverage in case of refactoring. I&#8217;m a fan of test driven development so i like to cover in tests first things that i will use or i think they might be error prone. Here is used &#8220;test generators&#8221; to just to show how to write tests for gen_server.</p>

<h1>Rebar</h1>

<p>Before i will explain more i need to say little about <code>rebar</code>. It is a command line tool that was developed by <code>basho</code> to help create app. it is by far the best thing i found learning erlang to help me do boring stuff and eliminate a lot of rage writing <code>app.src</code> files. To get rebar simply do (you can always go to <a href="https://github.com/basho/rebar">https://github.com/basho/rebar</a> to get most up to date informations about building it)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ  git clone git://github.com/basho/rebar.git
</span><span class='line'>λ  <span class="nb">cd </span>rebar
</span><span class='line'>λ  ./bootstrap
</span></code></pre></td></tr></table></div></figure>


<p>I use my own set of zsh scripts so all i did to add it to my path was to edit <code>.furby</code> file in my home dir. I strongly suggest also adding it to <code>$PATH</code> just to make your life easier.</p>

<h1>Back to example_db!</h1>

<p>To create app using rebar you just need to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ mkdir example_db
</span><span class='line'>λ rebar create-app <span class="nv">appid</span><span class="o">=</span><span class="nv">example_db</span>
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>create-app<span class="o">)</span>
</span><span class='line'>Writing src/example_db.app.src
</span><span class='line'>Writing src/example_db_app.erl
</span><span class='line'>Writing src/example_db_sup.erl
</span></code></pre></td></tr></table></div></figure>


<p>This command created <code>src</code> folder with scaffold of <code>application</code> OTP pattern and <code>supervisor</code> thats almost all we need :).
Now you can compile it using <code>rebar compile</code> and run tests using <code>rebar compile eunit</code> in out app currently we will see</p>

<figure class='code'><figcaption><span>rebar compile eunit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ rebar compile <span class="nv">eunit</span>
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'>Compiled src/example_db_app.erl
</span><span class='line'>Compiled src/example_db_sup.erl
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>eunit<span class="o">)</span>
</span><span class='line'>Compiled src/example_db_app.erl
</span><span class='line'>Compiled src/example_db_sup.erl
</span><span class='line'>  There were no tests to run.
</span></code></pre></td></tr></table></div></figure>


<p>Nothing to do because its empty. Lets add our db module.
But before this we need to add dependencies for eredis module. Lets create <code>rebar.config</code> file and add it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ emacs rebar.config
</span><span class='line'>λ cat rebar.config
</span><span class='line'>%%-*- mode: erlang -*-
</span><span class='line'>
</span><span class='line'><span class="o">{</span>erl_opts, <span class="o">[]}</span>.
</span><span class='line'><span class="o">{</span>cover_enabled, <span class="nb">true</span><span class="o">}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>deps,
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>eredis, <span class="s2">&quot;.*&quot;</span>, <span class="o">{</span>git, <span class="s2">&quot;https://github.com/wooga/eredis.git&quot;</span>, <span class="s2">&quot;HEAD&quot;</span><span class="o">}}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="o">}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Now just run <code>rebar get-deps</code> to get all dependencies downloaded.
After adding our <code>example_db.erl</code> into <code>src</code> directory we can run <code>rebar compile eunit</code> to compile and run tests. We have added <code>{cover_enabled, true}</code> in rebar.conf so also test code coverage will be generated for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ rebar compile <span class="nv">eunit</span>
</span><span class='line'><span class="o">==</span>&gt; eredis <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'>Compiled src/example_db.erl
</span><span class='line'><span class="o">==</span>&gt; eredis <span class="o">(</span>eunit<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>ERROR <span class="nv">REPORT</span><span class="o">====</span> 28-Mar-2012::22:19:35 <span class="o">===</span>
</span><span class='line'>** Generic server &lt;0.263.0&gt; terminating
</span><span class='line'>** Last message in was <span class="o">{</span>tcp,#Port&lt;0.4516&gt;,
</span><span class='line'>                            &lt;&lt;<span class="s2">&quot;*3\r\n$7\r\nmessage\r\n$3\r\nfoo\r\n$2\r\n12\r\n&quot;</span>&gt;&gt;<span class="o">}</span>
</span><span class='line'>** When Server <span class="nv">state</span> <span class="o">==</span> <span class="o">{</span>state,<span class="s2">&quot;127.0.0.1&quot;</span>,6379,&lt;&lt;&gt;&gt;,100,#Port&lt;0.4516&gt;,
</span><span class='line'>                               <span class="o">{</span>pstate,undefined,undefined<span class="o">}</span>,
</span><span class='line'>                               <span class="o">[</span>&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;<span class="o">]</span>,
</span><span class='line'>                               <span class="o">{</span><span class="c">#Ref&lt;0.0.0.4058&gt;,&lt;0.180.0&gt;},</span>
</span><span class='line'>                               <span class="o">{[{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;11&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;10&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;9&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;8&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;7&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;6&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;5&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;4&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}</span>,
</span><span class='line'>                                 <span class="o">{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;3&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}]</span>,
</span><span class='line'>                                <span class="o">[{</span>message,&lt;&lt;<span class="s2">&quot;foo&quot;</span>&gt;&gt;,&lt;&lt;<span class="s2">&quot;2&quot;</span>&gt;&gt;,&lt;0.263.0&gt;<span class="o">}]}</span>,
</span><span class='line'>                               10,exit,need_ack<span class="o">}</span>
</span><span class='line'>** Reason <span class="k">for </span><span class="nv">termination</span> <span class="o">==</span>
</span><span class='line'>** max_queue_size
</span><span class='line'>  All 53 tests passed.
</span><span class='line'>Cover analysis: /private/tmp/example_db/deps/eredis/.eunit/index.html
</span><span class='line'><span class="o">==</span>&gt; example_db <span class="o">(</span>eunit<span class="o">)</span>
</span><span class='line'>Compiled src/example_db.erl
</span><span class='line'>  All 3 tests passed.
</span><span class='line'>Cover analysis: /private/tmp/example_db/.eunit/index.html
</span></code></pre></td></tr></table></div></figure>


<p>All seems to be fine! lets create file called  <code>start.sh</code> to test it out</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>λ cat start.sh
</span><span class='line'>erl -pa ebin -pa deps/*/ebin
</span></code></pre></td></tr></table></div></figure>


<p>and make it executable with <code>chmod +x start.sh</code></p>

<p>And lets rock &#8216;n&#8217; roll</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> λ ./start.sh
</span><span class='line'>Erlang R15B <span class="o">(</span>erts-5.9<span class="o">)</span> <span class="o">[</span><span class="nb">source</span><span class="o">]</span> <span class="o">[</span>64-bit<span class="o">]</span> <span class="o">[</span>smp:4:4<span class="o">]</span> <span class="o">[</span>async-threads:0<span class="o">]</span> <span class="o">[</span>hipe<span class="o">]</span> <span class="o">[</span>kernel-poll:false<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Eshell V5.9  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'>1&gt; example_db:start_link<span class="o">()</span>.
</span><span class='line'><span class="o">{</span>ok,&lt;0.33.0&gt;<span class="o">}</span>
</span><span class='line'>2&gt; example_db:save_script<span class="o">(</span><span class="s2">&quot;example&quot;</span>, <span class="s2">&quot;script&quot;</span>, <span class="s2">&quot;puts &#39;2+2&#39;&quot;</span><span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,&lt;&lt;<span class="s2">&quot;OK&quot;</span>&gt;&gt;<span class="o">}</span>
</span><span class='line'>3&gt; example_db:get_script<span class="o">(</span><span class="s2">&quot;example&quot;</span>, <span class="s2">&quot;script&quot;</span><span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,&lt;&lt;<span class="s2">&quot;puts &#39;2+2&#39;&quot;</span>&gt;&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have fun :) Hope it was useful. You can download code for this blog post here <a href="https://github.com/JakubOboza/example_db-code">https://github.com/JakubOboza/example_db-code</a></p>

<h3>Huh ^___^</h3>

<p>that was my first post on new blog ;)</p>
]]></content>
  </entry>
  
</feed>
