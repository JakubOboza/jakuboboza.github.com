<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bundler | No Fucking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/bundler/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2013-11-20T11:52:04+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Gem with Bundler]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/"/>
    <updated>2012-04-11T20:09:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler</id>
    <content type="html"><![CDATA[<p>Building a new gem ( ruby library ) with bundler is easy task. I found a lot of tutorial on this topic in the web but none of them was covering more then just generating scaffold and packing up the gem. I will try to uncover a bit more. So at the end of this post you will be able to generate new gem, build it and it will have ready support for rspec.</p>

<p>First of all you need bundler. To install bundler just type <code>gem install bundler</code>. Probably most of you guys have it already :) but just in case.</p>

<h1>Generating new gem</h1>

<p>To generate gem scaffold all you have to do is call <code>bundle gem &lt;gem name&gt;</code> like here
``` bash
bundle gem doctor_toons</p>

<pre><code>  create  doctor_toons/Gemfile
  create  doctor_toons/Rakefile
  create  doctor_toons/LICENSE
  create  doctor_toons/README.md
  create  doctor_toons/.gitignore
  create  doctor_toons/doctor_toons.gemspec
  create  doctor_toons/lib/doctor_toons.rb
  create  doctor_toons/lib/doctor_toons/version.rb
</code></pre>

<p>Initializating git repo in /private/tmp/doctor_toons
```
This will create directory named doctor_toons with:</p>

<ul>
<li>Gemfile where we specify production and development gems</li>
<li>Rakefile with our rake tasks, you need to remember that rake is not part of Gemfile if you are using ruby &lt; 1.9.2</li>
<li>License file with license, GPL, BSD, MIT, LOL choose one and put it in by default MIT.</li>
<li>it initializes git repo inside this directory and adds .gitignore with default ignores
<code>bash .gitignore
λ cat .gitignore
*.gem
*.rbc
.bundle
.config
.yardoc
Gemfile.lock
InstalledFiles
_yardoc
coverage
doc/
lib/bundler/man
pkg
rdoc
spec/reports
test/tmp
test/version_tmp
tmp
</code></li>
<li>lib directory for your code !!!</li>
<li>&lt; name >.gemspec file with whole gemspec for our gem.</li>
</ul>


<p>First thing we need to do is set gems we will be using while building our lib. Initial <code>Gemfile</code> looks like this
``` bash
λ cat Gemfile
source 'https://rubygems.org'</p>

<h1>Specify your gem's dependencies in doctor_toons.gemspec</h1>

<p>gemspec
<code>
All production needed gems needs to be added before `gemspec`. So if we will want to add rspec as _development_ dependency we need to put it after `gemspec` term in Gemfile. Eg. if we want to use mongo 1.6.2 as production dependency and rspec 2.9.0 as our development dependency we should do it like this.
</code> bash cat Gemfile
source 'https://rubygems.org'</p>

<p>gem 'mongo', '~> 1.6.2'
gem 'bson',  '~> 1.6.2'</p>

<h1>Specify your gem's dependencies in doctor_toons.gemspec</h1>

<p>gemspec</p>

<p>gem 'rspec', '~> 2.9.0'
<code>
Now we can simply bundle all dependencies for our gem by hitting. `bundle install` you should see something like this
</code> bash
λ bundle install
Fetching gem metadata from https://rubygems.org/....
Using bson (1.6.2)
Using diff-lcs (1.1.3)
Using doctor_toons (0.0.1) from source at /private/tmp/doctor_toons
Using mongo (1.6.2)
Using rspec-core (2.9.0)
Using rspec-expectations (2.9.1)
Using rspec-mocks (2.9.0)
Using rspec (2.9.0)
Using bundler (1.1.0)
Your bundle is complete! Use <code>bundle show [gemname]</code> to see where a bundled gem is installed.
```</p>

<h1>Building gem!</h1>

<p>Ok now we are ready for next step, building gem! To do it we call <code>gem build &lt; name &gt;.gemspec</code> so lets do it
``` bash
λ gem build doctor_toons.gemspec
ERROR:  While executing gem ... (Gem::InvalidSpecificationException)</p>

<pre><code>"FIXME" or "TODO" is not a description
</code></pre>

<p><code>
Error. This means that we need to supply few things before we will build this gem. First of all we need to `emacs &lt; name &gt;.gemspec` to edit the file with gemspec and set few things. By default this file should look like this
</code> ruby doctor_toons.gemspec</p>

<h1>-<em>- encoding: utf-8 -</em>-</h1>

<p>require File.expand_path('../lib/doctor_toons/version', <strong>FILE</strong>)</p>

<p>Gem::Specification.new do |gem|
  gem.authors       = ["JakubOboza"]
  gem.email         = ["jakub.oboza@gmail.com"]
  gem.description   = %q{TODO: Write a gem description}
  gem.summary       = %q{TODO: Write a gem summary}
  gem.homepage      = ""</p>

<p>  gem.executables   = <code>git ls-files -- bin/*</code>.split("\n").map{ |f| File.basename(f) }
  gem.files         = <code>git ls-files</code>.split("\n")
  gem.test_files    = <code>git ls-files -- {test,spec,features}/*</code>.split("\n")
  gem.name          = "doctor_toons"
  gem.require_paths = ["lib"]
  gem.version       = DoctorToons::VERSION
end
<code>
So lets edit description and summary and build again our gem. `gem build doctor_toons.gemspec`
</code> bash
λ gem build doctor_toons.gemspec
WARNING:  no homepage specified
  Successfully built RubyGem
  Name: doctor_toons
  Version: 0.0.1
  File: doctor_toons-0.0.1.gem
<code>
Yeah now we can build our gem :)
Lets have a look at gemspec `gem spec doctor_toons-0.0.1.gem` before we will be adding rspec to it :)
</code> bash
 λ gem spec doctor_toons-0.0.1.gem
--- !ruby/object:Gem::Specification
name: doctor_toons
version: !ruby/object:Gem::Version
  version: 0.0.1
  segments:
  hash:
platform: ruby
authors:
- JakubOboza
autorequire:
bindir: bin
cert_chain: []
date: 2012-04-11 00:00:00.000000000Z
dependencies: []
description: He sleeps with a gun, but he loves his son
email:
- jakub.oboza@gmail.com
executables: []
extensions: []
extra_rdoc_files: []
files:
- .gitignore
- Gemfile
- LICENSE
- README.md
- Rakefile
- doctor_toons.gemspec
- lib/doctor_toons.rb
- lib/doctor_toons/version.rb
homepage: ''
licenses: []
post_install_message:
rdoc_options: []
require_paths:
- lib
required_ruby_version: !ruby/object:Gem::Requirement
  none: false
  requirements:
  - - ! '>='</p>

<pre><code>- !ruby/object:Gem::Version
  version: '0'
  segments: 
  hash: 
</code></pre>

<p>required_rubygems_version: !ruby/object:Gem::Requirement
  none: false
  requirements:
  - - ! '>='</p>

<pre><code>- !ruby/object:Gem::Version
  version: '0'
  segments: 
  hash: 
</code></pre>

<p>requirements: []
rubyforge_project:
rubygems_version: 1.8.15
signing_key:
specification_version: 3
summary: Psycho dad
test_files: []
```
Everything is fine.</p>

<h1>Adding testing support</h1>

<p>Before we will be wiriting any library code its nice to add support for testing framework. I like name of rspec and rspec as a lib. It lets you define in form of tests specification for your library.</p>

<h2>Rspec</h2>

<p>Adding rspec to our project is easy. All we need to do it create directory called <code>spec</code> and file inside of it called <code>spec_helper.rb</code> like this
<code>bash
λ mkdir spec
λ touch spec/spec_helper.rb
</code>
Now we need to edit <code>spec_helper.rb</code> and add few things.
``` bash
require 'rubygems'
require 'bundler/setup'</p>

<h1>our gem</h1>

<p>require 'doctor_toons'</p>

<p>RSpec.configure do |config|</p>

<p>end
<code>
This is bare minimum `spec_helper.rb` file we can have. All we do is require on rubygems, bundler setup and our gem `doctor_toons` :). To make it easy to use we should expand our rake with a spec task! like this
</code> ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>require "bundler/gem_tasks"</p>

<p>require 'rspec/core/rake_task'</p>

<p>RSpec::Core::RakeTask.new('spec')</p>

<p>task :default => :spec
<code>
This will add `rspec` task called `rake spec` that will run all our specs :)
Now last thing we need to add first initial spec to our `spec` folder so we will be able to test it.
</code> ruby spec/doctor_toons_spec.rb
require 'spec_helper'</p>

<p>describe DoctorToons do</p>

<p>  it "should rock" do</p>

<pre><code>lambda do
  DoctorToons.rock()
end.should_not raise_error
</code></pre>

<p>  end</p>

<p>end
<code>``
Remember spec file names has to end with</code>_spec.rb`</p>

<p>Now if you will run <code>rake spec</code> you should see something like this
``` bash
Users/kuba/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -S rspec ./spec/doctor_toons_spec.rb
F</p>

<p>Failures:</p>

<p>  1) DoctorToons should rock</p>

<pre><code> Failure/Error: lambda do
   expected no Exception, got #&lt;NoMethodError: undefined method `rock' for DoctorToons:Module&gt;
 # ./spec/doctor_toons_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.00218 seconds
1 example, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/doctor_toons_spec.rb:5 # DoctorToons should rock
rake aborted!
/Users/kuba/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -S rspec ./spec/doctor_toons_spec.rb failed</p>

<p>Tasks: TOP => spec
(See full trace by running task with --trace)
```
Wooow works :) now you can implement your library to rock the world!</p>

<h2>Few useful things</h2>

<p>If you want to have colorful output like me :). You can add <code>.rspec</code> file in top dir of project with content like this
<code>bash .rspec
--color
--format documentation
</code>
First line adds color output and second line is format out spec output, it is nice because its the most verbose output. You can easy see where spec failed. When you are on early stage of the project and you have few describes like 50-100 it often helps to develop faster.</p>

<h1>Summary</h1>

<p>This is just intro post about my upcoming series on building tools that you need :).
Fingers crossed :)</p>

<p>-Cheers!</p>
]]></content>
  </entry>
  
</feed>
