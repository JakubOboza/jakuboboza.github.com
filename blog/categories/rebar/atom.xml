<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rebar | No Fucking Idea]]></title>
  <link href="http://JakubOboza.github.com/blog/categories/rebar/atom.xml" rel="self"/>
  <link href="http://JakubOboza.github.com/"/>
  <updated>2012-04-11T21:14:15+01:00</updated>
  <id>http://JakubOboza.github.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rebar -> swiss army knife]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/03/29/rebar-swiss-army-knife/"/>
    <updated>2012-03-29T18:55:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/03/29/rebar-swiss-army-knife</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<p>Rebar is a great command line tool for building your Erlang apps. It was developed by guys from <code>basho</code> <a href="http://basho.com/">http://basho.com/</a>. If you want to build Erlang app or module you can skip a lot of config / boilerplate code but using rebar.</p>

<h1>Wait what? How do i get it ?</h1>

<p>To obtain rebar all you have to do is clone source using
<code>bash
λ git clone git://github.com/basho/rebar.git
</code>
after obtaining source go into directory and bootstrap it.
<code>bash
λ cd rebar
λ ./bootstrap
</code>
This will build rebar script if everything is successful. Last thing i suggest is adding this directory to your path.
<code>bash
λ export PATH=/path/to/rebar:$PATH
</code>
So you will be able to use it like other command lines tools from "global namespace".
Now you should have working rebar installation. Just to test that everything is ok you can run <code>rebar</code> like this.
``` bash
λ rebar
No command to run specified!
Usage: rebar [-h] [-c] [-v <verbose>] [-V] [-f] [-D <defines>] [-j <jobs>] [-C <config>] [-p] [var=value,...] &lt;command,...></p>

<p>  -h, --help        Show the program options
  -c, --commands    Show available commands
  -v, --verbose     Verbosity level (-v, -vv, -vvv, --verbose 3). Default: 0
  -V, --version     Show version information
  -f, --force       Force
  -D            Define compiler macro
  -j, --jobs        Number of concurrent workers a command may use. Default: 3
  -C, --config      Rebar config file to use
  -p, --profile     Profile this run of rebar
  var=value     rebar global variables (e.g. force=1)
  command       Command to run (e.g. compile)</p>

<p>```</p>

<h1>How do i use it @_@ ?</h1>

<p>Two most important things you can generate using <code>rebar</code> are applications and nodes.
To generate application you just need to create app directory and run <code>rebar create-app</code> command like this.
``` bash
mkdir furby<br/>
λ cd furby
λ rebar create-app appid=furby
==> furby (create-app)
Writing src/furby.app.src
Writing src/furby_app.erl
Writing src/furby_sup.erl</p>

<p><code>``
This has created application scaffold with ready to go supervisor. This is ready to go!
to compile it just run</code>rebar compile`</p>

<h1>Me gusta</h1>

<p>This is all fine but that don't eliminate a lot, sweet things are behind the corner :).</p>

<h3>eunit</h3>

<p>Rebar enables you to use easy eunit testing framework within your code. Like we did it here <a href="http://no-fucking-idea.com/blog/2012/03/23/using-eredis-in-erlang/">http://no-fucking-idea.com/blog/2012/03/23/using-eredis-in-erlang/</a>. To do it just run <code>rebar compile eunit</code> .
``` bash exmaple_output
λ rebar compile eunit
zsh: correct 'eunit' to '.eunit' [nyae]? n
==> eredis (compile)
==> example_db (compile)
==> eredis (eunit)</p>

<p>=ERROR REPORT==== 29-Mar-2012::19:13:21 ===
<strong> Generic server &lt;0.259.0> terminating
</strong> Last message in was {tcp,#Port&lt;0.4549>,</p>

<pre><code>                        &lt;&lt;"*3\r\n$7\r\nmessage\r\n$3\r\nfoo\r\n$2\r\n12\r\n"&gt;&gt;}
</code></pre>

<p>** When Server state == {state,"127.0.0.1",6379,&lt;&lt;>>,100,#Port&lt;0.4549>,</p>

<pre><code>                           {pstate,undefined,undefined},
                           [&lt;&lt;"foo"&gt;&gt;],
                           {#Ref&lt;0.0.0.3990&gt;,&lt;0.176.0&gt;},
                           {[{message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"11"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"10"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"9"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"8"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"7"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"6"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"5"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"4"&gt;&gt;,&lt;0.259.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"3"&gt;&gt;,&lt;0.259.0&gt;}],
                            [{message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"2"&gt;&gt;,&lt;0.259.0&gt;}]},
                           10,exit,need_ack}
</code></pre>

<p><strong> Reason for termination ==
</strong> max_queue_size
  All 53 tests passed.
Cover analysis: /private/tmp/example_db/deps/eredis/.eunit/index.html
==> example_db (eunit)
  All 3 tests passed.
Cover analysis: /private/tmp/example_db/.eunit/index.html
```</p>

<h3>coverage</h3>

<p>Also if you will fiddle with <code>rebar.config</code> and set some variables like this:
``` bash
λ cat rebar.config
%%-<em>- mode: erlang -</em>-</p>

<p>{erl_opts, []}.
{cover_enabled, true}.</p>

<p><code>
you can get test coverage generated in `.eunit` folder. but this is just the beginning.  lets look at it.
</code> html example_db.COVER.html
example_db/.eunit λ cat example_db.COVER.html
<html>
<head><title>.eunit/example_db.COVER.html</title></head><body bgcolor=white text=black></p>

<pre>
File generated from /private/tmp/example_db/.eunit/example_db.erl by COVER 2012-03-29 at 19:13:21

****************************************************************************

        |  -module(example_db).
        |  -behaviour(gen_server).
        |  
...(and more)
```

### dependencies
Last thing i want to mention is dependencies, i love this feature from `rebar`. You can add dependencies and rebar will do all the magic for you :). just open your `rebar.config`  and add thme like this:
``` bash rebar.config
%%-*- mode: erlang -*-

{erl_opts, []}.
{cover_enabled, true}.

{deps,
  [
    {eredis, ".*", {git, "https://github.com/wooga/eredis.git", "HEAD"}}
  ]
}.

```
Whenever you will type `rebar get-deps` he will download all dependencies and install them into `deps` directory. This makes developing applications using things like mochiweb really easy!

# Summary
I love this tool, it makes learning and development in `Erlang` much easier and more rewarding experience. I hope this help you a bit :). Cheers!

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using eredis, redis with erlang]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/03/23/using-eredis-in-erlang/"/>
    <updated>2012-03-23T23:28:00+00:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/03/23/using-eredis-in-erlang</id>
    <content type="html"><![CDATA[<p>Recently i decided to move my blog from <code>tumblr.com</code> to <code>octopress engine</code> because it is just easier for me to maintain it and it looks nicer. The old blog is under <a href="http://no-fucking-idea.tumblr.com">http://no-fucking-idea.tumblr.com</a>. My first post on new blog is dedicated to using redis with erlang.</p>

<h1>Eredis</h1>

<p>Wooga created a really nice (performance driven) redis driver for erlang. You can get it here <a href="https://github.com/wooga/eredis">https://github.com/wooga/eredis</a>. It is really easy and nice.</p>

<h1>Initial sample</h1>

<p>On project page you can find simple examples how to use eredis. Examples there are all you need (but i need something for front page of my new blog so i will rewrite them and explain them :) ).</p>

<h2>First you need to start your eredis application</h2>

<p><code>erlang initialization
{ok, Client} = eredis:start_link().
</code>
Client is the "connection / state" we will be using with rest of queries.</p>

<p>To query things with redis we will use <code>q</code> method from eredis module which takes "Connection / Client" state and list with params.
This api is very simple here are two most basic examples of get and set.
GET:
<code>erlang get
{ok, &lt;&lt;"OK"&gt;&gt;} = eredis:q(Client, ["SET", "name", "kuba"]).
</code>
and SET:
<code>erlang set
{ok, &lt;&lt;"kuba"&gt;&gt;} = eredis:q(Client, ["GET", "name"]).
</code>
From my point of view this is ideal candidate to be turned into gen_server behavior. We will pass "Connection / Client" as state and also we will build some "key" serialization methods around it to make it more durable and make our life easy if we will decide to refactor it later on.</p>

<h1>Free Api wrapper</h1>

<p>First thing i saw during development using Erlang is that you get free api if you follow simple patterns and encapsulate things into gen_server's and applications.</p>

<p>``` erlang example_db.erl
-module(example_db).
-behaviour(gen_server).</p>

<p>-author("jakub.oboza@gmail.com").
-define(Prefix, "example").</p>

<p>-export([start_link/0]).
-export([init/1, handle_call/3, handle_cast/2, terminate/2, handle_info/2, code_change/3, stop/1]).
-export([get_script/2, save_script/3]).</p>

<p>% public api</p>

<p>start_link() ->
  gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).</p>

<p>init([]) ->
  {ok, Redis} = eredis:start_link(),
  {ok, Redis}.</p>

<p>stop(_Pid) ->
  stop().</p>

<p>stop() -></p>

<pre><code>gen_server:cast(?MODULE, stop).
</code></pre>

<p>%% public client api</p>

<p>get_script(Api, Method) ->
  gen_server:call(?MODULE, {get_script, Api, Method}).</p>

<p>save_script(Api, Method, Script) ->
  gen_server:call(?MODULE, {save_script, Api, Method, Script}).</p>

<p>%% genserver handles</p>

<p>handle_call({get_script, Api, Method}, _From, Redis) ->
  Response = eredis:q(Redis, [ "GET", get_key(Api, Method) ]),
  {reply, Response, Redis};</p>

<p>handle_call({save_script, Api, Method, Script}, _From, Redis) ->
  Response = eredis:q(Redis, ["SET", get_key(Api, Method), Script]),
  {reply, Response, Redis};</p>

<p>handle_call(<em>Message, </em>From, Redis) ->
  {reply, error, Redis}.</p>

<p>handle_cast(<em>Message, Redis) -> {noreply, Redis}.
handle_info(</em>Message, Redis) -> {noreply, Redis}.
terminate(<em>Reason, </em>Redis) -> ok.
code_change(<em>OldVersion, Redis, </em>Extra) -> {ok, Redis}.</p>

<p>%% helper methods</p>

<p>get_key(Api, Method) ->
  generate_key([Api, Method]).</p>

<p>generate_key(KeysList) ->
  lists:foldl(fun(Key, Acc) -> Acc ++ ":" ++ Key end, ?Prefix, KeysList).</p>

<p>% tests</p>

<p>-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").
-endif.</p>

<p>-ifdef(TEST).</p>

<p>generate_key_test() ->
  Key = generate_key(["one", "two", "three"]),
  ?assertEqual("example:one:two:three", Key).</p>

<p>server_test<em>() ->
  {setup, fun() -> example_db:start_link() end,
   fun(</em>Pid) -> example_db:stop(_Pid) end,
   fun generate_example_db_tests/1}.</p>

<p>generate_example_db_tests(_Pid) ->
  [</p>

<pre><code>?_assertEqual({ok,&lt;&lt;"OK"&gt;&gt;}, example_db:save_script("jakub", "oboza", &lt;&lt;"yo dwang"&gt;&gt;) ),
?_assertEqual({ok,&lt;&lt;"yo dwang"&gt;&gt;}, example_db:get_script("jakub", "oboza") )
</code></pre>

<p>  ].</p>

<p>-endif
```</p>

<h2>Public Api</h2>

<p>This code listing has two important parts first at top it starts at line 26.
This is the public API which will be used by developer. This is this free api. Later on i will explain how to change redis to mongodb and probably to other db engines without doing changes in rest of our app. From my perspective this is awesome feature.
In most cases when i had to make app scale problem of having code that was glues to one db engine was heavy.</p>

<h2>eunit tests</h2>

<p>At line 60. starts the declaration of tests, using <code>rebar</code> and <code>eunit</code> is very easy and it is always good to have test coverage in case of refactoring. I'm a fan of test driven development so i like to cover in tests first things that i will use or i think they might be error prone. Here is used "test generators" to just to show how to write tests for gen_server.</p>

<h1>Rebar</h1>

<p>Before i will explain more i need to say little about <code>rebar</code>. It is a command line tool that was developed by <code>basho</code> to help create app. it is by far the best thing i found learning erlang to help me do boring stuff and eliminate a lot of rage writing <code>app.src</code> files. To get rebar simply do (you can always go to <a href="https://github.com/basho/rebar">https://github.com/basho/rebar</a> to get most up to date informations about building it)</p>

<p><code>bash
λ  git clone git://github.com/basho/rebar.git
λ  cd rebar
λ  ./bootstrap
</code></p>

<p>I use my own set of zsh scripts so all i did to add it to my path was to edit <code>.furby</code> file in my home dir. I strongly suggest also adding it to <code>$PATH</code> just to make your life easier.</p>

<h1>Back to example_db!</h1>

<p>To create app using rebar you just need to
<code>bash
λ mkdir example_db
λ rebar create-app appid=example_db
==&gt; example_db (create-app)
Writing src/example_db.app.src
Writing src/example_db_app.erl
Writing src/example_db_sup.erl
</code>
This command created <code>src</code> folder with scaffold of <code>application</code> OTP pattern and <code>supervisor</code> thats almost all we need :).
Now you can compile it using <code>rebar compile</code> and run tests using <code>rebar compile eunit</code> in out app currently we will see
<code>bash rebar compile eunit
λ rebar compile eunit
==&gt; example_db (compile)
Compiled src/example_db_app.erl
Compiled src/example_db_sup.erl
==&gt; example_db (eunit)
Compiled src/example_db_app.erl
Compiled src/example_db_sup.erl
  There were no tests to run.
</code>
Nothing to do because its empty. Lets add our db module.
But before this we need to add dependencies for eredis module. Lets create <code>rebar.config</code> file and add it.
``` bash
λ emacs rebar.config
λ cat rebar.config
%%-<em>- mode: erlang -</em>-</p>

<p>{erl_opts, []}.
{cover_enabled, true}.</p>

<p>{deps,
  [</p>

<pre><code>{eredis, ".*", {git, "https://github.com/wooga/eredis.git", "HEAD"}}
</code></pre>

<p>  ]
}.
<code>
Now just run `rebar get-deps` to get all dependencies downloaded.
After adding our `example_db.erl` into `src` directory we can run `rebar compile eunit` to compile and run tests. We have added `{cover_enabled, true}` in rebar.conf so also test code coverage will be generated for us.
</code> bash
λ rebar compile eunit
==> eredis (compile)
==> example_db (compile)
Compiled src/example_db.erl
==> eredis (eunit)</p>

<p>=ERROR REPORT==== 28-Mar-2012::22:19:35 ===
<strong> Generic server &lt;0.263.0> terminating
</strong> Last message in was {tcp,#Port&lt;0.4516>,</p>

<pre><code>                        &lt;&lt;"*3\r\n$7\r\nmessage\r\n$3\r\nfoo\r\n$2\r\n12\r\n"&gt;&gt;}
</code></pre>

<p>** When Server state == {state,"127.0.0.1",6379,&lt;&lt;>>,100,#Port&lt;0.4516>,</p>

<pre><code>                           {pstate,undefined,undefined},
                           [&lt;&lt;"foo"&gt;&gt;],
                           {#Ref&lt;0.0.0.4058&gt;,&lt;0.180.0&gt;},
                           {[{message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"11"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"10"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"9"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"8"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"7"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"6"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"5"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"4"&gt;&gt;,&lt;0.263.0&gt;},
                             {message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"3"&gt;&gt;,&lt;0.263.0&gt;}],
                            [{message,&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"2"&gt;&gt;,&lt;0.263.0&gt;}]},
                           10,exit,need_ack}
</code></pre>

<p><strong> Reason for termination ==
</strong> max_queue_size
  All 53 tests passed.
Cover analysis: /private/tmp/example_db/deps/eredis/.eunit/index.html
==> example_db (eunit)
Compiled src/example_db.erl
  All 3 tests passed.
Cover analysis: /private/tmp/example_db/.eunit/index.html
<code>
All seems to be fine! lets create file called  `start.sh` to test it out
</code> bash
λ cat start.sh
erl -pa ebin -pa deps/*/ebin
<code>``
and make it executable with</code>chmod +x start.sh`</p>

<p>And lets rock 'n' roll</p>

<p>``` bash
 λ ./start.sh
Erlang R15B (erts-5.9) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]</p>

<p>Eshell V5.9  (abort with ^G)
1> example_db:start_link().
{ok,&lt;0.33.0>}
2> example_db:save_script("example", "script", "puts '2+2'").<br/>
{ok,&lt;&lt;"OK">>}
3> example_db:get_script("example", "script").
{ok,&lt;&lt;"puts '2+2'">>}
```
Have fun :) Hope it was useful. You can download code for this blog post here <a href="https://github.com/JakubOboza/example_db-code">https://github.com/JakubOboza/example_db-code</a></p>

<h3>Huh ^___^</h3>

<p>that was my first post on new blog ;)</p>
]]></content>
  </entry>
  
</feed>
