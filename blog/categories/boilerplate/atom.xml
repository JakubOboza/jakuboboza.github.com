<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: boilerplate | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/boilerplate/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2013-12-12T19:37:01+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rebar templates]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/05/29/rebar-templates/"/>
    <updated>2012-05-29T21:38:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/05/29/rebar-templates</id>
    <content type="html"><![CDATA[<p>First question when i need to add new blog to my code I ask is, do i remember all the boilerplate and how many times i will make a mistake this time. No more :). Rebar has a nice thing built in it is templating language that lets us build our own templates.</p>

<h1>Custom template ?</h1>

<p>I always end up looking at old projects and copying parts like <code>gen_server</code> and reusing them. I always knew rebar has option to write them but never had time to look at it. Today lol, i wanted to do some cleaning at home so every thing seems to be a good excuse to not do any cleaning :D.</p>

<h2>What i need to know</h2>

<p>Basic template is made from one or many <code>.erl</code> files written with <code>mustache</code> style <code>{ { } }</code> code and <code>.template</code> file describing what to do with files.</p>

<h2>Let&rsquo;s build gen_server template</h2>

<p>So my first file will be <code>gen_server.erl</code>
``` bash gen_server.erl
%%% @author  { {author_name } } &lt;{ {author_email} }>
%%% @copyright  { {copyright_year } }  { {author_name} }.
%%% @doc  { {description } }</p>

<p>-module( { {name } }).
-behaviour(gen_server).</p>

<p>-author(&lsquo; { {author_name } } &lt;{ {author_email } }>&rsquo;).</p>

<p>-export([start_link/1]).
-export([init/1, handle_call/3, handle_cast/2, terminate/2, handle_info/2, code_change/3, stop/1]).</p>

<p>% public api</p>

<p>start_link(_Args) &ndash;>
  gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).</p>

<p>% state should be change with State that you will pass
init([]) &ndash;>
  {ok, state}.</p>

<p>stop(_Pid) &ndash;>
  stop().</p>

<p>stop() &ndash;>
  gen_server:cast(?MODULE, stop).</p>

<p>handle_call({method_name_and_params}, _From, State) &ndash;>
  Response = ok,
  {reply, Response, State};</p>

<p>handle_call(<em>Message, </em>From, State) &ndash;>
  {reply, error, State}.</p>

<p>handle_cast(<em>Message, State) &ndash;> {noreply, State}.
handle_info(</em>Message, State) &ndash;> {noreply, State}.
terminate(<em>Reason, </em>State) &ndash;> ok.
code_change(<em>OldVersion, State, </em>Extra) &ndash;> {ok, State}.
<code>``
This is the template, i know a bit long i tried to cut out all comments, euint etc and narrow it to minimum. I posted it to show how much you can save :). Now you will need the</code>transformation file`. All this things in { { something } } will be replaced by things we will type in command line or defaults from template file.</p>

<p><code>bash gen_server.template
{variables, [
  {name, "template"},
  {copyright_year, "2012"},
  {author_name, "jakub Oboza"},
  {author_email, "jakub.oboza@gmail.com"}
]}.
{template, "gen_server.erl", "src/{ {name} }.erl"}.
</code>
For me it looks like this, we have few default definitions and at the bottom. template! This is important part it says which file he has to copy where and what will be the name of new file. Now everything should be clear!</p>

<h2>Injet it into rebar!</h2>

<p>All you need now to do is symlink your template folders to <code>~/.rebar/templates</code> and you can use them!
(you can symlink your folder or just create one there :) )</p>

<h2>Use!</h2>

<p><code>bash
Î» rebar create template=gen_server name=example
==&gt; tmp (create)
Writing src/example.erl
</code>
Viola!</p>

<h1>important</h1>

<p>When i was looking at this post i saw that { { is converted in a wrong way by octopress so i added spaces between them! check repo for correct code!</p>

<h1>My own templates</h1>

<p>Today i started adding my own templates initially i have only <code>gen_server</code> and <code>webmachine_resource</code> but i will add more :). It is fun it is like building your own anti-boiler plate framework.</p>

<p>My templates repo: <a href="https://github.com/JakubOboza/rebar-templates">https://github.com/JakubOboza/rebar-templates</a></p>

<p>Hope this helps!
Cheers!</p>
]]></content>
  </entry>
  
</feed>
