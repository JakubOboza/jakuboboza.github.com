<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: haskell | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2013-12-16T22:38:42+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with URL quick tip Network.Url]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/12/16/working-with-urls-quick-tip-network-dot-url/"/>
    <updated>2013-12-16T17:59:58+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/12/16/working-with-urls-quick-tip-network-dot-url</id>
    <content type="html"><![CDATA[<p>I have bigger text to post but before i will do it i have to split it into smaller parts so it will not be one long post about everything.</p>

<p><img src="http://i.imgur.com/jwI5yqK.png" alt="cat explaining stuff" /></p>

<h1>Working with URL&rsquo;s</h1>

<p>Most of the time when preparing to make an http request in haskell eg. using <code>simpleHTTP</code> we need to build a request. We have several ways to do it, one of them would be to ugly glue strings together but thats not the way to do it in a safe way. Happily for us we have <code>url</code>, <code>(cabal install url)</code> package that adds <code>Network.Url</code> package. And here i will show few quick tips how to use it to work with urls.</p>

<h2>Step one: Import</h2>

<p>First thing we have to do is to import our package :D and string into our url lib.</p>

<p>``` haskell start.hs
import Network.URL</p>

<p>main = do
  putStrLn &ldquo;give me some url:&rdquo;
  rawUrl &lt;&ndash; getLine
  let maybeUrl = importURL rawUrl in</p>

<pre><code>case maybeUrl of
Just url -&gt;
  putStrLn $ exportURL $ add_param url ("param_name","param_value")
Nothing  -&gt; putStrLn "Sorry but this doesn't look like url"
</code></pre>

<p>```</p>

<p>This is the super simple example. But how it work? First of all we have <code>importURL</code> with signature:</p>

<p><code>haskell
importURL :: String -&gt; Maybe URL
</code></p>

<p>This will import url in form of string to url library and give us back Maybe URL. This is awesome! So we will have type that we can work on Yay! To exit library and get back string. We need to use <code>exportURL</code> with signature:</p>

<p><code>haskell
exportURL :: URL -&gt; String
</code></p>

<p>So we are only doing some simple transformation <code>String ~&gt;~ Maybe URL ~&gt;~ URL ~&gt;~ String</code> thats nothing we can&rsquo;t handle!</p>

<p>Next important bit is <code>add_param</code> function with signature:</p>

<p><code>haskell
add_param :: URL -&gt; (String, String) -&gt; URL
</code></p>

<p>This does exactly what we would expect :D add url param to our url. Ofc work inside URL lib so we expect as input URL type.</p>

<h2>Setp two: More detailed example</h2>

<p>I will try to reiterate our first example showing a bit more thing. Or just same things in a different way. Lets try to add two params.</p>

<p>``` haskell ue2.hs
import Network.URL</p>

<p>prepareUrl url =
  let newUrl = add_param url (&ldquo;query&rdquo;,&ldquo;gimme cats pics&rdquo;) in</p>

<pre><code>add_param newUrl ("size", "any")
</code></pre>

<p>main = do
  putStrLn &ldquo;give me some url:&rdquo;
  rawUrl &lt;&ndash; getLine
  let maybeUrl = importURL rawUrl in</p>

<pre><code>case maybeUrl of
Just url -&gt;
  putStrLn $ exportURL $ prepareUrl url
Nothing  -&gt; putStrLn "Sorry but this doesn't look like url"
</code></pre>

<p>```</p>

<p>You should run the code and see something like this:
<code>
 Î» ./ue2
give me some url:
lambdacu.be
lambdacu.be?size=any&amp;query=gimme+cats+pics
</code></p>

<h1>Summary</h1>

<p>It is just a quick tip :) <code>Network.URL</code> has few more functions eg. to check if protocol is secure and checking if params are ok.
But stuff showed above is the main point of lib.</p>

<p>More about this lib ofc on hackage: <a href="http://hackage.haskell.org/package/url-2.1/docs/Network-URL.html">http://hackage.haskell.org/package/url-2.1/docs/Network-URL.html</a></p>

<p>&hellip;.And quick tip should be quick :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[forkIO and friends]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/12/12/forkio-and-friends/"/>
    <updated>2013-12-12T17:38:53+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/12/12/forkio-and-friends</id>
    <content type="html"><![CDATA[<p>This post is sponsored by <code>forkIO</code> function and <code>newChan</code> in <code>Haskell</code></p>

<p><img src="http://i.imgur.com/5yQNQxs.png" alt="Catz" /></p>

<h1>What is this forkIO ?</h1>

<p>forkIO is part of <code>Control.Concurrent</code> package and as it says it:</p>

<blockquote><p>Sparks off a new thread to run the IO computation passed as the first argument, and returns the ThreadId of the newly created thread.
The new thread will be a lightweight thread; if you want to use a foreign library that uses thread-local storage, use forkOS instead.</p></blockquote>

<p>This is very neat if your program wants to use all the cores of your CPU or at least be more responsive not waiting for stuff to happen.</p>

<p>forkIO type is:</p>

<p><code>haskell
forkIO :: IO () -&gt; IO ThreadId
</code></p>

<h1>Channels to help !</h1>

<p>forkIO would be enough to start working on stuff but to make a real use of them we need a way of communicating with our threads. This actually opens design of our code to new stuff like building workers. There are other ways of communicating with threads like mVar but IMHO channels win hard.</p>

<p>Channels are part of <code>Control.Concurrent.Chan</code> package and are typable! Typed communication Yay!</p>

<p>Channels functions we need have the following type signatures:
<code>haskell
newChan :: IO (Chan a)
writeChan :: Chan a -&gt; a -&gt; IO ()
readChan :: Chan a -&gt; IO a
</code></p>

<p>And that&rsquo;s actually all we need. Let&rsquo;s make some stuff working.</p>

<h1>Ok So lets get this party started :)</h1>

<p>I think most of the time it&rsquo;s better to explain stuff on examples.</p>

<h2>Just spawn!</h2>

<p>First thing we want is just to spawn!</p>

<p>``` haskell just_spawn.hs
import Control.Concurrent</p>

<p>main = do
  forkIO $ do</p>

<pre><code>putStrLn "Yay! i'm in thread!"
</code></pre>

<p>  putStrLn &ldquo;I&rsquo;m important i&rsquo;m in Main thread!&rdquo;</p>

<p>```</p>

<p>This is a very simple way to spawn a light weight thread via forkIO :>. As you can see it is a normal action so you can go dirty!</p>

<p>forkIO takes actions and give you back IO ThreadId so you can keep track / kill threads you don&rsquo;t like</p>

<h2>Just Spawn</h2>

<p>Previous example was a bit cheating as it showed nothing really important so lets make some crazy threads printing stuff now.</p>

<p>``` haskell crazygals.hs</p>

<p>import Control.Concurrent</p>

<p>fanOfGarbage = do
  putStrLn &ldquo;Garbage is best bad evar!&rdquo;
  fanOfGarbage</p>

<p>fanOfClassicMusic = do
  putStrLn &ldquo;Dude Garbage is garbage&rdquo;
  fanOfClassicMusic</p>

<p>main = do
  putStrLn &ldquo;hit it guys!&rdquo;
  forkIO fanOfGarbage
  forkIO fanOfClassicMusic</p>

<p>```</p>

<p>Well compiling and running this gives you only &ldquo;hit it guys&rdquo; as main thread exits and child threads dies! lets fix it so we can say when they need to stop!:></p>

<p>``` haskell crazygals2.hs</p>

<p>import Control.Concurrent</p>

<p>fanOfGarbage = do
  putStrLn &ldquo;Garbage is best bad evar!&rdquo;
  fanOfGarbage</p>

<p>fanOfClassicMusic = do
  putStrLn &ldquo;Dude Garbage is garbage&rdquo;
  fanOfClassicMusic</p>

<p>main = do
  putStrLn &ldquo;hit it guys!&rdquo;
  forkIO fanOfGarbage
  forkIO fanOfClassicMusic
  getLine
  putStrLn &ldquo;Thank You Sir for stopping them!&rdquo;
```</p>

<p>After launching it you can see how each thread is spamming its prints ;> So it work until you will hit enter. Cool so we have something working.</p>

<p>How does it work ? first of all we use forkIO to spawn threads and this time we have each &ldquo;thread&rdquo; function in separation.
Each of them run forever like crazy music fans :). In this place we can make it simple by using <code>forever</code> from <code>Control.Monad</code> to make it simpler.</p>

<p>``` haskell crazygals3.hs</p>

<p>import Control.Concurrent
import Control.Monad (forever)</p>

<p>fanOfGarbage = do
  forever $ do</p>

<pre><code>putStrLn "Garbage is best bad evar!"
</code></pre>

<p>fanOfClassicMusic = do
  forever $ do</p>

<pre><code>putStrLn "Dude Garbage is garbage"
</code></pre>

<p>main = do
  putStrLn &ldquo;hit it guys!&rdquo;
  forkIO fanOfGarbage
  forkIO fanOfClassicMusic
  getLine
  putStrLn &ldquo;Thank You Sir for stopping them!&rdquo;
```</p>

<p><code>forever</code> is part of <code>Control.Monad</code> as name says it is doing action forever ;) useful for stuff like workers or stuff that has to happen all the time it type is <code>forever :: Monad m =&gt; m a -&gt; m b</code>.</p>

<h2>Something useful, add channels</h2>

<p>Cool so now we have some basics how to spawn a thread using forkIO but to have something that we actually can use in real life we need to have some sort of communication. I wanna present something i feel would be useful in almost every haskell program. Channel combined with forkIO.</p>

<p>If you programmed ever in <code>Erlang</code> or <code>Go</code> you will know what i&rsquo;m talking about, channels are very similar to message passing. Basically it is a pipe that you can write to or read from in different threads/processes. This is one of the mechanism we can use to get data out of other threads. Because they are not sequential we can&rsquo;t predict normal vals  or time when they will be ready. One of the ways of getting response from threads are channels.</p>

<p>Channels are amazing because they are flexible :) And very natural. Basic principle is simple you write in one thread to the channel and read in other :)</p>

<p>But lets make an example that will show how powerful it is.</p>

<p>``` haskell chanz.hs</p>

<p>import Control.Concurrent
import Control.Monad (forever)
import Control.Concurrent.Chan</p>

<p>gossipGirl chan = do
  forever $ do</p>

<pre><code>gossip &lt;- readChan chan
putStrLn gossip
</code></pre>

<p>main :: IO ()
main = do
  putStrLn &ldquo;Lets do some gossips&rdquo;
  gossipChan &lt;&ndash; newChan &mdash; lets make new chan
  forkIO $ gossipGirl gossipChan &mdash; spawn gossipGirl
  writeChan gossipChan &ldquo;Garbage is garbage!&rdquo;
  writeChan gossipChan &ldquo;Garbage is garbage for reals!&rdquo;
  getLine
  putStrLn &ldquo;Thank You Sir for Info&rdquo;
```</p>

<p>Nice! What happens here :)  So new things are <code>newChan</code> that create channel which we will use to talk to our gossipGirl. <code>readChan</code> reads data from channel and <code>writeChan</code> writes stuff to channel. This is very simple :) So now lets generalize our worker into something that we can use in next mini tutorials. A worker.</p>

<h2>A Worker</h2>

<p>simple worker will take 1 channel as parameter and spawn thread this will help us in understanding how this whole thing works. (ofc if we don&rsquo;t got it by now :) )</p>

<p>``` haskell</p>

<p>import Control.Concurrent
import Control.Monad (forever)
import Control.Concurrent.Chan</p>

<p>worker chan foo = do
  forkIO $ forever $ foo chan</p>

<p>worker2 action = do
  forkIO $ forever action</p>

<p>gossipGirl chan = do</p>

<pre><code>gossip &lt;- readChan chan
putStrLn gossip
</code></pre>

<p>main :: IO ()
main = do
  putStrLn &ldquo;Lets do some gossips&rdquo;
  gossipChan &lt;&ndash; newChan &mdash; lets make new chan
  gossipChan2 &lt;&ndash; newChan &mdash; lets make new chan
  worker gossipChan gossipGirl &mdash; spawn gossipGirl</p>

<p>  writeChan gossipChan &ldquo;Garbage is garbage!&rdquo;
  writeChan gossipChan &ldquo;Garbage is garbage for reals!&rdquo;</p>

<p>  worker2 (gossipGirl gossipChan2) &mdash; woker2 2 girl!
  writeChan gossipChan2 &ldquo;Umkay&rdquo;
  writeChan gossipChan2 &ldquo;Yez!&rdquo;</p>

<p>  getLine
  putStrLn &ldquo;Thank You Sir for Info&rdquo;</p>

<p>```</p>

<p>Yes you can build workers as you want. I would not spend time on trying to build uber generic worker as it is usually custom and you don&rsquo;t need to spend much time to make one :). Usually you can have worker types for particular tasks eg. databasesWriter, logWriters, counters etc.</p>

<p>Now why would you all this forkIO stuff ? here is there reason. Cat simulation!</p>

<p>``` haskell cat.hs</p>

<p>import Control.Concurrent
import Control.Monad (forever)
import Control.Concurrent.Chan</p>

<p>data AskForMeow = GibFood | Smile</p>

<p>meowMe chan chanBack = do
  niceTry &lt;&ndash; readChan chan
  case niceTry of</p>

<pre><code>GibFood -&gt; writeChan chanBack "Meow"
Smile   -&gt; writeChan chanBack "No"
</code></pre>

<p>cat action = do
  forkIO $ forever action</p>

<p>main :: IO ()
main = do
  putStrLn &ldquo;Hey kitty kitty&rdquo;</p>

<p>  foodInputChan &lt;&ndash; newChan
  catOutputChan &lt;&ndash; newChan</p>

<p>  cat $ meowMe foodInputChan catOutputChan</p>

<p>  writeChan foodInputChan Smile
  response &lt;&ndash; readChan catOutputChan
  putStrLn response</p>

<p>  writeChan foodInputChan GibFood
  response' &lt;&ndash; readChan catOutputChan
  putStrLn response'</p>

<p>  getLine
  return ()
```</p>

<h1>Summary</h1>

<p>I hope this gives a little insight into <code>forkIO</code> and <code>channels</code> functions as You should use them in your code. It is super simple to add them, they work miracles and i love them. Yes you don&rsquo;t need to be expert on Kleisli arrows to use them ;).</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['if' the real game changer]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/02/21/if-the-real-game-changer/"/>
    <updated>2013-02-21T21:35:00+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/02/21/if-the-real-game-changer</id>
    <content type="html"><![CDATA[<p>Recently i was working on a project that is processing campaigns. I asked my self if I can improve it a bit, but not by refactoring existing code but by trying to approach it from a different angle.</p>

<h1>Observations</h1>

<p>I started making mind notes of things that i understand about system i&rsquo;m working with. I never had time to think about grammar of this and really get into it. The system has many parts but i thought it can be reproduced in for of language that is easy to parse and nice to work with. I think i might change my current solution into more LISP looking thing just to make it easier to parse.</p>

<h2>Observation 1</h2>

<p>Each campaign is a sequence of actions that happens one after another. So my initial thought was &ldquo;this is simple&rdquo;. We can represent it by list of actions like this</p>

<p>``` bash</p>

<p> [step] &ndash;> [step] &ndash;> [step]</p>

<p>```</p>

<p>But this is true only for simple campaigns and most of them are NOT like this :(</p>

<h2>Observation 2</h2>

<p>Most of the campaigns are built around key thing. This thing is making decisions! So if i can incorporate &ldquo;if&rdquo; i WIN !
Lets have a look</p>

<p>``` bash</p>

<pre><code>                     /&gt; [step]
                   (No)
                    |
</code></pre>

<p>  [step] &ndash;> [if a &lt; 5] &ndash; ( yes ) &ndash;> [step]</p>

<p>```</p>

<p>Yes! This was it, i think this is solution to all problems, ability to represent campaign as a sequence of steps mixed with if statements essentially abstract syntax tree of campaign.</p>

<h2>Observation 3</h2>

<p>It is not a tree&hellip;its more a graph. But AST will make it :] it is a programming language! So this was in my head and i did not had time to work on it&hellip; but today i decided to give a try and I made first impression of AST that we would need to have to make it work.</p>

<h1>AST</h1>

<p>I wrote simple grammar and made a parser of a very simple &ldquo;ify&rdquo; language. My language starts like this&hellip;</p>

<p><code>bash
-- Grammar
-- x is variable
-- a is artmetic thing aka number
-- n is actual number eg. 1
-- b is boolean
-- opa is arthmetic operator
-- opb is boolean operator
-- opr is comparison operator
-- S is statement
--  a   ::= x | n | - a | a opa a
--  b   ::= true | false | not b | b opb b | a opr a
--  opa ::= + | - | * | /
--  opb ::= and | or
--  opr ::= &gt; | &lt;
--  S   ::= x | x &lt;- a | S1; S2 | ( S ) | if b then S1 else S2
</code></p>

<p>This shows that the grammar is very simple, we can have assigments, operators to test and compare and ofc IF statement ;) this is our key to divnity!</p>

<p>Parser looks kinda ugly because i used parts of the code i wrote before and had i in different projects.</p>

<p>``` haskell
import System.Environment(getArgs)
import System.IO
import Control.Monad
import Text.ParserCombinators.Parsec
import Text.ParserCombinators.Parsec.Expr
import Text.ParserCombinators.Parsec.Language
import qualified Text.ParserCombinators.Parsec.Token as Token</p>

<p>&mdash;  Grammar
&mdash; x is variable
&mdash; a is artmetic thing aka number
&mdash; n is actual number eg. 1
&mdash; b is boolean
&mdash; opa is arthmetic operator
&mdash; opb is boolean operator
&mdash; opr is comparison operator
&mdash; S is statement
&mdash;  a   ::= x | n | &ndash; a | a opa a
&mdash;  b   ::= true | false | not b | b opb b | a opr a
&mdash;  opa ::= + | &ndash; | * | /
&mdash;  opb ::= and | or
&mdash;  opr ::= > | &lt;
&mdash;  S   ::= x | x &lt;&ndash; a | S1; S2 | ( S ) | if b then S1 else S2</p>

<p>data AExpr = Var String</p>

<pre><code>        | IntConst Integer
        | Neg AExpr
        | ABinary ABinOp AExpr AExpr
          deriving (Show)
</code></pre>

<p>data BExpr = BoolConst Bool</p>

<pre><code>        | Not BExpr
        | BBinary BBinOp BExpr BExpr
        | RBinary RBinOp AExpr AExpr
         deriving (Show)
</code></pre>

<p>data ABinOp = Add</p>

<pre><code>        | Subtract
        | Multiply
        | Divide
          deriving (Show)
</code></pre>

<p>data BBinOp = And | Or deriving (Show)
data RBinOp = Greater | Less deriving (Show)</p>

<p>data Stmt = Seq [Stmt]</p>

<pre><code>       | Assign String AExpr
       | If BExpr Stmt Stmt
       | Ident String
         deriving (Show)
</code></pre>

<p>languageDef =
   emptyDef { Token.commentStart    = &ldquo;/*&rdquo;</p>

<pre><code>        , Token.commentEnd      = "*/"
        , Token.commentLine     = "#"
        , Token.identStart      = letter
        , Token.identLetter     = alphaNum
        , Token.reservedNames   = [ "if"
                                  , "then"
                                  , "else"
                                  , "true"
                                  , "false"
                                  , "not"
                                  , "and"
                                  , "or"
                                  ]
        , Token.reservedOpNames = ["+", "-", "*", "/", "&lt;-"
                                  , "&lt;", "&gt;", "and", "or", "not"
                                  ]
        }
</code></pre>

<p>lexer = Token.makeTokenParser languageDef</p>

<p>identifier = Token.identifier lexer &mdash; parses an identifier
reserved   = Token.reserved   lexer &mdash; parses a reserved name
reservedOp = Token.reservedOp lexer &mdash; parses an operator
parens     = Token.parens     lexer &mdash; parses surrounding parenthesis:
integer    = Token.integer    lexer &mdash; parses an integer
semi       = Token.semi       lexer &mdash; parses a semicolon
whiteSpace = Token.whiteSpace lexer &mdash; parses whitespace</p>

<p>whileParser :: Parser Stmt
whileParser = whiteSpace >> statement</p>

<p>statement :: Parser Stmt
statement =   parens statement</p>

<pre><code>       &lt;|&gt; sequenceOfStmt
</code></pre>

<p>sequenceOfStmt =
   do list &lt;&ndash; (sepBy1 statement' semi)</p>

<pre><code>  return $ if length list == 1 then head list else Seq list
</code></pre>

<p>statement' :: Parser Stmt
statement' =   ifStmt</p>

<pre><code>        &lt;|&gt; assignStmt
        &lt;|&gt; identName            
</code></pre>

<p>ifStmt :: Parser Stmt
ifStmt =
   do reserved &ldquo;if&rdquo;</p>

<pre><code>  cond  &lt;- bExpression
  reserved "then"
  stmt1 &lt;- statement
  reserved "else"
  stmt2 &lt;- statement
  return $ If cond stmt1 stmt2
</code></pre>

<p>identName :: Parser Stmt
identName =
   do  varName &lt;&ndash; identifier</p>

<pre><code>   return $ Ident varName
</code></pre>

<p>assignStmt :: Parser Stmt
assignStmt =
   do var  &lt;&ndash; identifier</p>

<pre><code>  reservedOp "&lt;-"
  expr &lt;- aExpression
  return $ Assign var expr
</code></pre>

<p>aExpression :: Parser AExpr
aExpression = buildExpressionParser aOperators aTerm</p>

<p>bExpression :: Parser BExpr
bExpression = buildExpressionParser bOperators bTerm</p>

<p>aOperators = [ [Prefix (reservedOp &ldquo;&ndash;&rdquo;   >> return (Neg             ))          ]</p>

<pre><code>          , [Infix  (reservedOp "*"   &gt;&gt; return (ABinary Multiply)) AssocLeft]
          , [Infix  (reservedOp "/"   &gt;&gt; return (ABinary Divide  )) AssocLeft]
          , [Infix  (reservedOp "+"   &gt;&gt; return (ABinary Add     )) AssocLeft]
          , [Infix  (reservedOp "-"   &gt;&gt; return (ABinary Subtract)) AssocLeft]
           ]
</code></pre>

<p>bOperators = [ [Prefix (reservedOp &ldquo;not&rdquo; >> return (Not             ))          ]</p>

<pre><code>          , [Infix  (reservedOp "and" &gt;&gt; return (BBinary And     )) AssocLeft]
          , [Infix  (reservedOp "or"  &gt;&gt; return (BBinary Or      )) AssocLeft]
          ]
</code></pre>

<p>aTerm =  parens aExpression</p>

<pre><code>  &lt;|&gt; liftM Var identifier
  &lt;|&gt; liftM IntConst integer
</code></pre>

<p>bTerm =  parens bExpression</p>

<pre><code>  &lt;|&gt; (reserved "true"  &gt;&gt; return (BoolConst True ))
  &lt;|&gt; (reserved "false" &gt;&gt; return (BoolConst False))
  &lt;|&gt; rExpression
</code></pre>

<p>rExpression =
   do a1 &lt;&ndash; aExpression</p>

<pre><code>  op &lt;- relation
  a2 &lt;- aExpression
  return $ RBinary op a1 a2
</code></pre>

<p>relation =   (reservedOp &ldquo;>&rdquo; >> return Greater)</p>

<pre><code>      &lt;|&gt; (reservedOp "&lt;" &gt;&gt; return Less)
</code></pre>

<p>parseString :: String &ndash;> Stmt
parseString str =
   case parse whileParser &ldquo;&rdquo; str of</p>

<pre><code> Left e  -&gt; error $ show e
 Right r -&gt; r
</code></pre>

<p>parseFile :: String &ndash;> IO Stmt
parseFile file =
   do program  &lt;&ndash; readFile file</p>

<pre><code>  case parse whileParser "" program of
    Left e  -&gt; print e &gt;&gt; fail "parse error"
    Right r -&gt; return r
</code></pre>

<p>main = do
  args &lt;&ndash; getArgs
  ast &lt;&ndash; parseFile(head args)
  putStrLn $ show ast
```</p>

<p>But it works&hellip; we can parse. Now i have to make it more production ready and less unstable ;]. This is first attempt at this idea.  I need to expand grammar and think about it more then just few minutes. but i think it is a good start. Next step for me is to make better grammar and parser and move to building interpreter of this mini language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pong tests are wrong]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/06/07/pong-tests-are-wrong/"/>
    <updated>2012-06-07T19:09:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/06/07/pong-tests-are-wrong</id>
    <content type="html"><![CDATA[<p>After short talk with tomash and his gist <a href="https://gist.github.com/2871286">https://gist.github.com/2871286</a> with performance of vibe.d i decided to write this post.
In my opinion pong tests are wrong and do not show real &ldquo;performance&rdquo;. I said to him to check sinatra with thin handler not webrick and that showed ~1.6k req/sec which is not bad at all. While at my box it was ~900 req/sec so significantly less (Macbook Pro i5).</p>

<p>From this gist we can see that his vibe.d benchmark set pong test at 8425.85 req/sec (He used ab and i used httperf).</p>

<h1>Warp</h1>

<p>My first candidate in this competition of pong tests is haskell warp handler.</p>

<p>code:</p>

<p>``` haskell pingpong.hs</p>

<p>{&ndash;# LANGUAGE OverloadedStrings #&ndash;}</p>

<p>import Network.Wai
import Network.Wai.Handler.Warp
import Network.HTTP.Types (status200)
import Blaze.ByteString.Builder (copyByteString)
import qualified Data.ByteString.UTF8 as BU
import Data.Monoid
import Data.Enumerator (run_, enumList, ($$))</p>

<p>main = do</p>

<pre><code>let port = 8000
putStrLn $ "Listening on port " ++ show port
run port app
</code></pre>

<p>app req = return $</p>

<pre><code>case pathInfo req of
    ["pong"] -&gt; pong
    x -&gt; index x
</code></pre>

<p>pong = ResponseBuilder status200 [ (&ldquo;Content-Type&rdquo;, &ldquo;text/plain&rdquo;) ] $ mconcat $ map copyByteString</p>

<pre><code>[ "pong" ]
</code></pre>

<p>index x = ResponseBuilder status200 [(&ldquo;Content-Type&rdquo;, &ldquo;text/html&rdquo;)] $ mconcat $ map copyByteString</p>

<pre><code>[ "&lt;p&gt;Hello from ", BU.fromString $ show x, "!&lt;/p&gt;"
, "&lt;p&gt;&lt;a href='http://no-fucking-idea.com/pong'&gt;pong&lt;/a&gt;&lt;/p&gt;\n" ]
</code></pre>

<p>```</p>

<p>it is semi rack like syntax ;)</p>

<h1>Benchmark results</h1>

<p>I prepared results to show how big lie is pong test. Because in this type of test / showoff all you test is how fast really you can accept connections. Single thread will always win :). But lets look at results:</p>

<ul>
<li>Multi threaded &ndash; 50 threads   &ndash; Request rate: 858.8 req/s (1.2 ms/req) BOOO!!!!</li>
<li>Multi threaded &ndash; 4 threads ( on for each core ) &ndash; Request rate: 10020.8 req/s (0.1 ms/req) Vibe.d die!!! Yeah!!!!</li>
<li>Single threaded &ndash; default compilation  &ndash; Request rate: 13584.1 req/s (0.1 ms/req) Mother of God!</li>
</ul>


<p>Tested with <code>httperf --uri=/ --port=8000 --num-calls=10000 --num-conns=20</code> httperf command.</p>

<h1>Summary</h1>

<p>You can test it on your own, i did it on latest 7.4.1 Ghc from haskell platform on OSX 10.7. And post reply with your results :) maybe i missed something. Code, scripts to build and run are in repository <a href="https://github.com/JakubOboza/haskell-warp-pong-test">https://github.com/JakubOboza/haskell-warp-pong-test</a>.</p>

<h2>So how to test ?!</h2>

<p>I think you should test your application in default environment so with db behind it, but anyone in this scenario can say it is testing performance of db. But everyday&hellip; users are really testing performance of our db ;>&hellip; or the weakest of the elements in chain. So if your db / rendering engine is performing at level of 50 req / sec fast app handler will not turn it into 5000 req / sec.</p>
]]></content>
  </entry>
  
</feed>
