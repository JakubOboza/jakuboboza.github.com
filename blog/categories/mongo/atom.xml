<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mongo | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/mongo/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2019-07-10T16:55:36+01:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Designing todo app backend using redis and mongodb]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/07/26/designing-todo-app-backend-using-redis-and-mongodb/"/>
    <updated>2012-07-26T18:06:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/07/26/designing-todo-app-backend-using-redis-and-mongodb</id>
    <content type="html"><![CDATA[<h2>side note</h2>

<p>Upgrading octopress is a @!#!@pain! :></p>

<h1>What is this post about :)</h1>

<p>Long time nothing new here so i will glue something together about stuff that we were talking about today with my friend Jarek. We talked about building backend for Todo app :). Yes simple todo app. How to build scalable backend. So my initial thought was &ldquo;how i would design it in different databases&rdquo;. (i&rsquo;m taking only about data model)</p>

<h2>Requirements</h2>

<p>What we know:</p>

<ul>
<li>User has some sort of id. (number, email, hash of something)</li>
<li>We need to be able to have different todo lists</li>
<li>User can choose his todo list and see tasks ( obvious )</li>
<li>User can tag tasks!</li>
<li>User can query tasks in list by tags</li>
<li>User can see all tags.</li>
</ul>


<h1>Design using Redis</h1>

<p>How to do it with redis ? :)</p>

<p>First few facts i assumed at start. Single todo task has body and timestamps [created_at, updated_at] and base for key will be phrase &ldquo;todoapp&rdquo;.</p>

<p>So lets start with user and his list of todo lists :). This gives us first key</p>

<p><code>bash
todo:&lt;user_id&gt;:todolist:next =&gt; auto incrementing counter for lists id
todo:&lt;user_id&gt;:todolists =&gt; [LIST]
todo:&lt;user_id&gt;:todolist:&lt;todo_list_id&gt;:name =&gt; list name
</code></p>

<p>Here we have two keys, first is  list id counter that we will bump to get new list counter :), second is list of todolists ids. Why do it this way ? Well people can add and remove todo lists.</p>

<p>Ok so how to create new list ?</p>

<p><code>bash example
redis 127.0.0.1:6379&gt; INCR todo:kuba:todolist:next
(integer) 1
redis 127.0.0.1:6379&gt; RPUSH todo:kuba:todolists 1
(integer) 1
redis 127.0.0.1:6379&gt; LRANGE todo:kuba:todolists 0 -1
1) "1"
redis 127.0.0.1:6379&gt; SET todo:kuba:todolist:1:name "things to do"
OK
</code>
Hey ! we just added id of our first list to list of our todo lists (lots of list word here!). Ok so now lets add a task.</p>

<p>list:
<code>bash
todo:&lt;user_id&gt;:todolist:&lt;todo_list_id&gt;:next =&gt; auto incrementing counter for tasks id
todo:&lt;user_id&gt;:todolist:&lt;todo_list_id&gt; =&gt; [LIST]
</code>
and task:
<code>bash
todo:&lt;user_id&gt;:task:&lt;task_id&gt; =&gt; content of task eg. "finish blog post"
todo:&lt;user_id&gt;:task:&lt;task_id&gt;:created_at =&gt; epoch time when it was created handled by app
todo:&lt;user_id&gt;:task:&lt;task_id&gt;:updated_at =&gt; epoch time when it was last updated handled by app
</code></p>

<p>Ok so how to i add task to my list
<code>bash adding task
redis 127.0.0.1:6379&gt; INCR todo:kuba:todolist:1:next
(integer) 1
redis 127.0.0.1:6379&gt; LPUSH todo:kuba:todolist:1 1
(integer) 1
redis 127.0.0.1:6379&gt; SET todo:kuba:task:1 "finish blog post"
OK
redis 127.0.0.1:6379&gt; SET todo:kuba:task:1:created_at  1343324314
OK
redis 127.0.0.1:6379&gt; SET todo:kuba:task:1:updated_at  1343324315
OK
</code>
And we have our first task in. How do we get tasks from out todo list simple!
<code>bash peeking task
redis 127.0.0.1:6379&gt; LRANGE todo:kuba:todolist:1 0 -1
1) "1"
redis 127.0.0.1:6379&gt; GET todo:kuba:task:1
"finish blog post"
redis 127.0.0.1:6379&gt; GET todo:kuba:task:1:created_at
"1343324314"
</code>
Ok so now we have very simple todo lists with tasks, well at least overview. Ofc you can use sets for todo lists or zsets but lets stay with lists to keep it simple for now.</p>

<p>How ro remove task from the list ?
<code>bash removing task
redis 127.0.0.1:6379&gt; LREM todo:kuba:todolist:1 -1 1
(integer) 1
redis 127.0.0.1:6379&gt; LRANGE todo:kuba:todolist:1 0 -1
(empty list or set)
</code>
Good, now we can add tasks, remove tasks, same sotry with adding todo lists and removing todo lists.
One last thing is to add tags!. Simply here each task will have list of tags and each tag will have list of tasks related with.
<code>bash
todo:&lt;user_id&gt;:task:&lt;task_id&gt;:tags =&gt; [LIST]
todo:&lt;user_id&gt;:tag:&lt;tag&gt;:tasks =&gt; [LIST]
</code>
So how we will add tags to tasks ? Simple!
<code>bash tagging
redis 127.0.0.1:6379&gt; LPUSH todo:kuba:task:1:tags "redis"
(integer) 1
redis 127.0.0.1:6379&gt; LPUSH todo:kuba:task:1:tags "design"
(integer) 2
redis 127.0.0.1:6379&gt; LPUSH todo:kuba:tag:redis:tasks 1
(integer) 1
redis 127.0.0.1:6379&gt; LPUSH todo:kuba:tag:design:tasks 1
(integer) 1
redis 127.0.0.1:6379&gt; LRANGE todo:kuba:tag:design:tasks 0 -1
1) "1"
redis 127.0.0.1:6379&gt; LRANGE todo:kuba:task:1:tags 0 -1
1) "design"
2) "redis"
</code>
This example shows what we need to do to tag a task with something and how to peek tasks tagged with it. Why we have both lists ? To make it fast while searching. If user will click on particular tag like &ldquo;redis&rdquo; you want to get it O(1) time not O(N) after searching all keys. And same the other way, normal ui will pull task test, when it was created and tags to display so we want to have this data ready.</p>

<p>This is whole design for the todo app. We have 8 types of keys.  Things like pagination, calculating time are all left to app layer. Important thing is that i scope everything to user key / id. This is because i want to isolate each user space easy. Each user in his own space will have short lists, there is no danger of &ldquo;ultimate&rdquo;  non splittable lists.</p>

<h1>Design using Mongodb</h1>

<p>Well this case upfront is easier to grasp because for each list we can use single document or collection of documents lets talk about both solutions.</p>

<h2>Todolist = Document</h2>

<p>In this example we will use built in &ldquo;array&rdquo; operators</p>

<p>``` javascript  creating</p>

<blockquote><p>db.todolists.save({name: &ldquo;House work&rdquo;, tasks: []})
&ldquo;ok&rdquo;
db.todolists.find({name: &ldquo;House work&rdquo;})
[
  {   &ldquo;name&rdquo; : &ldquo;House work&rdquo;,   &ldquo;_id&rdquo; : {   &ldquo;$oid&rdquo; : &ldquo;50118742cc93742e0d0b6f7c&rdquo;   },</p>

<pre><code>  "tasks" : [   ]   }
</code></pre>

<p>]
```</p></blockquote>

<p>So lets add a task :)
``` javascript
db.todolists.update({name: &ldquo;House work&rdquo;},{$push:{&ldquo;tasks&rdquo;:{&ldquo;name&rdquo;:&ldquo;finish blog post&rdquo;, &ldquo;tags&rdquo;:[&ldquo;mongo&rdquo;] } } })
&ldquo;ok&rdquo;</p>

<blockquote><blockquote><p>db.todolists.find({name: &ldquo;House work&rdquo;})
[
  {   &ldquo;name&rdquo; : &ldquo;House work&rdquo;,   &ldquo;_id&rdquo; : {   &ldquo;$oid&rdquo; : &ldquo;50118742cc93742e0d0b6f7c&rdquo;   },</p>

<pre><code>  "tasks" : [  
   {   "name" : "finish blog post",   "tags" : [   "mongo" ]   }
  ]   }
</code></pre>

<p>]
```</p></blockquote></blockquote>

<p>this will create empty todo list with name &ldquo;House work&rdquo; of course this way we will not omit building sub lists of tags etc, we have to build in a same way like in redis but as part of document. The story is exactly the same like above in redis. Mongodb lets us query nested documents and this will enable us to skip some of the extra &ldquo;lists&rdquo; while doing search.</p>

<p>Lets try it out how to find out mongo tagged entries?</p>

<p>``` javascript find by tag</p>

<blockquote><p>db.todolists.find({&ldquo;tasks.tags&rdquo;: { $in : [&ldquo;mongo&rdquo;] } })</p></blockquote>

<p>[
  {   &ldquo;name&rdquo; : &ldquo;House work&rdquo;,   &ldquo;_id&rdquo; : {   &ldquo;$oid&rdquo; : &ldquo;50118742cc93742e0d0b6f7c&rdquo;   },</p>

<pre><code>  "tasks" : [ 
    {   "name" : "finish blog post",   "tags" : [   "mongo" ]   }
  ]   }
</code></pre>

<p>]
```</p>

<p>This way we can find whole todolist with task that contains tag &ldquo;mongo&rdquo; but after that we will have to work out from the document  in app the task that we are interested int. Using it like this we will have a document with structure like this
``` javascript  todo list structure
{
 user: &ldquo;user id&rdquo;,
 name: &ldquo;<name>&rdquo;,
 tasks: [
   {</p>

<pre><code>text : "todo text",
tags : [
  "Tag1", "Tag2"
]
created_at : Time,
updated_at : Time
</code></pre>

<p>   }
 ]
}
```
Using redis we could wrapp stuff into MULTI command while using mongodb &ldquo;array&rdquo; command we are a bit cowboishing. They could remove wrong stuff in we will not be cautious :). (well same in redis!) Big plus of Mongodb is native time type!</p>

<h2>Todolist = many documents</h2>

<p>Using this approach we can leverage more of our stuff on mongodb search in this approach each task will be a different document.
With structure like this
``` javascript task structure
{
  todo_list: &ldquo;todo list id&rdquo;,
  user: &ldquo;user id&rdquo;,
  text: &ldquo;todo text&rdquo;,
  tags: [&ldquo;Tag1&rdquo;, &ldquo;Tag2&rdquo;]
}</p>

<p><code>
This way we will have a lot of documents, more disk space consumption and still we will have to have second collection with with objects with structure like this
</code> javascript structure of todolist
{
  todo_list: &ldquo;todo list id&rdquo;,
  name: &ldquo;todo list name&rdquo;,
  user: &ldquo;user id&rdquo;,
  // tasks: [Tasks OBjectID Array] you could have this and remove todo_list id from tasks choice is yours :)
}
<code>``
And this way we can use</code>find` tool very easy and get documents fast.</p>

<h1>Summary</h1>

<p>All of this solutions have some pros and cons, mongodb excels better when documents are bigger (limit is set on 16 mb per document) than loads of small documents (massive waste of space). Solution in redis is really fast and if you will implement lazy loading it will be very fast.  You can adjust this designs to your situation by changing lists to sets etc. The place where redis OWNS mongodb in this context is &ldquo;strucutres&rdquo; and we use a lot of them to store data like this, lists sets, zsets. Implementing priority list in mongodb will be totally custom solution while in redis we can just use zset.</p>

<p>This is just my point of view on this. I will supply some code to cover it more in part two. This is next problem, i&rsquo;m sure solution in mongodb using things like mongoid <a href="http://mongoid.org">http://mongoid.org</a> will be much more developer friendly then building things &ldquo;rawly&rdquo; in redis hiredis client.</p>

<p>btw i jsut wrote this from &ldquo;top of my head&rdquo; so it may contain typos and i&rsquo;m sure keys, structures can be optimized :) This is just to open discussion with my friend :)</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building ORM/ODM using virtus for MongoDB part 1]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1/"/>
    <updated>2012-04-12T21:07:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1</id>
    <content type="html"><![CDATA[<p>This blog post is start of series on building ORM/ODM libraries for Mongodb in different languages. I am a big fan of mongoid <a href="http://mongoid.org">http://mongoid.org</a> great Ruby ODM for mongodb. But i am even bigger fan of Mongodb <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>. Some time ago i saw post by my friend from <a href="http://www.lunarlogicpolska.com/">http://www.lunarlogicpolska.com/</a> about <code>virtus</code> <a href="http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html">http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html</a> (it&rsquo;s really worth reading) and i thought &ldquo;it&rsquo;s nice&rdquo;. Today i have spent two hours to cook this starter project because i want to learn more about <code>virtus</code> and building ODM&rsquo;s ORM&rsquo;s is not so common topic across web.</p>

<h1>Aim</h1>

<p>Building fully featured ODM in two hours from scratch is more then you can expect from me. Goal if first part is to make something that will map ruby PORO&rsquo;s to mongodb collections, be able to save them, find one or many in database and destroy. This looks like a lot but we will do it slowly and the implementation will be very basic. Our ODM will be named &ldquo;Muppet&rdquo;. Name describes the project :).</p>

<h3>Virtus</h3>

<p>Virtus handles properties for Plain Old Ruby Objects and this is all we need to have. This eliminates a lot of boilerplate code we would have to write to make anything work. PORO Powah!</p>

<h3>Mongo</h3>

<p><code>mongo</code> is a Mongodb native ruby driver. It has really good api and is easy to use. For most things in this post i just <code>proxied</code> calls to it :).</p>

<h3>Database!</h3>

<p>Be sure to have mongodb working ;).</p>

<h1>First step: Building a gem</h1>

<p>All about building gem you can find in my previous blog post here <a href="http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/">http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/</a>
Be sure to add rspec :) i used it to describe tests for this project.</p>

<h1>Second step: Describing api</h1>

<p>I like do develop things in TDD/BDD style so first thing for me description of api i wanted to implement during this tutorial.
All this specs are stripped to minimum to enhance readability.
``` ruby spec/muppet_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>class User
  include Virtus
  include Muppet</p>

<p>  attribute :name, String
  attribute :age, Integer
  attribute :birthday, DateTime
end</p>

<p>describe Muppet do</p>

<p>  describe &ldquo;#configuration&rdquo; do</p>

<pre><code>it "should be configurable" do
  lambda do
    Muppet.configure \{ \{
      host: "localhost",
      port: 27017,
      database: "test"
    }}
    Muppet.config.should be_a(Hash)
    Muppet.config[:host].should eql("localhost")
  end.should_not raise_error
end

it "should by default point to localhost:27017" do
  lambda do
    Muppet.config[:host].should eql("localhost")
    Muppet.config[:port].should eql(27017)
  end
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#connection&rdquo; do</p>

<pre><code>it "should connect to mongodb" do
  lambda do
    Muppet.connect!
  end.should_not raise_error
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#inserting&rdquo; do</p>

<pre><code>it "should insert values to database" do
  pending
  lambda do
    user = User.new(name: "Jakub", age: 27 )
    user.save.should be_true
  end.should change(User, :count)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#quering&rdquo; do</p>

<pre><code>it "should query all documents from collection" do
  pending
  User.find_one.should be_a(User)
end

it "should query first document from collection" do
  pending
  users = User.find
  users.should be_a(Array)
  users[0].should be_a(User)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#destroy&rdquo; do</p>

<pre><code>it "should destroy document" do
  pending
  lambda do
    User.find_one.destroy
  end.should change(User, :count).by(-1)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p><code>``
I defined them in order how i wanted to implement this. First configuration and connection to db. Next inserting and querying and destroying as last thing. Also at top i have simple User object with</code>virtus<code>and</code>muppet` included.</p>

<h1>Third step: layouting Muppet!</h1>

<p>At this moment we should have ready specs, that fail hard throwing errors on unknown tokens. Its good.
What i did is simple <code>lib/muppet.rb</code> defines the module we will include into out PORO&rsquo;s.
``` ruby muppet.rb
require &ldquo;mongo&rdquo;
require &ldquo;muppet/version&rdquo;
require &ldquo;muppet/setup&rdquo;</p>

<p>module Muppet
  extend Muppet::Setup
end
<code>
in `lib/muppet/` we will have components of our project. I we already know we will start with setup as defined in `muppet.rb` so lets create file `lib/muppet/setup` and configuration and connection to mongodb.
</code> ruby lib/muppet/setup.rb
module Muppet
  module Setup</p>

<pre><code>@@configuration = {
  host: "localhost",
  port: 27017,
  database: "test"
}

def configure(&amp;user_config)
  @@configuration.merge!(user_config.call)
end

def config
  @@configuration
end

def connect!
  @@connection = Mongo::Connection.new(@@configuration[:host],
    @@configuration[:port])
  @@database = @@connection.db(@@configuration[:database])
end

def database
  @@database
end

def connection
  @@connection
end
</code></pre>

<p>  end
end
<code>``
Here i defined default configuration and few method to access vital part of our config like</code>database<code>,</code>connection<code>. Most important part is</code>connect!<code>this method uses mongo gem to establish connection to mongodb store it into connection variable and set the database we will be working on. I wanted to make few things explicit so i used some name redundancy. (later on i learned that i did not even need</code>config` method)</p>

<p>With this working we can run out rspecs and if mongodb is up we should see all green and few yellows! Good it works!</p>

<h1>Forth step: support for quering and inserting</h1>

<p>Now lets remove pending marks from specs that  are in &ldquo;describes&rdquo; quering and inserting. This will be the heart of our ODM. We will define how he should save and load object from database. Before this we will have to update out <code>lib/muppet.rb</code> to include things we will use.
``` ruby lib/muppet.rb
require &ldquo;mongo&rdquo;
require &ldquo;muppet/version&rdquo;
require &ldquo;muppet/setup&rdquo;
require &ldquo;muppet/document&rdquo;</p>

<p>module Muppet
  extend Muppet::Setup
  include Muppet::Document::InstanceMethods</p>

<p>  def self.included(base)</p>

<pre><code>base.extend( Muppet::Document::ClassMethods )
</code></pre>

<p>  end</p>

<p>end
<code>
Ok many new things. I created `lib/muppet/document.rb` module with the stuff we will put into class and instance definitions in the moment of inclusion. As we can see in definition of `User` in our test cases we will `include Muppet` so all the instance methods like (save, destroy) will have to be defined in separated module then class methods like (find_one, find). In `document.rb` we  can see how it is implemented.
</code> ruby lib/muppet/document.rb
module Muppet
  module Document</p>

<pre><code>module ClassMethods

  def collection_name
    self.to_s
  end

  def collection
    Muppet.database.collection(collection_name)
  end

  def find_one(opts = {})
    result = collection.find_one(opts)
    return nil unless result
    self.new(result)
  end

  def find(opts = {})
    results = collection.find(opts)
    results.map{|result| self.new(result) }
  end

  def count
    collection.count
  end

end

module InstanceMethods

  def save
    self.class.collection.insert(self.attributes)
  end

  def destroy
    self.class.collection.remove(self.attributes)
  end

end
</code></pre>

<p>  end
end
```
I could not think of a way to implement it in a more simple way. We have to &ldquo;sections&rdquo; first is class methods where we define</p>

<ul>
<li>collection_name this method says to us what is the collection name (we can override it in model)</li>
<li>collection uses database to return this collection object for us to use.</li>
<li>find_one, find, count are methods that we proxy in a dirty explicit way (but without using method missing) things to mongo native driver.</li>
</ul>


<p>Only thing we do here is to wrap things that we get back into <code>self.new</code> object. So we can mimic AR/Mongoid api and when doing User.find we will get back array of all users. not array of hashes :).</p>

<p>Instance methods are only two <code>save</code> and <code>destroy</code> save is raw and simple, takes all attributes from using virtues and saves them using mongo native driver. destroy acts in the same way.</p>

<p>Now we can run the specs and see all is green. We have a basic ODM where we can add documents, map and query them to PORO&rsquo;s and remove.</p>

<h1>Summary</h1>

<p>I really enjoyed writing this code and blog post :).
You can find code for this blog post here <a href="https://github.com/JakubOboza/muppet">https://github.com/JakubOboza/muppet</a></p>

<p>This code is buggy and even specs needs to be enhanced but this is a good start for building new features on top of it. In  future parts i want to implement, updating, proxy objects, relations, embedded objects, dirty tracking(probably using <a href="https://github.com/solnic/virtus-dirty_tracking">https://github.com/solnic/virtus-dirty_tracking</a>) and few other mechanism that will enable us to make a fully functional ODM from &ldquo;Muppet&rdquo;</p>

<p>-Cheers</p>
]]></content>
  </entry>
  
</feed>
