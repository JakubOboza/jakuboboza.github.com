<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: erlang | No Fucking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2013-02-21T22:01:45+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building FFI extensions in Erlang]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/02/05/building-ffi-extensions-in-erlang/"/>
    <updated>2013-02-05T20:20:00+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/02/05/building-ffi-extensions-in-erlang</id>
    <content type="html"><![CDATA[<p>I'm preparing to upgrade my old humidity/temperature meeeeeter solution with raspberry pi. While it is easy to read stuff in C i don't want to build whole app in C because i know how this can end when you are 1500 - 3000 km from home and app stops to respond and the only living person to fix it is your Cat Haskell. So i want to have everything in <code>Erlang</code> and only small module reading stuff in C.</p>

<h1>Ports</h1>

<p>Firt thought was to build small C program that will check stuff periodically or just "check stuff" in SHT1x and just print it out to output. So my first attempt was</p>

<p>For the example here i will use <code>/proc/cpuinfo</code></p>

<p>``` erlang
-module(mycpuinfo).
-export([info/0]).</p>

<p>-define(CMD, "cat /proc/cpuinfo").</p>

<p>info() -></p>

<pre><code>Port = open_port({spawn, ?CMD}, [{packet, 1}, use_stdio, exit_status, binary]),
port_command(Port, &lt;&lt;&gt;&gt;),
receive
</code></pre>

<p>  {Port, {data, Response}} -></p>

<pre><code>  {ok, {cpuinfo, Response}};
</code></pre>

<p>  _  -> error</p>

<pre><code>end.
</code></pre>

<p>```</p>

<p>Nothing super special, except that raspberry pi is not really cool with different packet sizes and it can for example not read whole input properly. I observed some issues with it. So i decided to explore more FFI.</p>

<h1>erl_interface</h1>

<p>The thing i found is called erl_interface and it is designed for FFI. This is it! What you do is you build process like thing in C and micro module in erlang that handles this. (It is just to make it look nice). But there are few glitches!</p>

<p>This is my module posting back "pong" on "ping" message</p>

<p>``` c lolpong.c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;netinet/in.h></h1>

<h1>include "erl_interface.h"</h1>

<h1>include "ei.h"</h1>

<h1>define BUFFSIZE 100</h1>

<p>int main(int argc, char** argv){</p>

<p>  int fd;
  unsigned char buf[BUFFSIZE];
  ErlMessage emsg;
  int msg_type;
  ETERM <em>fromp, </em>argp, *rsp;</p>

<p>  erl_init(NULL, 0);</p>

<p>  if(erl_connect_init(1, "cookie",  0) == -1){</p>

<pre><code>erl_err_quit("init failed");
</code></pre>

<p>  }</p>

<p>  if((fd = erl_connect("emu@raspberrypi")) &lt; 0 ){</p>

<pre><code>erl_err_quit("Emus could won war with australia but you still can't connect to emu :(");
</code></pre>

<p>  }</p>

<p>  while(1){</p>

<pre><code>msg_type = erl_receive_msg(fd, buf, BUFFSIZE, &amp;emsg);
if(msg_type == ERL_TICK){
  /* Emu is checking australian defences, Polish people are safe! so I can ignore this */
}
else if(msg_type == ERL_ERROR){
  /* Huston we have an Emu! */
  break;
}
else {
  /* our pro msg */
  fromp = erl_element(1, emsg.msg);
  argp = erl_element(2, emsg.msg);
  rsp = erl_format("pong");
  erl_send(fd, fromp, rsp);


  erl_free_term(emsg.from);
  erl_free_term(emsg.msg);
  erl_free_term(fromp);
  erl_free_term(argp);
  erl_free_term(rsp);
}
</code></pre>

<p>  }</p>

<p>  return 0;</p>

<p>}
```</p>

<p>First of all complexity goes p fast. You have to think about many things. Here i know that my host is called "emu@raspberrypi" and this is actually process that runs so if you will not remember about freeing memory you will fast learn what means "memory leak".</p>

<p>But most important thing is how to build this and run.</p>

<h2>Building</h2>

<p>My make file looks like this</p>

<p>``` make</p>

<p>all:
  gcc -o lolpong -I/usr/lib/erlang/lib/erl_interface-3.7.7/include -L/usr/lib/erlang/lib/erl_interface-3.7.7/lib lolpong.c -lerl_interface -lei -pthread
```</p>

<p>It is important to remember about -pthread.</p>

<h2>Running everything.</h2>

<p>No how to make everything work... we need module</p>

<p>``` erlang lolpong.erl
-module(lolpong).
-export([ping/0]).</p>

<p>ping() -></p>

<pre><code>{any, 'c1@raspberrypi'} ! {self(), ping},
receive
</code></pre>

<p>  R -> {ok, R}</p>

<pre><code>end.
</code></pre>

<p>````
This c1 is for c extension 1 not super obvious :) cN will be for c extension N =).</p>

<p>And finally we need to spawn our node...
<code>bash
Î»  erl -sname "emu" -setcookie "cookie"
</code>
This spawns node named emu@raspberrypi on my mini box with cookie "cookie" now ... i said finally... but it was not final step.</p>

<p>Final step is to run out <code>lolpong</code> binary. It is important to run it after node is up because it will try to connect to this node.</p>

<p><code>bash
./lolpong
</code></p>

<p>Now we can run in our erlang shell check if everything works!</p>

<p><code>erlang
(emu@raspberrypi)1&gt; lolpong:ping().
{ok,pong}
</code>
Works!</p>

<h1>Summary</h1>

<p>It is good fun, now i need to wait for the parts to assemble everything and build rest of application :)</p>

<p>Cheers!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making request to REST resources in Erlang]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/01/22/making-request-to-rest-resources-in-erlang/"/>
    <updated>2013-01-22T19:42:00+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/01/22/making-request-to-rest-resources-in-erlang</id>
    <content type="html"><![CDATA[<p>Recently with friends we are building side project called "Midway" its a simple battleship server. The whole point of the game is to create a client and defeat other people maps! winner takes it all! The person with lowest number of hits/won-map wins! This is again a not to self type of entry. So i created some placeholder libs to building clients and while working through Erlang placeholder i made some notes on stuff.</p>

<h1>Making request</h1>

<p>So first of all i used builtin inets for making requests.
So first thing to do is to start inets!</p>

<p><code>erlang
inets:start().
</code></p>

<p>Ok i generalized using httpc to really simple thing</p>

<p>``` erlang
post(URL, ContentType, Body) -> request(post, {URL, [], ContentType, Body}).
get(URL)                     -> request(get,  {URL, []}).</p>

<p>request(Method, Body) -></p>

<pre><code>httpc:request(Method, Body, [], []).
</code></pre>

<p>```</p>

<p>So if you will a call you will get something like this</p>

<p>``` erlang
httpc:request(get, {"http://www.youtube.com/watch?v=JvxG3zl_WhU", []}, [], []).
{ok,{{"HTTP/1.1",200,"OK"},</p>

<pre><code> [{"cache-control","no-cache"},
  {"date","Tue, 22 Jan 2013 20:36:16 GMT"},
  {"server","gwiseguy/2.0"},
  {"content-length","221233"},
  {"content-type","text/html; charset=utf-8"},
  {"expires","Tue, 27 Apr 1971 19:44:06 EST"},
  {"set-cookie",
   "PREF=f1=50000000; path=/; domain=.youtube.com; expires=Fri, 20-Jan-2023 20:36:15 GMT"},
  {"set-cookie",
   "use_hitbox=d5c5516c3379125f43aa0d495d100d6ddAEAAAAw; path=/; domain=.youtube.com"},
  {"set-cookie",
   "VISITOR_INFO1_LIVE=99hU0tGtAng; path=/; domain=.youtube.com; expires=Thu, 19-Sep-2013 20:36:15 GMT"},
  {"set-cookie",
   "recently_watched_video_id_list=dda4a4415949369ee6eb305306b40e47WwEAAABzCwAAAEp2eEczemxfV2hV; path=/; domain=.youtube.com"},
  {"x-frame-options","SAMEORIGIN"},
  {"x-content-type-options","nosniff"},
  {"p3p",
   "CP=\"This is not a P3P policy! See http://support.google.com/accounts/bin/answer.py?answer=151657&amp;hl=en-GB for more info.\""},
  {"x-xss-protection","1; mode=block"}],
 [60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,60,104,
  116,109,108,32,108,97,110|...]}}
</code></pre>

<p>```</p>

<p>One more thing i added was extracting body of the response</p>

<p><code>erlang
  response_body({ok, { _, _, Body}}) -&gt; Body.
</code></p>

<p>So after calling it on response we can get body</p>

<p>``` erlang
  Response = httpc:request(get, {"http://www.youtube.com/watch?v=JvxG3zl_WhU", []}, [], []).
  Body = response_body(Response).
  io:format("~s~n",[Body]).
  &lt;!DOCTYPE html><html lang="en"><head> ...</p>

<p>```</p>

<h1>Parsing Json</h1>

<p> So next thing to do was to parse json :)  for this pupose use two libs mochijson2 or jiffy.</p>

<h2>Mochijson2</h2>

<p>So this one is easy to find and use. All you need to do is grab file from mochiweb project and compile it :) it has two method encode and decode.</p>

<p><code>erlang
mochijson2:decode(STUFF).
mochijson2:endcode(STUFF).
</code>
One thing worth mentioning is that it expects input in a bit structured format.</p>

<p>So typycaly it will use "struct" symbol for json "{}" objects.</p>

<p><code>erlang
{struct, [{name, &lt;&lt;"jakub"&gt;&gt;}, {age, 27}, {ids, [1,2]}]}
</code>
So array in json will be list but object will have to be in tuple with struct. It is awkward at first but you can get used to it. but there is easier thing to use...</p>

<h2>Jiffy</h2>

<p>This! There is a good example on main page.</p>

<p><code>erlang
Eshell V5.8.2  (abort with ^G)
1&gt; jiffy:decode(&lt;&lt;"{\"foo\": \"bar\"}"&gt;&gt;).
{[{&lt;&lt;"foo"&gt;&gt;,&lt;&lt;"bar"&gt;&gt;}]}
2&gt; Doc = {[{foo, [&lt;&lt;"bing"&gt;&gt;, 2.3, true]}]}.
{[{foo,[&lt;&lt;"bing"&gt;&gt;,2.3,true]}]}
3&gt; jiffy:encode(Doc).
&lt;&lt;"{\"foo\":[\"bing\",2.2999999999999998224,true]}"&gt;&gt;
</code></p>

<p>This shows how nice it is to use :D no 'struct' pure love!</p>

<p>You can get it here <a href="https://github.com/davisp/jiffy">https://github.com/davisp/jiffy</a></p>

<h1>Summary</h1>

<p>This is just note to self to not be checking up docs looking for this stuff again :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang: digraph]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/11/20/erlang-digraph/"/>
    <updated>2012-11-20T19:20:00+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/11/20/erlang-digraph</id>
    <content type="html"><![CDATA[<ul>
<li>This is more "note to self" type of post rather than tutorial thing.</li>
<li>It's hard to write blog posts when you are trying to take over the world :)</li>
</ul>


<h1>Why ?</h1>

<p>Recently in "professor Toons" :)  computer club was a task that was ideal to solve as graph. It was one of this "find path" tasks. Yesterday just before going to bed I thought "Why not solve it in Erlang".  And this are my thoughts about erlang digraph: library.</p>

<h2>Task</h2>

<p>First of all <a href="http://erldocs.com/">http://erldocs.com/</a> is the way to go when working with documentation.</p>

<p>Second "the Task". It had two parts, first was to load xml file with songs and second was to build graph and find playlist between two songs having in mind that for each song following has to start with the same letter that first ended.</p>

<p>example.</p>

<p>if you have song list:
ABC
CBA
BAC
ACB
BBA</p>

<p>And you want to find playlist from ABC to BAC you will get ABC -> CBA -> ACB -> BAC. Easy</p>

<h2>Digraph</h2>

<p>Digraph API is quite nice but there are few things you have to have in mind.</p>

<ul>
<li>Digraph is imperative graph!</li>
<li>You need to pass vertices to get_path!</li>
<li>Graph with loads of edges can be quite big :D</li>
</ul>


<p>To create empty graph you call :new/0</p>

<p><code>erlang
Graph = digraph:new().
</code></p>

<p>To add node to graph you call :add_vertex/2</p>

<p><code>erlang
Data = {Value1, Value2, Value3},
digraph:add_vertex(Graph, Data).
</code></p>

<p>To add edge to graph you call :add_edge/3</p>

<p><code>erlang
digraph:add_edge(Graph, VertexStart, VertexEnd).
</code></p>

<p>To get all vertices from graph (random order) :vertices/1
<code>erlang
Vertices = digraph:vertices(Graph).
</code></p>

<p>And finally to get path you just call :get_path/3</p>

<p><code>erlang
Path = digraph:get_path(Graph, VertexStart, VertexEnd).
</code></p>

<p>This path is a list of vertices in order.  This API is just to remind me essential things about using the digraph from erlang stdlib. This graph is quite simple.</p>

<p>And for me for about 5000 vertices and a lot of edges it consumed 1.5 GB of ram. But when it was created it was super fast to use.</p>

<p>It was fun to play with.</p>

<h2>Quick summary</h2>

<p>I will make quick summary in form of short code sample!</p>

<p>``` erlang
G = digraph:new(),
V1 = digraph:add_vertex(G, "Andrychow"),
V2 = digraph:add_vertex(G, "Krakow"),
V3 = digraph:add_vertex(G, "London"),
V4 = digraph:add_vertex(G, "Warsaw"),
V5 = digraph:add_vertex(G, "Paris"),</p>

<p>digraph:add_edge(G, V1, V2),
digraph:add_edge(G, V2, V4),
digraph:add_edge(G, V2, V5),
digraph:add_edge(G, V2, V3),
digraph:add_edge(G, V3, V4),
digraph:add_edge(G, V3, V2),
digraph:add_edge(G, V2, V1),</p>

<p>PathHome = digraph:get_path(G, V3, V1).
<code>``
This gives you back</code>["London","Krakow","Andrychow"]` so Win! we are at home!</p>

<h1>Summary</h1>

<p>It was fun to play a bit with digraph before going to bed. There is a tone of things i did not use and also look into digraph_utils for even more things :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebar templates]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/05/29/rebar-templates/"/>
    <updated>2012-05-29T21:38:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/05/29/rebar-templates</id>
    <content type="html"><![CDATA[<p>First question when i need to add new blog to my code I ask is, do i remember all the boilerplate and how many times i will make a mistake this time. No more :). Rebar has a nice thing built in it is templating language that lets us build our own templates.</p>

<h1>Custom template ?</h1>

<p>I always end up looking at old projects and copying parts like <code>gen_server</code> and reusing them. I always knew rebar has option to write them but never had time to look at it. Today lol, i wanted to do some cleaning at home so every thing seems to be a good excuse to not do any cleaning :D.</p>

<h2>What i need to know</h2>

<p>Basic template is made from one or many <code>.erl</code> files written with <code>mustache</code> style <code>{ { } }</code> code and <code>.template</code> file describing what to do with files.</p>

<h2>Let's build gen_server template</h2>

<p>So my first file will be <code>gen_server.erl</code>
``` bash gen_server.erl
%%% @author  { {author_name } } &lt;{ {author_email} }>
%%% @copyright  { {copyright_year } }  { {author_name} }.
%%% @doc  { {description } }</p>

<p>-module( { {name } }).
-behaviour(gen_server).</p>

<p>-author(' { {author_name } } &lt;{ {author_email } }>').</p>

<p>-export([start_link/1]).
-export([init/1, handle_call/3, handle_cast/2, terminate/2, handle_info/2, code_change/3, stop/1]).</p>

<p>% public api</p>

<p>start_link(_Args) ->
  gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).</p>

<p>% state should be change with State that you will pass
init([]) ->
  {ok, state}.</p>

<p>stop(_Pid) ->
  stop().</p>

<p>stop() ->
  gen_server:cast(?MODULE, stop).</p>

<p>handle_call({method_name_and_params}, _From, State) ->
  Response = ok,
  {reply, Response, State};</p>

<p>handle_call(<em>Message, </em>From, State) ->
  {reply, error, State}.</p>

<p>handle_cast(<em>Message, State) -> {noreply, State}.
handle_info(</em>Message, State) -> {noreply, State}.
terminate(<em>Reason, </em>State) -> ok.
code_change(<em>OldVersion, State, </em>Extra) -> {ok, State}.
<code>``
This is the template, i know a bit long i tried to cut out all comments, euint etc and narrow it to minimum. I posted it to show how much you can save :). Now you will need the</code>transformation file`. All this things in { { something } } will be replaced by things we will type in command line or defaults from template file.</p>

<p><code>bash gen_server.template
{variables, [
  {name, "template"},
  {copyright_year, "2012"},
  {author_name, "jakub Oboza"},
  {author_email, "jakub.oboza@gmail.com"}
]}.
{template, "gen_server.erl", "src/{ {name} }.erl"}.
</code>
For me it looks like this, we have few default definitions and at the bottom. template! This is important part it says which file he has to copy where and what will be the name of new file. Now everything should be clear!</p>

<h2>Injet it into rebar!</h2>

<p>All you need now to do is symlink your template folders to <code>~/.rebar/templates</code> and you can use them!
(you can symlink your folder or just create one there :) )</p>

<h2>Use!</h2>

<p><code>bash
Î» rebar create template=gen_server name=example
==&gt; tmp (create)
Writing src/example.erl
</code>
Viola!</p>

<h1>important</h1>

<p>When i was looking at this post i saw that {{ is converted in a wrong way by octopress so i added spaces between them! check repo for correct code!</p>

<h1>My own templates</h1>

<p>Today i started adding my own templates initially i have only <code>gen_server</code> and <code>webmachine_resource</code> but i will add more :). It is fun it is like building your own anti-boiler plate framework.</p>

<p>My templates repo: <a href="https://github.com/JakubOboza/rebar-templates">https://github.com/JakubOboza/rebar-templates</a></p>

<p>Hope this helps!
Cheers!</p>
]]></content>
  </entry>
  
</feed>
