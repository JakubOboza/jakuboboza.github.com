<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku | No Fucking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/heroku/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2013-02-05T20:45:52+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building node.js module using npm]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/04/23/building-node-dot-js-module-using-npm/"/>
    <updated>2012-04-23T21:28:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/04/23/building-node-dot-js-module-using-npm</id>
    <content type="html"><![CDATA[<p>I have spend a bit time to find out how to build modules, where to put dependencies and how to form <code>package.json</code> so i decided to create this post to gather some of this info in one place. This <code>modules</code> are more like ruby <code>gems</code> than parts of language grouping functions also called modules (eg. Erlang). I was recently on conference and i want to post something about module i was working on at airport but before next post i need to add this so i will have something to reference to.</p>

<h1>npm</h1>

<p>Npm stands for node package manager and it is something like gems in ruby, eggs in python or apt in debian. It lets you search, install and update your node or application modules. You can create node.js modules without <code>npm</code> but if you want to publish your module its better to do it this way. If you have node.js <code>&gt;0.6.10</code> you should have npm bundled with your instalation if not go to <a href="http://npmjs.org/">http://npmjs.org/</a> and follow the instructions. (for normal platforms all you have to do i run <code>http://npmjs.org/install.sh</code>)</p>

<h1>scaffold</h1>

<p>First thing to do is to initialize our module, to do this we need to create a directory for it and run npm init like this.
<code>bash
λ mkdir my_first_module &amp;&amp; cd my_first_module
λ npm init
</code>
Next he will ask us few questions, we should answer ;).
example output:
``` bash
Package name: (my_first_module)
Description: my first module
Package version: (0.0.0)
Project homepage: (none) no-fucking-idea.com
Project git repository: (none)
Author name: Jakub Oboza
Author email: (none) jakub.oboza@gmail.com
Author url: (none) no-fucking-idea.com
Main module/entry point: (none)
Test command: (none) mocha -R landing lib/my_first_module.js      <br/>
About to write to /private/tmp/my_first_module/package.json</p>

<p>{
  "author": "Jakub Oboza <a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#106;&#97;&#107;&#117;&#98;&#x2e;&#x6f;&#x62;&#111;&#122;&#97;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#106;&#97;&#107;&#x75;&#x62;&#x2e;&#x6f;&#98;&#111;&#122;&#97;&#64;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a> (no-fucking-idea.com)",
  "name": "my_first_module",
  "description": "my first module",
  "version": "0.0.0",
  "homepage": "no-fucking-idea.com",
  "scripts": {</p>

<pre><code>"test": "mocha -R landing lib/my_first_module.js"
</code></pre>

<p>  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {</p>

<pre><code>"node": "*"
</code></pre>

<p>  }
}</p>

<p>Is this ok? (yes) yes
<code>``
This will create for us</code>package.json`. Now we have fully functional module and we could stop now.... but</p>

<h1>package.json</h1>

<p>This file is description of our package. It is in form of json so it should be easy to read and change.
Most of this fields don't need a lot of description because keys are self explaining but things that we should look at is <code>"scripts"</code> where we defined <code>"test"</code> key. If we will now run <code>npm test</code> he will execute this command that is very useful.</p>

<p>Engines defined on what version of <code>node.js</code> our code will work leaving it to <code>*</code> is a bit hazard. You can set it to something specific if you want.</p>

<p>Important thing! If we will not specify entry point to our module by default it will be looking for <code>index.js</code> so for now lets leave it this way.</p>

<h1>tests with mocha</h1>

<p>If we want to write reasonable code that we want to rely on we should be doing massive testing. I think <code>mocha</code> is a very good library for this purpose! I strongly suggest installing it with flag <code>-g</code> so it will be accessible in global scope of <code>npm</code>
<code>bash
λ npm install -g mocha
</code></p>

<h1>Code</h1>

<p>Ok but we don't have any code yet ;/. Yes lets start coding.
<code>bash
λ mkdir lib
λ touch index.js
λ touch lib/my_first_module.js
</code>
Ok so we created <code>lib</code> directory with out module code, empty module file and index file. Now lets run the tests and see what happened.
``` bash
λ npm test</p>

<blockquote><p>my_first_module@0.0.0 test /private/my_first_module
mocha -R landing lib/my_first_module.js</p></blockquote>

<p>  ✔ 0 tests complete (1ms)</p>

<p><code>``
Everything passed, that is expected because we don't have any tests :) Now lets add to</code>package.json<code>one more thing development dependency for</code>should.js<code>it will enable us to use mocha in a bit</code>rspec` bdd style. Like this:</p>

<p>``` javascript package.json
  "devDependencies": {</p>

<pre><code>"should": "&gt;= 0.0.0"
</code></pre>

<p>  },
```</p>

<p>And again <code>npm install -l</code> to get everything installed locally.</p>

<h2>First test</h2>

<p>Initial mocha test for our module</p>

<p>``` javascript lib/my_first_module.js
function MyFirstFoo(a, b){</p>

<p>}</p>

<p>module.exports = MyFirstFoo</p>

<p>require('should')</p>

<p>describe('MyFirstFoo', function(){
  it("should be able to add", function(){</p>

<pre><code>MyFirstFoo(2, 3).should.be[5];
</code></pre>

<p>  });
});
<code>
First we define empty body of function next we have `module.exports =` this is to mark which functions will be visible outside this module when other clients will `require` this module.  If you need more info about writing specs in mocha please read my earlier post &lt;http://no-fucking-idea.com/blog/2012/04/05/testing-handlebars-with-mocha/&gt;. Now lets run `npm test`
</code> bash
 λ npm test</p>

<blockquote><p>my_first_module@0.0.0 test /private/tmp/my_first_module
mocha -R landing lib/my_first_module.js</p>

<hr />

<p>  ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅✈</p>

<hr /></blockquote>

<p>  ✖ 1 of 1 tests failed:</p>

<p>  1) MyFirstFoo should be able to add:</p>

<pre><code> TypeError: Cannot read property 'should' of undefined
  at Context.&lt;anonymous&gt; (/private/tmp/lol/my_first_module/lib/my_first_module.js:13:21)
  at Test.run (/opt/local/lib/node_modules/mocha/lib/runnable.js:156:32)
  at Runner.runTest (/opt/local/lib/node_modules/mocha/lib/runner.js:272:10)
  at /opt/local/lib/node_modules/mocha/lib/runner.js:316:12
  at next (/opt/local/lib/node_modules/mocha/lib/runner.js:199:14)
  at /opt/local/lib/node_modules/mocha/lib/runner.js:208:7
  at next (/opt/local/lib/node_modules/mocha/lib/runner.js:157:23)
  at Array.0 (/opt/local/lib/node_modules/mocha/lib/runner.js:176:5)
  at EventEmitter._tickCallback (node.js:192:40)
</code></pre>

<p>...
<code>
Fails as expected so lets ad implementation to our function.
</code> javascript lib/my_first_module.js
function MyFirstFoo(a, b){
  return a + b;
}</p>

<p>module.exports = MyFirstFoo</p>

<p>require('should')</p>

<p>describe('MyFirstFoo', function(){
  it("should be able to add", function(){</p>

<pre><code>MyFirstFoo(2, 3).should.be[5];
</code></pre>

<p>  });
});
<code>``
And run</code>npm test`</p>

<p>``` bash
λ npm test</p>

<blockquote><p>my_first_module@0.0.0 test /private/tmp/lol/my_first_module
mocha -R landing lib/my_first_module.js</p>

<hr />

<p>  ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅✈</p>

<hr /></blockquote>

<p>  ✔ 1 tests complete (2ms)
```
We have landed safely ;) Now we are ready for development!</p>

<h1>Summary</h1>

<p>Creating good quality of code requires testing in node.js thats why i decided to join this two things and explain how to marry them both fast. More info can be found here <a href="http://howtonode.org/how-to-module">http://howtonode.org/how-to-module</a>.</p>

<p>I hope it helped a bit.
Cheers!</p>
]]></content>
  </entry>
  
</feed>
