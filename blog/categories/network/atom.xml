<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2013-12-16T22:30:04+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working with URL quick tip Network.Url]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/12/16/working-with-urls-quick-tip-network-dot-url/"/>
    <updated>2013-12-16T17:59:58+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/12/16/working-with-urls-quick-tip-network-dot-url</id>
    <content type="html"><![CDATA[<p>I have bigger text to post but before i will do it i have to split it into smaller parts so it will not be one long post about everything.</p>

<p><img src="http://i.imgur.com/jwI5yqK.png" alt="cat explaining stuff" /></p>

<h1>Working with URL&rsquo;s</h1>

<p>Most of the time when preparing to make an http request in haskell eg. using <code>simpleHTTP</code> we need to build a request. We have several ways to do it, one of them would be to ugly glue strings together but thats not the way to do it in a safe way. Happily for us we have <code>url</code>, <code>(cabal install url)</code> package that adds <code>Network.Url</code> package. And here i will show few quick tips how to use it to work with urls.</p>

<h2>Step one: Import</h2>

<p>First thing we have to do is to import our package :D and string into our url lib.</p>

<p>``` haskell start.hs
import Network.URL</p>

<p>main = do
  putStrLn &ldquo;give me some url:&rdquo;
  rawUrl &lt;&ndash; getLine
  let maybeUrl = importURL rawUrl in</p>

<pre><code>case maybeUrl of
Just url -&gt;
  putStrLn $ exportURL $ add\_param url ("param\_name","param\_value")
Nothing  -&gt; putStrLn "Sorry but this doesn't look like url"
</code></pre>

<p>```</p>

<p>This is the super simple example. But how it work? First of all we have <code>importURL</code> with signature:</p>

<p><code>haskell
importURL :: String -&gt; Maybe URL
</code></p>

<p>This will import url in form of string to url library and give us back Maybe URL. This is awesome! So we will have type that we can work on Yay! To exist library and get back string at the end we use <code>exportURL</code> with signature:</p>

<p><code>haskell
exportURL :: URL -&gt; String
</code></p>

<p>So we are only doing some simple transformation <code>String -&gt; Maybe URL -&gt; URL -&gt; String</code> thats nothing we can&rsquo;t handle!</p>

<p>Next important bit is <code>add_param</code> function with signature:</p>

<p><code>haskell
add_param :: URL -&gt; (String, String) -&gt; URL
</code></p>

<p>This does exactly what we would expect :D add url param to our url. Ofc work inside URL lib so we expect as input URL type.</p>

<h2>Setp two: More detailed example</h2>

<p>I will try to reiterate our first example showing a bit more thing. Or just same things in a different way. Lets try to add two params.</p>

<p>``` haskell ue2.hs
import Network.URL</p>

<p>prepareUrl url =
  let newUrl = add_param url (&ldquo;query&rdquo;,&ldquo;gimme cats pics&rdquo;) in</p>

<pre><code>add_param newUrl ("size", "any")
</code></pre>

<p>main = do
  putStrLn &ldquo;give me some url:&rdquo;
  rawUrl &lt;&ndash; getLine
  let maybeUrl = importURL rawUrl in</p>

<pre><code>case maybeUrl of
Just url -&gt;
  putStrLn $ exportURL $ prepareUrl url
Nothing  -&gt; putStrLn "Sorry but this doesn't look like url"
</code></pre>

<p>```</p>

<p>You should run the code and see something like this:
<code>
 Î» ./ue2
give me some url:
lambdacu.be
lambdacu.be?size=any&amp;query=gimme+cats+pics
</code></p>

<h1>Summary</h1>

<p>It is just a quick tip :) <code>Network.URL</code> has few more functions eg. to check if protocol is secure and checking if params are ok.
But stuff showed above is the main point of lib.</p>

<p>More about this lib ofc on hackage: <a href="http://hackage.haskell.org/package/url-2.1/docs/Network-URL.html">http://hackage.haskell.org/package/url-2.1/docs/Network-URL.html</a></p>

<p>&hellip;.And quick tip should be quick :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using tcpdump]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/12/11/using-tcpdump/"/>
    <updated>2012-12-11T21:02:00+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/12/11/using-tcpdump</id>
    <content type="html"><![CDATA[<p>We all love <code>tcpdump</code> :D So i found this tool useful while i was working on many things. Guess what ? it if very useful when working with network related stuff :D but its uneasy to grasp. This is my list of commands and options I use.</p>

<h2>Mac, Linux</h2>

<p>In this text i use <code>en0</code>, <code>en1</code> naming convention from OSX if you are linux user you should change it to eth0, eth1 w&hellip; check your network config using <code>ifconfig</code>. Basic knowledge required! =)</p>

<h1>Tcpdump</h1>

<p>Tcpdump is a tool that lets you dump network packets. This helps to debug networking issues, apis, communication or other stuff.</p>

<h2>Basic options</h2>

<p>Tcpdump basic options are</p>

<ul>
<li>-i &lsquo;interface&rsquo;  option lets you specify on which interface you will listen</li>
<li>-nS lets you see basic information about packets</li>
<li>-v, -vv, -vvv verbose mode</li>
<li>-s 1514 lets you specify how much data from packet is displayed. In this case you see whole packet</li>
<li>src, dst listening on specific things for source or destination</li>
<li>net eg. 192.168.0.1/24 listening on all stuff in some network.</li>
<li>port eg. port 3000 lets you listen on port</li>
</ul>


<h2>First example, getting info</h2>

<p>First thing that people do often is to listen to everything that bounces en1 like this:</p>

<p><code>bash
sudo tcpdump -nS -i en1
</code>
This is obviously bad idea, only good thing about its that i lets you see that &ldquo;something is on&rdquo; so you will be able to say that this device is actually working.</p>

<h2>Example two, targeting host!</h2>

<p>If you want to see all traffic that goes to some host, so something that is useful you should add <code>host</code> option.
<code>bash
sudo tcpdump -nS -i en1 host www.facebook.com
</code>
This will let you see if there are some packets going to and from &lt;www.facebook.com>.</p>

<h2>Example three, give me stuff targeting some port!</h2>

<p>Lets say you want to see what generates curl to your own machine
<code>bash
sudo tcpdump -vvnS -i lo0 port 4000
</code>
and in other shell just type
<code>bash
curl http://localhost:4000
</code>
port is most fun option because it lets you see stuff that you are interested in.</p>

<h1>Summary</h1>

<p>Tcpdump is useful tool and i hope this text will let me not constantly forget its options.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
