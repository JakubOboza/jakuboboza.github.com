<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2019-08-06T13:54:13+01:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Api prototyping with Rails respond_with]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/06/15/api-prototyping-with-rails-respond-with/"/>
    <updated>2012-06-15T23:11:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/06/15/api-prototyping-with-rails-respond-with</id>
    <content type="html"><![CDATA[<p>Prototyping json / xml RESTfull api with rails is easy. Before we will want to rewrite it to something like erlang webmachine or node.js! For purpose of this we can use syntax introduced in rails 3. (ages ago) with <code>respond_to/respond_with</code> it is very cool.</p>

<h1>Example controller</h1>

<p>How we use this ?  Lets take a peek and simple example:
``` ruby
class VenuesController &lt; ApplicationController</p>

<p>  respond_to :html, :xml, :json</p>

<p>  def index</p>

<pre><code>respond_with(@venues = Venue.all.page(params[:page]).per(20))
</code></pre>

<p>  end</p>

<p>end
<code>``
Two things we will notice at start is</code>respond_to :html, :xml, :json<code>this is something like old merbs</code>provides<code>where we specify to which formats we want to respond. Second change is how we layout the action. All we have to do is to put into</code>respond_with` object we want to respond with.</p>

<p>What this buys for us ?</p>

<ul>
<li>If we have html request to actions like create, update or destroy we want to redirect on success</li>
<li>if we have json, xml request to same type of &ldquo;state changing&rdquo; actions we want to render response with our format.</li>
</ul>


<p>We achieve both of this with reponds_with in just one line. But lets take a peek at longer example.</p>

<p>``` ruby
class VenuesController &lt; ApplicationController</p>

<p>  before_filter :authenticate_user!, :except => [:index, :show, :near]</p>

<p>  respond_to :html, :xml, :json</p>

<p>  def index</p>

<pre><code>respond_with(@venues = Venue.all.page(params[:page]).per(20))
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>respond_with(@venue = Venue.find_by(permalink: params[:id]))
</code></pre>

<p>  end</p>

<p>  def new</p>

<pre><code>repond_with(@venue = Venue.new)
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@venue = Venue.create(params[:venue])
respond_with(@venue, :location =&gt; venues_url)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>In this example we can see example of <code>create</code> action where we add <code>:location =&gt; venues_url</code> this will in case of format: html success redirect to this url.</p>

<h1>Summary</h1>

<p>Using this helps to write stuff fast and readable, you can still use plain old <code>respond_to</code> in action with old <code>format.html</code> syntax..</p>

<p>I hope you liked it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building ORM/ODM using virtus for MongoDB part 1]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1/"/>
    <updated>2012-04-12T21:07:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1</id>
    <content type="html"><![CDATA[<p>This blog post is start of series on building ORM/ODM libraries for Mongodb in different languages. I am a big fan of mongoid <a href="http://mongoid.org">http://mongoid.org</a> great Ruby ODM for mongodb. But i am even bigger fan of Mongodb <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>. Some time ago i saw post by my friend from <a href="http://www.lunarlogicpolska.com/">http://www.lunarlogicpolska.com/</a> about <code>virtus</code> <a href="http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html">http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html</a> (it&rsquo;s really worth reading) and i thought &ldquo;it&rsquo;s nice&rdquo;. Today i have spent two hours to cook this starter project because i want to learn more about <code>virtus</code> and building ODM&rsquo;s ORM&rsquo;s is not so common topic across web.</p>

<h1>Aim</h1>

<p>Building fully featured ODM in two hours from scratch is more then you can expect from me. Goal if first part is to make something that will map ruby PORO&rsquo;s to mongodb collections, be able to save them, find one or many in database and destroy. This looks like a lot but we will do it slowly and the implementation will be very basic. Our ODM will be named &ldquo;Muppet&rdquo;. Name describes the project :).</p>

<h3>Virtus</h3>

<p>Virtus handles properties for Plain Old Ruby Objects and this is all we need to have. This eliminates a lot of boilerplate code we would have to write to make anything work. PORO Powah!</p>

<h3>Mongo</h3>

<p><code>mongo</code> is a Mongodb native ruby driver. It has really good api and is easy to use. For most things in this post i just <code>proxied</code> calls to it :).</p>

<h3>Database!</h3>

<p>Be sure to have mongodb working ;).</p>

<h1>First step: Building a gem</h1>

<p>All about building gem you can find in my previous blog post here <a href="http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/">http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/</a>
Be sure to add rspec :) i used it to describe tests for this project.</p>

<h1>Second step: Describing api</h1>

<p>I like do develop things in TDD/BDD style so first thing for me description of api i wanted to implement during this tutorial.
All this specs are stripped to minimum to enhance readability.
``` ruby spec/muppet_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>class User
  include Virtus
  include Muppet</p>

<p>  attribute :name, String
  attribute :age, Integer
  attribute :birthday, DateTime
end</p>

<p>describe Muppet do</p>

<p>  describe &ldquo;#configuration&rdquo; do</p>

<pre><code>it "should be configurable" do
  lambda do
    Muppet.configure \{ \{
      host: "localhost",
      port: 27017,
      database: "test"
    }}
    Muppet.config.should be_a(Hash)
    Muppet.config[:host].should eql("localhost")
  end.should_not raise_error
end

it "should by default point to localhost:27017" do
  lambda do
    Muppet.config[:host].should eql("localhost")
    Muppet.config[:port].should eql(27017)
  end
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#connection&rdquo; do</p>

<pre><code>it "should connect to mongodb" do
  lambda do
    Muppet.connect!
  end.should_not raise_error
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#inserting&rdquo; do</p>

<pre><code>it "should insert values to database" do
  pending
  lambda do
    user = User.new(name: "Jakub", age: 27 )
    user.save.should be_true
  end.should change(User, :count)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#quering&rdquo; do</p>

<pre><code>it "should query all documents from collection" do
  pending
  User.find_one.should be_a(User)
end

it "should query first document from collection" do
  pending
  users = User.find
  users.should be_a(Array)
  users[0].should be_a(User)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#destroy&rdquo; do</p>

<pre><code>it "should destroy document" do
  pending
  lambda do
    User.find_one.destroy
  end.should change(User, :count).by(-1)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p><code>``
I defined them in order how i wanted to implement this. First configuration and connection to db. Next inserting and querying and destroying as last thing. Also at top i have simple User object with</code>virtus<code>and</code>muppet` included.</p>

<h1>Third step: layouting Muppet!</h1>

<p>At this moment we should have ready specs, that fail hard throwing errors on unknown tokens. Its good.
What i did is simple <code>lib/muppet.rb</code> defines the module we will include into out PORO&rsquo;s.
``` ruby muppet.rb
require &ldquo;mongo&rdquo;
require &ldquo;muppet/version&rdquo;
require &ldquo;muppet/setup&rdquo;</p>

<p>module Muppet
  extend Muppet::Setup
end
<code>
in `lib/muppet/` we will have components of our project. I we already know we will start with setup as defined in `muppet.rb` so lets create file `lib/muppet/setup` and configuration and connection to mongodb.
</code> ruby lib/muppet/setup.rb
module Muppet
  module Setup</p>

<pre><code>@@configuration = {
  host: "localhost",
  port: 27017,
  database: "test"
}

def configure(&amp;user_config)
  @@configuration.merge!(user_config.call)
end

def config
  @@configuration
end

def connect!
  @@connection = Mongo::Connection.new(@@configuration[:host],
    @@configuration[:port])
  @@database = @@connection.db(@@configuration[:database])
end

def database
  @@database
end

def connection
  @@connection
end
</code></pre>

<p>  end
end
<code>``
Here i defined default configuration and few method to access vital part of our config like</code>database<code>,</code>connection<code>. Most important part is</code>connect!<code>this method uses mongo gem to establish connection to mongodb store it into connection variable and set the database we will be working on. I wanted to make few things explicit so i used some name redundancy. (later on i learned that i did not even need</code>config` method)</p>

<p>With this working we can run out rspecs and if mongodb is up we should see all green and few yellows! Good it works!</p>

<h1>Forth step: support for quering and inserting</h1>

<p>Now lets remove pending marks from specs that  are in &ldquo;describes&rdquo; quering and inserting. This will be the heart of our ODM. We will define how he should save and load object from database. Before this we will have to update out <code>lib/muppet.rb</code> to include things we will use.
``` ruby lib/muppet.rb
require &ldquo;mongo&rdquo;
require &ldquo;muppet/version&rdquo;
require &ldquo;muppet/setup&rdquo;
require &ldquo;muppet/document&rdquo;</p>

<p>module Muppet
  extend Muppet::Setup
  include Muppet::Document::InstanceMethods</p>

<p>  def self.included(base)</p>

<pre><code>base.extend( Muppet::Document::ClassMethods )
</code></pre>

<p>  end</p>

<p>end
<code>
Ok many new things. I created `lib/muppet/document.rb` module with the stuff we will put into class and instance definitions in the moment of inclusion. As we can see in definition of `User` in our test cases we will `include Muppet` so all the instance methods like (save, destroy) will have to be defined in separated module then class methods like (find_one, find). In `document.rb` we  can see how it is implemented.
</code> ruby lib/muppet/document.rb
module Muppet
  module Document</p>

<pre><code>module ClassMethods

  def collection_name
    self.to_s
  end

  def collection
    Muppet.database.collection(collection_name)
  end

  def find_one(opts = {})
    result = collection.find_one(opts)
    return nil unless result
    self.new(result)
  end

  def find(opts = {})
    results = collection.find(opts)
    results.map{|result| self.new(result) }
  end

  def count
    collection.count
  end

end

module InstanceMethods

  def save
    self.class.collection.insert(self.attributes)
  end

  def destroy
    self.class.collection.remove(self.attributes)
  end

end
</code></pre>

<p>  end
end
```
I could not think of a way to implement it in a more simple way. We have to &ldquo;sections&rdquo; first is class methods where we define</p>

<ul>
<li>collection_name this method says to us what is the collection name (we can override it in model)</li>
<li>collection uses database to return this collection object for us to use.</li>
<li>find_one, find, count are methods that we proxy in a dirty explicit way (but without using method missing) things to mongo native driver.</li>
</ul>


<p>Only thing we do here is to wrap things that we get back into <code>self.new</code> object. So we can mimic AR/Mongoid api and when doing User.find we will get back array of all users. not array of hashes :).</p>

<p>Instance methods are only two <code>save</code> and <code>destroy</code> save is raw and simple, takes all attributes from using virtues and saves them using mongo native driver. destroy acts in the same way.</p>

<p>Now we can run the specs and see all is green. We have a basic ODM where we can add documents, map and query them to PORO&rsquo;s and remove.</p>

<h1>Summary</h1>

<p>I really enjoyed writing this code and blog post :).
You can find code for this blog post here <a href="https://github.com/JakubOboza/muppet">https://github.com/JakubOboza/muppet</a></p>

<p>This code is buggy and even specs needs to be enhanced but this is a good start for building new features on top of it. In  future parts i want to implement, updating, proxy objects, relations, embedded objects, dirty tracking(probably using <a href="https://github.com/solnic/virtus-dirty_tracking">https://github.com/solnic/virtus-dirty_tracking</a>) and few other mechanism that will enable us to make a fully functional ODM from &ldquo;Muppet&rdquo;</p>

<p>-Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Gem with Bundler]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/"/>
    <updated>2012-04-11T20:09:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler</id>
    <content type="html"><![CDATA[<p>Building a new gem ( ruby library ) with bundler is easy task. I found a lot of tutorial on this topic in the web but none of them was covering more then just generating scaffold and packing up the gem. I will try to uncover a bit more. So at the end of this post you will be able to generate new gem, build it and it will have ready support for rspec.</p>

<p>First of all you need bundler. To install bundler just type <code>gem install bundler</code>. Probably most of you guys have it already :) but just in case.</p>

<h1>Generating new gem</h1>

<p>To generate gem scaffold all you have to do is call <code>bundle gem &lt;gem name&gt;</code> like here
``` bash
bundle gem doctor_toons</p>

<pre><code>  create  doctor_toons/Gemfile
  create  doctor_toons/Rakefile
  create  doctor_toons/LICENSE
  create  doctor_toons/README.md
  create  doctor_toons/.gitignore
  create  doctor_toons/doctor_toons.gemspec
  create  doctor_toons/lib/doctor_toons.rb
  create  doctor_toons/lib/doctor_toons/version.rb
</code></pre>

<p>Initializating git repo in /private/tmp/doctor_toons
```
This will create directory named doctor_toons with:</p>

<ul>
<li>Gemfile where we specify production and development gems</li>
<li>Rakefile with our rake tasks, you need to remember that rake is not part of Gemfile if you are using ruby &lt; 1.9.2</li>
<li>License file with license, GPL, BSD, MIT, LOL choose one and put it in by default MIT.</li>
<li>it initializes git repo inside this directory and adds .gitignore with default ignores
<code>bash .gitignore
λ cat .gitignore
*.gem
*.rbc
.bundle
.config
.yardoc
Gemfile.lock
InstalledFiles
_yardoc
coverage
doc/
lib/bundler/man
pkg
rdoc
spec/reports
test/tmp
test/version_tmp
tmp
</code></li>
<li>lib directory for your code !!!</li>
<li>&lt; name >.gemspec file with whole gemspec for our gem.</li>
</ul>


<p>First thing we need to do is set gems we will be using while building our lib. Initial <code>Gemfile</code> looks like this
``` bash
λ cat Gemfile
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;</p>

<h1>Specify your gem&rsquo;s dependencies in doctor_toons.gemspec</h1>

<p>gemspec
<code>
All production needed gems needs to be added before `gemspec`. So if we will want to add rspec as _development_ dependency we need to put it after `gemspec` term in Gemfile. Eg. if we want to use mongo 1.6.2 as production dependency and rspec 2.9.0 as our development dependency we should do it like this.
</code> bash cat Gemfile
source &lsquo;<a href="https://rubygems.org">https://rubygems.org</a>&rsquo;</p>

<p>gem &lsquo;mongo&rsquo;, &lsquo;~> 1.6.2&rsquo;
gem &lsquo;bson&rsquo;,  &lsquo;~> 1.6.2&rsquo;</p>

<h1>Specify your gem&rsquo;s dependencies in doctor_toons.gemspec</h1>

<p>gemspec</p>

<p>gem &lsquo;rspec&rsquo;, &lsquo;~> 2.9.0&rsquo;
<code>
Now we can simply bundle all dependencies for our gem by hitting. `bundle install` you should see something like this
</code> bash
λ bundle install
Fetching gem metadata from <a href="https://rubygems.org/....">https://rubygems.org/....</a>
Using bson (1.6.2)
Using diff-lcs (1.1.3)
Using doctor_toons (0.0.1) from source at /private/tmp/doctor_toons
Using mongo (1.6.2)
Using rspec-core (2.9.0)
Using rspec-expectations (2.9.1)
Using rspec-mocks (2.9.0)
Using rspec (2.9.0)
Using bundler (1.1.0)
Your bundle is complete! Use <code>bundle show [gemname]</code> to see where a bundled gem is installed.
```</p>

<h1>Building gem!</h1>

<p>Ok now we are ready for next step, building gem! To do it we call <code>gem build &lt; name &gt;.gemspec</code> so lets do it
``` bash
λ gem build doctor_toons.gemspec
ERROR:  While executing gem &hellip; (Gem::InvalidSpecificationException)</p>

<pre><code>"FIXME" or "TODO" is not a description
</code></pre>

<p><code>
Error. This means that we need to supply few things before we will build this gem. First of all we need to `emacs &lt; name &gt;.gemspec` to edit the file with gemspec and set few things. By default this file should look like this
</code> ruby doctor_toons.gemspec</p>

<h1>&ndash;<em>&ndash; encoding: utf-8 &ndash;</em>&ndash;</h1>

<p>require File.expand_path(&lsquo;../lib/doctor_toons/version&rsquo;, <strong>FILE</strong>)</p>

<p>Gem::Specification.new do |gem|
  gem.authors       = [&ldquo;JakubOboza&rdquo;]
  gem.email         = [&ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#106;&#97;&#x6b;&#x75;&#x62;&#x2e;&#x6f;&#x62;&#x6f;&#122;&#97;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x6a;&#97;&#x6b;&#117;&#x62;&#46;&#x6f;&#x62;&#x6f;&#122;&#97;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a>&rdquo;]
  gem.description   = %q{TODO: Write a gem description}
  gem.summary       = %q{TODO: Write a gem summary}
  gem.homepage      = &ldquo;&rdquo;</p>

<p>  gem.executables   = <code>git ls-files -- bin/*</code>.split(&ldquo;\n&rdquo;).map{ |f| File.basename(f) }
  gem.files         = <code>git ls-files</code>.split(&ldquo;\n&rdquo;)
  gem.test_files    = <code>git ls-files -- {test,spec,features}/*</code>.split(&ldquo;\n&rdquo;)
  gem.name          = &ldquo;doctor_toons&rdquo;
  gem.require_paths = [&ldquo;lib&rdquo;]
  gem.version       = DoctorToons::VERSION
end
<code>
So lets edit description and summary and build again our gem. `gem build doctor_toons.gemspec`
</code> bash
λ gem build doctor_toons.gemspec
WARNING:  no homepage specified
  Successfully built RubyGem
  Name: doctor_toons
  Version: 0.0.1
  File: doctor_toons-0.0.1.gem
<code>
Yeah now we can build our gem :)
Lets have a look at gemspec `gem spec doctor_toons-0.0.1.gem` before we will be adding rspec to it :)
</code> bash
 λ gem spec doctor_toons-0.0.1.gem
&mdash;&ndash; !ruby/object:Gem::Specification
name: doctor_toons
version: !ruby/object:Gem::Version
  version: 0.0.1
  segments:
  hash:
platform: ruby
authors:
&ndash; JakubOboza
autorequire:
bindir: bin
cert_chain: []
date: 2012-04-11 00:00:00.000000000Z
dependencies: []
description: He sleeps with a gun, but he loves his son
email:
&ndash; <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x6a;&#x61;&#107;&#117;&#x62;&#x2e;&#111;&#98;&#x6f;&#x7a;&#97;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#106;&#97;&#x6b;&#117;&#98;&#x2e;&#x6f;&#x62;&#111;&#122;&#97;&#x40;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a>
executables: []
extensions: []
extra_rdoc_files: []
files:
&ndash; .gitignore
&ndash; Gemfile
&ndash; LICENSE
&ndash; README.md
&ndash; Rakefile
&ndash; doctor_toons.gemspec
&ndash; lib/doctor_toons.rb
&ndash; lib/doctor_toons/version.rb
homepage: &lsquo;&rsquo;
licenses: []
post_install_message:
rdoc_options: []
require_paths:
&ndash; lib
required_ruby_version: !ruby/object:Gem::Requirement
  none: false
  requirements:
  &ndash; &ndash; ! &lsquo;>=&rsquo;</p>

<pre><code>- !ruby/object:Gem::Version
  version: '0'
  segments: 
  hash: 
</code></pre>

<p>required_rubygems_version: !ruby/object:Gem::Requirement
  none: false
  requirements:
  &ndash; &ndash; ! &lsquo;>=&rsquo;</p>

<pre><code>- !ruby/object:Gem::Version
  version: '0'
  segments: 
  hash: 
</code></pre>

<p>requirements: []
rubyforge_project:
rubygems_version: 1.8.15
signing_key:
specification_version: 3
summary: Psycho dad
test_files: []
```
Everything is fine.</p>

<h1>Adding testing support</h1>

<p>Before we will be wiriting any library code its nice to add support for testing framework. I like name of rspec and rspec as a lib. It lets you define in form of tests specification for your library.</p>

<h2>Rspec</h2>

<p>Adding rspec to our project is easy. All we need to do it create directory called <code>spec</code> and file inside of it called <code>spec_helper.rb</code> like this
<code>bash
λ mkdir spec
λ touch spec/spec_helper.rb
</code>
Now we need to edit <code>spec_helper.rb</code> and add few things.
``` bash
require &lsquo;rubygems&rsquo;
require &lsquo;bundler/setup&rsquo;</p>

<h1>our gem</h1>

<p>require &lsquo;doctor_toons&rsquo;</p>

<p>RSpec.configure do |config|</p>

<p>end
<code>
This is bare minimum `spec_helper.rb` file we can have. All we do is require on rubygems, bundler setup and our gem `doctor_toons` :). To make it easy to use we should expand our rake with a spec task! like this
</code> ruby Rakefile</p>

<h1>!/usr/bin/env rake</h1>

<p>require &ldquo;bundler/gem_tasks&rdquo;</p>

<p>require &lsquo;rspec/core/rake_task&rsquo;</p>

<p>RSpec::Core::RakeTask.new(&lsquo;spec&rsquo;)</p>

<p>task :default => :spec
<code>
This will add `rspec` task called `rake spec` that will run all our specs :)
Now last thing we need to add first initial spec to our `spec` folder so we will be able to test it.
</code> ruby spec/doctor_toons_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>describe DoctorToons do</p>

<p>  it &ldquo;should rock&rdquo; do</p>

<pre><code>lambda do
  DoctorToons.rock()
end.should_not raise_error
</code></pre>

<p>  end</p>

<p>end
<code>``
Remember spec file names has to end with</code>_spec.rb`</p>

<p>Now if you will run <code>rake spec</code> you should see something like this
``` bash
Users/kuba/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -S rspec ./spec/doctor_toons_spec.rb
F</p>

<p>Failures:</p>

<p>  1) DoctorToons should rock</p>

<pre><code> Failure/Error: lambda do
   expected no Exception, got #&lt;NoMethodError: undefined method `rock' for DoctorToons:Module&gt;
 # ./spec/doctor_toons_spec.rb:6:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.00218 seconds
1 example, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/doctor_toons_spec.rb:5 # DoctorToons should rock
rake aborted!
/Users/kuba/.rvm/rubies/ruby-1.9.2-p290/bin/ruby -S rspec ./spec/doctor_toons_spec.rb failed</p>

<p>Tasks: TOP => spec
(See full trace by running task with &mdash;trace)
```
Wooow works :) now you can implement your library to rock the world!</p>

<h2>Few useful things</h2>

<p>If you want to have colorful output like me :). You can add <code>.rspec</code> file in top dir of project with content like this
<code>bash .rspec
--color
--format documentation
</code>
First line adds color output and second line is format out spec output, it is nice because its the most verbose output. You can easy see where spec failed. When you are on early stage of the project and you have few describes like 50-100 it often helps to develop faster.</p>

<h1>Summary</h1>

<p>This is just intro post about my upcoming series on building tools that you need :).
Fingers crossed :)</p>

<p>-Cheers!</p>
]]></content>
  </entry>
  
</feed>
