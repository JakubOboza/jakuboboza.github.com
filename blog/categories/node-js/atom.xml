<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | No Fucking Idea]]></title>
  <link href="http://JakubOboza.github.com/blog/categories/node-js/atom.xml" rel="self"/>
  <link href="http://JakubOboza.github.com/"/>
  <updated>2012-05-29T22:07:08+01:00</updated>
  <id>http://JakubOboza.github.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Future toons processing logs with node.js]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/29/future-toons-processing-logs-with-node-dot-js/"/>
    <updated>2012-04-29T20:41:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/29/future-toons-processing-logs-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>I'm using new relic for monitoring of my servers and i think it is great tool but recently their marketing wing
just spammmmmmed, hammered me with emails and when i replied to one of this emails it started to be even worse. My name is not Dave, David, John or Mark its Jakub. So i thought about processing nginx and all application servers on my own just for the lulz :).</p>

<p>First thing to achieve was to build a tool that will be able to work with logs in a way that will not limit it usage to small files. This is simple, i decided to build a lib that will enable to stream process logs by "entry". Some of the</p>

<h1>Initial idea</h1>

<p>We will emit single "entry" so for logs that are build around "lines" we will emit line and for logs like rails we will emit whole entry. Line streaming is easy so few hours ago during watching 3 season of <a href="http://en.wikipedia.org/wiki/Metalocalypse">http://en.wikipedia.org/wiki/Metalocalypse</a> i wrote this.</p>

<h1>Future toons</h1>

<p>Version 0.0.1 <a href="https://github.com/JakubOboza/future_toons">https://github.com/JakubOboza/future_toons</a> This is my entry point to analytics on big files :). First thing was a benchmark. I said to my self that it can't be more then 0.5sec on my box (i5 MBP) vs 100mb log file from nginx. I took a log from production and checked my initial code. It was 0.37 sec. That's ok.</p>

<p>``` javascript lib/toons.js
function FutureToons(filename, callback, end_callback){
  // in case someone will call it wrong way ;)
  if(false === (this instanceof FutureToons)) {</p>

<pre><code>return new FutureToons(filename, callback);
</code></pre>

<p>  }
  events.EventEmitter.call(this);</p>

<p>  this.onEnd(end_callback);</p>

<p>  if(filename &amp;&amp; callback){</p>

<pre><code>// if both present run instant
this.onLine(callback);
this.run(filename);
</code></pre>

<p>  }</p>

<p>}</p>

<p>// do not put methods between this line and initial definition
util.inherits(FutureToons, events.EventEmitter);
```</p>

<p>Code of whole thing is very simple. But while building node.js module there are few things that are useful. First of all you don't need to implement your own way of inheritance you can use the one from utils. (Remember to put it just after function definition) because it overrides prototype :) you don't wanna lose your "instance methods" don't you.</p>

<p>Next nice thing to help users is check of instanceof just at top of "constructor" function. This prevents users from using it wrong. Well its easier to say it enables them to use it wrong and fixes their mistake.
<code>javascript
var toons = require('future_toons');
new toons("example.js", function(line){});
</code>
and
<code>javascript
var toons = require('future_toons');
toons("example.js", function(line){});
</code>
This will produce same output and act in same way.</p>

<h1>How to use this ?</h1>

<p>It is simple :) You need to know three things, where the file is, what do you want to do with each line and do you need to do something at the end.</p>

<p>basic example:</p>

<p>``` javascript</p>

<p>var toons = require('future_toons');</p>

<p>var on_each_line_callback = function(line){
  console.log("> " + line);
};</p>

<p>new toons("example.txt", on_each_line_callback);
// this will auto trigger run and process it but you can delay it like this</p>

<p>var streamer = new toons();
streamer.onLine(on_each_line_callback);
// you can add function on end! also :)
streamer.onEnd(function(){console.log("lol")});
// run it naow!
streamer.run("example.txt");
// you can reuse it for many files if you want ;p
```
This example will show each line of the file prefixed with ">" symbol and at the end he will print out "lol". This is most common case in real world :) you need to optimize "lol". And for now thats the whole api.</p>

<h1>Command line interface</h1>

<p>Currently i added simple command line interface just to play with it. example usage:
<code>bash
λ time node bin/toons -f ~/Downloads/access.log -e "function(line){}" node bin/toons -f ~/Downloads/access.log -e "function(line){}"
0.38s user 0.07s system 101% cpu 0.440 total
</code>
It is a bit unsafe now so maybe i will remove it soonish.</p>

<h1>Db vs File</h1>

<p>Some people say they need to put logs into db, i always ask this people "why not just file? this db will have to write it to this file anyway :)"</p>

<h1>Summary</h1>

<p>if you will get email from new relic sales guy, ignore! don't reply ever!!! Haha while writing this post i got new email from their sales. Code is on github i hope i will have some time to work on it and it will have rails production.log streaming support soonish.</p>

<p>Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building node.js module using npm]]></title>
    <link href="http://JakubOboza.github.com/blog/2012/04/23/building-node-dot-js-module-using-npm/"/>
    <updated>2012-04-23T21:28:00+01:00</updated>
    <id>http://JakubOboza.github.com/blog/2012/04/23/building-node-dot-js-module-using-npm</id>
    <content type="html"><![CDATA[<p>I have spend a bit time to find out how to build modules, where to put dependencies and how to form <code>package.json</code> so i decided to create this post to gather some of this info in one place. This <code>modules</code> are more like ruby <code>gems</code> than parts of language grouping functions also called modules (eg. Erlang). I was recently on conference and i want to post something about module i was working on at airport but before next post i need to add this so i will have something to reference to.</p>

<h1>npm</h1>

<p>Npm stands for node package manager and it is something like gems in ruby, eggs in python or apt in debian. It lets you search, install and update your node or application modules. You can create node.js modules without <code>npm</code> but if you want to publish your module its better to do it this way. If you have node.js <code>&gt;0.6.10</code> you should have npm bundled with your instalation if not go to <a href="http://npmjs.org/">http://npmjs.org/</a> and follow the instructions. (for normal platforms all you have to do i run <code>http://npmjs.org/install.sh</code>)</p>

<h1>scaffold</h1>

<p>First thing to do is to initialize our module, to do this we need to create a directory for it and run npm init like this.
<code>bash
λ mkdir my_first_module &amp;&amp; cd my_first_module
λ npm init
</code>
Next he will ask us few questions, we should answer ;).
example output:
``` bash
Package name: (my_first_module)
Description: my first module
Package version: (0.0.0)
Project homepage: (none) no-fucking-idea.com
Project git repository: (none)
Author name: Jakub Oboza
Author email: (none) jakub.oboza@gmail.com
Author url: (none) no-fucking-idea.com
Main module/entry point: (none)
Test command: (none) mocha -R landing lib/my_first_module.js      <br/>
About to write to /private/tmp/my_first_module/package.json</p>

<p>{
  "author": "Jakub Oboza <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#106;&#x61;&#107;&#117;&#98;&#x2e;&#x6f;&#98;&#x6f;&#x7a;&#97;&#x40;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#x6a;&#x61;&#x6b;&#117;&#x62;&#46;&#111;&#98;&#111;&#122;&#97;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a> (no-fucking-idea.com)",
  "name": "my_first_module",
  "description": "my first module",
  "version": "0.0.0",
  "homepage": "no-fucking-idea.com",
  "scripts": {</p>

<pre><code>"test": "mocha -R landing lib/my_first_module.js"
</code></pre>

<p>  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {</p>

<pre><code>"node": "*"
</code></pre>

<p>  }
}</p>

<p>Is this ok? (yes) yes
<code>``
This will create for us</code>package.json`. Now we have fully functional module and we could stop now.... but</p>

<h1>package.json</h1>

<p>This file is description of our package. It is in form of json so it should be easy to read and change.
Most of this fields don't need a lot of description because keys are self explaining but things that we should look at is <code>"scripts"</code> where we defined <code>"test"</code> key. If we will now run <code>npm test</code> he will execute this command that is very useful.</p>

<p>Engines defined on what version of <code>node.js</code> our code will work leaving it to <code>*</code> is a bit hazard. You can set it to something specific if you want.</p>

<p>Important thing! If we will not specify entry point to our module by default it will be looking for <code>index.js</code> so for now lets leave it this way.</p>

<h1>tests with mocha</h1>

<p>If we want to write reasonable code that we want to rely on we should be doing massive testing. I think <code>mocha</code> is a very good library for this purpose! I strongly suggest installing it with flag <code>-g</code> so it will be accessible in global scope of <code>npm</code>
<code>bash
λ npm install -g mocha
</code></p>

<h1>Code</h1>

<p>Ok but we don't have any code yet ;/. Yes lets start coding.
<code>bash
λ mkdir lib
λ touch index.js
λ touch lib/my_first_module.js
</code>
Ok so we created <code>lib</code> directory with out module code, empty module file and index file. Now lets run the tests and see what happened.
``` bash
λ npm test</p>

<blockquote><p>my_first_module@0.0.0 test /private/my_first_module
mocha -R landing lib/my_first_module.js</p></blockquote>

<p>  ✔ 0 tests complete (1ms)</p>

<p><code>``
Everything passed, that is expected because we don't have any tests :) Now lets add to</code>package.json<code>one more thing development dependency for</code>should.js<code>it will enable us to use mocha in a bit</code>rspec` bdd style. Like this:</p>

<p>``` javascript package.json
  "devDependencies": {</p>

<pre><code>"should": "&gt;= 0.0.0"
</code></pre>

<p>  },
```</p>

<p>And again <code>npm install -l</code> to get everything installed locally.</p>

<h2>First test</h2>

<p>Initial mocha test for our module</p>

<p>``` javascript lib/my_first_module.js
function MyFirstFoo(a, b){</p>

<p>}</p>

<p>module.exports = MyFirstFoo</p>

<p>require('should')</p>

<p>describe('MyFirstFoo', function(){
  it("should be able to add", function(){</p>

<pre><code>MyFirstFoo(2, 3).should.be[5];
</code></pre>

<p>  });
});
<code>
First we define empty body of function next we have `module.exports =` this is to mark which functions will be visible outside this module when other clients will `require` this module.  If you need more info about writing specs in mocha please read my earlier post &lt;http://no-fucking-idea.com/blog/2012/04/05/testing-handlebars-with-mocha/&gt;. Now lets run `npm test`
</code> bash
 λ npm test</p>

<blockquote><p>my_first_module@0.0.0 test /private/tmp/my_first_module
mocha -R landing lib/my_first_module.js</p>

<hr />

<p>  ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅✈</p>

<hr /></blockquote>

<p>  ✖ 1 of 1 tests failed:</p>

<p>  1) MyFirstFoo should be able to add:</p>

<pre><code> TypeError: Cannot read property 'should' of undefined
  at Context.&lt;anonymous&gt; (/private/tmp/lol/my_first_module/lib/my_first_module.js:13:21)
  at Test.run (/opt/local/lib/node_modules/mocha/lib/runnable.js:156:32)
  at Runner.runTest (/opt/local/lib/node_modules/mocha/lib/runner.js:272:10)
  at /opt/local/lib/node_modules/mocha/lib/runner.js:316:12
  at next (/opt/local/lib/node_modules/mocha/lib/runner.js:199:14)
  at /opt/local/lib/node_modules/mocha/lib/runner.js:208:7
  at next (/opt/local/lib/node_modules/mocha/lib/runner.js:157:23)
  at Array.0 (/opt/local/lib/node_modules/mocha/lib/runner.js:176:5)
  at EventEmitter._tickCallback (node.js:192:40)
</code></pre>

<p>...
<code>
Fails as expected so lets ad implementation to our function.
</code> javascript lib/my_first_module.js
function MyFirstFoo(a, b){
  return a + b;
}</p>

<p>module.exports = MyFirstFoo</p>

<p>require('should')</p>

<p>describe('MyFirstFoo', function(){
  it("should be able to add", function(){</p>

<pre><code>MyFirstFoo(2, 3).should.be[5];
</code></pre>

<p>  });
});
<code>``
And run</code>npm test`</p>

<p>``` bash
λ npm test</p>

<blockquote><p>my_first_module@0.0.0 test /private/tmp/lol/my_first_module
mocha -R landing lib/my_first_module.js</p>

<hr />

<p>  ⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅⋅✈</p>

<hr /></blockquote>

<p>  ✔ 1 tests complete (2ms)
```
We have landed safely ;) Now we are ready for development!</p>

<h1>Summary</h1>

<p>Creating good quality of code requires testing in node.js thats why i decided to join this two things and explain how to marry them both fast. More info can be found here <a href="http://howtonode.org/how-to-module">http://howtonode.org/how-to-module</a>.</p>

<p>I hope it helped a bit.
Cheers!</p>
]]></content>
  </entry>
  
</feed>
