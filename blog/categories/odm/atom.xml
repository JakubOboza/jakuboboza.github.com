<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: odm | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/odm/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2014-03-23T11:20:13+00:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building ORM/ODM using virtus for MongoDB part 1]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1/"/>
    <updated>2012-04-12T21:07:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/04/12/building-orm-slash-odm-using-virtus-for-mongodb-part-1</id>
    <content type="html"><![CDATA[<p>This blog post is start of series on building ORM/ODM libraries for Mongodb in different languages. I am a big fan of mongoid <a href="http://mongoid.org">http://mongoid.org</a> great Ruby ODM for mongodb. But i am even bigger fan of Mongodb <a href="http://www.mongodb.org/">http://www.mongodb.org/</a>. Some time ago i saw post by my friend from <a href="http://www.lunarlogicpolska.com/">http://www.lunarlogicpolska.com/</a> about <code>virtus</code> <a href="http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html">http://solnic.eu/2011/06/06/virtus---attributes-for-your-plain-ruby-objects.html</a> (it&rsquo;s really worth reading) and i thought &ldquo;it&rsquo;s nice&rdquo;. Today i have spent two hours to cook this starter project because i want to learn more about <code>virtus</code> and building ODM&rsquo;s ORM&rsquo;s is not so common topic across web.</p>

<h1>Aim</h1>

<p>Building fully featured ODM in two hours from scratch is more then you can expect from me. Goal if first part is to make something that will map ruby PORO&rsquo;s to mongodb collections, be able to save them, find one or many in database and destroy. This looks like a lot but we will do it slowly and the implementation will be very basic. Our ODM will be named &ldquo;Muppet&rdquo;. Name describes the project :).</p>

<h3>Virtus</h3>

<p>Virtus handles properties for Plain Old Ruby Objects and this is all we need to have. This eliminates a lot of boilerplate code we would have to write to make anything work. PORO Powah!</p>

<h3>Mongo</h3>

<p><code>mongo</code> is a Mongodb native ruby driver. It has really good api and is easy to use. For most things in this post i just <code>proxied</code> calls to it :).</p>

<h3>Database!</h3>

<p>Be sure to have mongodb working ;).</p>

<h1>First step: Building a gem</h1>

<p>All about building gem you can find in my previous blog post here <a href="http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/">http://no-fucking-idea.com/blog/2012/04/11/building-gem-with-bundler/</a>
Be sure to add rspec :) i used it to describe tests for this project.</p>

<h1>Second step: Describing api</h1>

<p>I like do develop things in TDD/BDD style so first thing for me description of api i wanted to implement during this tutorial.
All this specs are stripped to minimum to enhance readability.
``` ruby spec/muppet_spec.rb
require &lsquo;spec_helper&rsquo;</p>

<p>class User
  include Virtus
  include Muppet</p>

<p>  attribute :name, String
  attribute :age, Integer
  attribute :birthday, DateTime
end</p>

<p>describe Muppet do</p>

<p>  describe &ldquo;#configuration&rdquo; do</p>

<pre><code>it "should be configurable" do
  lambda do
    Muppet.configure \{ \{
      host: "localhost",
      port: 27017,
      database: "test"
    }}
    Muppet.config.should be_a(Hash)
    Muppet.config[:host].should eql("localhost")
  end.should_not raise_error
end

it "should by default point to localhost:27017" do
  lambda do
    Muppet.config[:host].should eql("localhost")
    Muppet.config[:port].should eql(27017)
  end
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#connection&rdquo; do</p>

<pre><code>it "should connect to mongodb" do
  lambda do
    Muppet.connect!
  end.should_not raise_error
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#inserting&rdquo; do</p>

<pre><code>it "should insert values to database" do
  pending
  lambda do
    user = User.new(name: "Jakub", age: 27 )
    user.save.should be_true
  end.should change(User, :count)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#quering&rdquo; do</p>

<pre><code>it "should query all documents from collection" do
  pending
  User.find_one.should be_a(User)
end

it "should query first document from collection" do
  pending
  users = User.find
  users.should be_a(Array)
  users[0].should be_a(User)
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#destroy&rdquo; do</p>

<pre><code>it "should destroy document" do
  pending
  lambda do
    User.find_one.destroy
  end.should change(User, :count).by(-1)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p><code>``
I defined them in order how i wanted to implement this. First configuration and connection to db. Next inserting and querying and destroying as last thing. Also at top i have simple User object with</code>virtus<code>and</code>muppet` included.</p>

<h1>Third step: layouting Muppet!</h1>

<p>At this moment we should have ready specs, that fail hard throwing errors on unknown tokens. Its good.
What i did is simple <code>lib/muppet.rb</code> defines the module we will include into out PORO&rsquo;s.
``` ruby muppet.rb
require &ldquo;mongo&rdquo;
require &ldquo;muppet/version&rdquo;
require &ldquo;muppet/setup&rdquo;</p>

<p>module Muppet
  extend Muppet::Setup
end
<code>
in `lib/muppet/` we will have components of our project. I we already know we will start with setup as defined in `muppet.rb` so lets create file `lib/muppet/setup` and configuration and connection to mongodb.
</code> ruby lib/muppet/setup.rb
module Muppet
  module Setup</p>

<pre><code>@@configuration = {
  host: "localhost",
  port: 27017,
  database: "test"
}

def configure(&amp;user_config)
  @@configuration.merge!(user_config.call)
end

def config
  @@configuration
end

def connect!
  @@connection = Mongo::Connection.new(@@configuration[:host],
    @@configuration[:port])
  @@database = @@connection.db(@@configuration[:database])
end

def database
  @@database
end

def connection
  @@connection
end
</code></pre>

<p>  end
end
<code>``
Here i defined default configuration and few method to access vital part of our config like</code>database<code>,</code>connection<code>. Most important part is</code>connect!<code>this method uses mongo gem to establish connection to mongodb store it into connection variable and set the database we will be working on. I wanted to make few things explicit so i used some name redundancy. (later on i learned that i did not even need</code>config` method)</p>

<p>With this working we can run out rspecs and if mongodb is up we should see all green and few yellows! Good it works!</p>

<h1>Forth step: support for quering and inserting</h1>

<p>Now lets remove pending marks from specs that  are in &ldquo;describes&rdquo; quering and inserting. This will be the heart of our ODM. We will define how he should save and load object from database. Before this we will have to update out <code>lib/muppet.rb</code> to include things we will use.
``` ruby lib/muppet.rb
require &ldquo;mongo&rdquo;
require &ldquo;muppet/version&rdquo;
require &ldquo;muppet/setup&rdquo;
require &ldquo;muppet/document&rdquo;</p>

<p>module Muppet
  extend Muppet::Setup
  include Muppet::Document::InstanceMethods</p>

<p>  def self.included(base)</p>

<pre><code>base.extend( Muppet::Document::ClassMethods )
</code></pre>

<p>  end</p>

<p>end
<code>
Ok many new things. I created `lib/muppet/document.rb` module with the stuff we will put into class and instance definitions in the moment of inclusion. As we can see in definition of `User` in our test cases we will `include Muppet` so all the instance methods like (save, destroy) will have to be defined in separated module then class methods like (find_one, find). In `document.rb` we  can see how it is implemented.
</code> ruby lib/muppet/document.rb
module Muppet
  module Document</p>

<pre><code>module ClassMethods

  def collection_name
    self.to_s
  end

  def collection
    Muppet.database.collection(collection_name)
  end

  def find_one(opts = {})
    result = collection.find_one(opts)
    return nil unless result
    self.new(result)
  end

  def find(opts = {})
    results = collection.find(opts)
    results.map{|result| self.new(result) }
  end

  def count
    collection.count
  end

end

module InstanceMethods

  def save
    self.class.collection.insert(self.attributes)
  end

  def destroy
    self.class.collection.remove(self.attributes)
  end

end
</code></pre>

<p>  end
end
```
I could not think of a way to implement it in a more simple way. We have to &ldquo;sections&rdquo; first is class methods where we define</p>

<ul>
<li>collection_name this method says to us what is the collection name (we can override it in model)</li>
<li>collection uses database to return this collection object for us to use.</li>
<li>find_one, find, count are methods that we proxy in a dirty explicit way (but without using method missing) things to mongo native driver.</li>
</ul>


<p>Only thing we do here is to wrap things that we get back into <code>self.new</code> object. So we can mimic AR/Mongoid api and when doing User.find we will get back array of all users. not array of hashes :).</p>

<p>Instance methods are only two <code>save</code> and <code>destroy</code> save is raw and simple, takes all attributes from using virtues and saves them using mongo native driver. destroy acts in the same way.</p>

<p>Now we can run the specs and see all is green. We have a basic ODM where we can add documents, map and query them to PORO&rsquo;s and remove.</p>

<h1>Summary</h1>

<p>I really enjoyed writing this code and blog post :).
You can find code for this blog post here <a href="https://github.com/JakubOboza/muppet">https://github.com/JakubOboza/muppet</a></p>

<p>This code is buggy and even specs needs to be enhanced but this is a good start for building new features on top of it. In  future parts i want to implement, updating, proxy objects, relations, embedded objects, dirty tracking(probably using <a href="https://github.com/solnic/virtus-dirty_tracking">https://github.com/solnic/virtus-dirty_tracking</a>) and few other mechanism that will enable us to make a fully functional ODM from &ldquo;Muppet&rdquo;</p>

<p>-Cheers</p>
]]></content>
  </entry>
  
</feed>
