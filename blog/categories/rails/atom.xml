<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | No F*cking Idea]]></title>
  <link href="http://no-fucking-idea.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://no-fucking-idea.com/"/>
  <updated>2014-08-25T19:37:27+01:00</updated>
  <id>http://no-fucking-idea.com/</id>
  <author>
    <name><![CDATA[Jakub Oboza]]></name>
    <email><![CDATA[jakub.oboza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recent Rails security problems and building software]]></title>
    <link href="http://no-fucking-idea.com/blog/2013/02/12/recent-rails-security-problems-and-building-software/"/>
    <updated>2013-02-12T21:33:00+00:00</updated>
    <id>http://no-fucking-idea.com/blog/2013/02/12/recent-rails-security-problems-and-building-software</id>
    <content type="html"><![CDATA[<p>Recently we have a very very exploit rich winter. By now most of people connects everything to YAML and in general deserializing stuff. But I will not write about this in detail because for me the problem is deeper.</p>

<h1>Startup era</h1>

<p>We live now in startup era and main focus of people building new products is to make them fast. Who is the first to build some solution is most likely to get the market and monetize it. So almost every father of startup is looking for a technology that will help him build thing fast. This is the main reason that Rails are so popular, they are not fast, they consume memory like crazy but they offer you out-of-box something that you can work on. It has all properties you are looking for and everything is there with rich documentation and easy to learn and use conventions. Rails are like a gift to people who wants to &ldquo;prototype&rdquo; application fast, but for 99% of solution out there they never leave prototype stage.</p>

<h2>Going big!</h2>

<p>Rails started small, the community was small and it was normal that not many people cared about finding security issues because it was more important to add support for everything and make the framework richer and richer. First thing that was the biggest helper in opening every door was raising popularity but this is also the biggest enemy of the framework. It started traction around the framework and people started to hack it, audit code and find things that can be exploited.</p>

<h2>Natural point in life</h2>

<p>Every framework has to go through this type of periods in its life, there is no bug free code. People will find bugs in code base. What is the best way to prevent this ? Have a great team of engineers that follows the trends. But&hellip; most of startup owners wants to cut the costs, they outsource the work and have periods of life of the product that simply nobody cares about it in technical way.  Or it can be even worse, team can be focused so much on features because of the boss pressure that they don&rsquo;t have time for it.</p>

<h1>Building solution</h1>

<p>Some of startup starters will be technical, more technical or not technical at all, in most cases it is not technical at all and this is a problem. This leads to building every startup base on frameworks like Rails or Django. Scenario looks the same every time. First team spends a lot of time building initial release and next it goes big so they don&rsquo;t have a way to scale it in other way than spaming rails instances and changing database. So if something hits rails it hits whole platform and that hurts. Second scenario is that team is having some sort of engine and just a rails front end this is a smart approach because if something will go really wrong it only will kill front end and this is not bad! But how many teams build solutions in this way ? Not many, mostly polilingual team that know something more than ruby. What i experienced in my career is that people don&rsquo;t wan to do some initial design decisions before start they just want to have product and &ldquo;we will think about it later&rdquo;. This from business point of view is ok but this &ldquo;later&rdquo; is often very early.  Some startups are lucky enough to have engineer that are smart and know how to solve problems using background processing, caching and a bit of cheating (eg. like youtube do with vote count) so make everything work smooth but most of startups are created in a crazy way with big stress on speed of building.</p>

<h2>Problems, security and future</h2>

<p>People will always suggest things like <code>YAML.safe_load</code> in my personal opinion its not a solution but just a patch. Why not disable support for YAML, JSON, XML and any other type of request and make it explicit what you accept as form of request for actions. Trying to apply every possible parser to input is not often best thing to do.</p>

<h1>Summary</h1>

<p>I think problems like rails have now with security are not something we should cry about, it is just another step in becoming mature framework and problems like this can happen always with every framework. We have to embrace it and devise tactics to deal with it in a timely  fashion so we will not be affected. Building software is not cheap, maintaining it is not cheap but&hellip; if you will hit right market you will get the money back.</p>

<p>This is how i see startup stage now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Api prototyping with Rails respond_with]]></title>
    <link href="http://no-fucking-idea.com/blog/2012/06/15/api-prototyping-with-rails-respond-with/"/>
    <updated>2012-06-15T23:11:00+01:00</updated>
    <id>http://no-fucking-idea.com/blog/2012/06/15/api-prototyping-with-rails-respond-with</id>
    <content type="html"><![CDATA[<p>Prototyping json / xml RESTfull api with rails is easy. Before we will want to rewrite it to something like erlang webmachine or node.js! For purpose of this we can use syntax introduced in rails 3. (ages ago) with <code>respond_to/respond_with</code> it is very cool.</p>

<h1>Example controller</h1>

<p>How we use this ?  Lets take a peek and simple example:
``` ruby
class VenuesController &lt; ApplicationController</p>

<p>  respond_to :html, :xml, :json</p>

<p>  def index</p>

<pre><code>respond_with(@venues = Venue.all.page(params[:page]).per(20))
</code></pre>

<p>  end</p>

<p>end
<code>``
Two things we will notice at start is</code>respond_to :html, :xml, :json<code>this is something like old merbs</code>provides<code>where we specify to which formats we want to respond. Second change is how we layout the action. All we have to do is to put into</code>respond_with` object we want to respond with.</p>

<p>What this buys for us ?</p>

<ul>
<li>If we have html request to actions like create, update or destroy we want to redirect on success</li>
<li>if we have json, xml request to same type of &ldquo;state changing&rdquo; actions we want to render response with our format.</li>
</ul>


<p>We achieve both of this with reponds_with in just one line. But lets take a peek at longer example.</p>

<p>``` ruby
class VenuesController &lt; ApplicationController</p>

<p>  before_filter :authenticate_user!, :except => [:index, :show, :near]</p>

<p>  respond_to :html, :xml, :json</p>

<p>  def index</p>

<pre><code>respond_with(@venues = Venue.all.page(params[:page]).per(20))
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>respond_with(@venue = Venue.find_by(permalink: params[:id]))
</code></pre>

<p>  end</p>

<p>  def new</p>

<pre><code>repond_with(@venue = Venue.new)
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@venue = Venue.create(params[:venue])
respond_with(@venue, :location =&gt; venues_url)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>In this example we can see example of <code>create</code> action where we add <code>:location =&gt; venues_url</code> this will in case of format: html success redirect to this url.</p>

<h1>Summary</h1>

<p>Using this helps to write stuff fast and readable, you can still use plain old <code>respond_to</code> in action with old <code>format.html</code> syntax..</p>

<p>I hope you liked it :)</p>
]]></content>
  </entry>
  
</feed>
